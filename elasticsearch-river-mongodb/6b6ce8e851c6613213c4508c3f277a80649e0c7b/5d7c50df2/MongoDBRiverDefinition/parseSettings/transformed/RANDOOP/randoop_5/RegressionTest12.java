import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        java.lang.String str9 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.dropCollection(false);
        builder0.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject4 = builder0.mongoCollectionFilter;
        builder0.mongoGridFS = true;
        int int7 = builder0.connectTimeout;
        builder0.mongoAdminUser = "store_statistics";
        builder0.setsocketTimeout(60000);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str50 = mongoDBRiverDefinition39.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("is_mongos", "index");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?index?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.isMongos((java.lang.Boolean) true);
        builder9.skipInitialImport = true;
        boolean boolean16 = builder9.getmongoSecondaryReadPreference();
        builder9.setadvancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        builder0.settypeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.typeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoAdminUser("actions");
        builder14.settypeName("parent_types");
        java.lang.String str21 = builder14.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder14.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "password" + "'", str21, "password");
        org.junit.Assert.assertNull(mongoClientOptions22);
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        int int14 = builder13.getthrottleSize();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = null;
        builder13.mongoServers = serverAddressList15;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoDb("script_type");
        builder13.advancedTransformation = true;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = builder13.getinitialTimestamp();
        int int22 = builder13.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.isMongos((java.lang.Boolean) true);
        builder11.setriverName("");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript19 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript19.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj23 = docScoreSearchScript19.unwrap((java.lang.Object) docScoreNativeScriptFactory22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.isMongos((java.lang.Boolean) true);
        java.lang.String str30 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.mongoSSLVerifyCertificate(false);
        java.lang.String str33 = builder24.riverName;
        java.lang.String str34 = builder24.scriptType;
        builder24.statisticsTypeName = "secondary_read_preference";
        builder24.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder24.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject41 = builder24.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder11.mongoCollectionFilter(basicDBObject41);
        builder3.mongoCollectionFilter = basicDBObject41;
        int int45 = builder3.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean41 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoAdminUser;
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str45 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "concurrent_requests" + "'", str45, "concurrent_requests");
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.isMongos((java.lang.Boolean) true);
        builder3.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder3.mongoClientOptions = mongoClientOptions12;
        java.lang.String str14 = builder3.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder3.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        int int18 = builder16.getthrottleSize();
        java.util.Set<java.lang.String> strSet19 = builder16.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int21 = builder20.getsocketTimeout();
        boolean boolean22 = builder20.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        builder20.setmongoOplogFilter(basicDBObject27);
        builder20.throttleSize = 10;
        builder20.setsocketTimeout(10);
        java.lang.String[] strArray73 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet74);
        java.lang.String str77 = builder20.getscript();
        com.mongodb.BasicDBObject basicDBObject78 = builder20.getmongoCollectionFilter();
        builder16.mongoOplogFilter = basicDBObject78;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder3.mongoCollectionFilter(basicDBObject78);
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        org.elasticsearch.script.ScriptService scriptService82 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition83 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("filter", "drop_collection", riverSettings81, scriptService82);
        java.lang.String str84 = mongoDBRiverDefinition83.mongoLocalPassword;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(basicDBObject78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getUSER_FIELD();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        org.elasticsearch.common.logging.ESLogger eSLogger47 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str48 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "admin" + "'", str42, "admin");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "import_all_collections" + "'", str43, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "admin" + "'", str44, "admin");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "user" + "'", str45, "user");
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(eSLogger47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "concurrent_requests" + "'", str48, "concurrent_requests");
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.util.List<com.mongodb.ServerAddress> serverAddressList44 = mongoDBRiverDefinition39.mongoServers;
        int int45 = mongoDBRiverDefinition39.getConnectTimeout();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(serverAddressList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(strSet46);
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        builder8.setthrottleSize((int) ' ');
        builder8.disableIndexRefresh = true;
        int int24 = builder8.getsocketTimeout();
        java.lang.String str25 = builder8.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 60000 + "'", int24 == 60000);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        builder3.setstatisticsIndexName("include_fields");
        java.lang.String str10 = builder3.scriptType;
        builder3.setimportAllCollections(true);
        builder3.setindexName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.statisticsTypeName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str52 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "is_mongos" + "'", str52, "is_mongos");
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.statisticsIndexName("initial_timestamp");
        java.lang.String str13 = builder12.getmongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("bulk_size", "exclude_fields", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?exclude_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) (byte) 1);
        builder16.setindexName("type");
        builder16.settypeName("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str51 = mongoDBRiverDefinition39.statisticsTypeName;
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition39.getMongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(mongoClientOptions52);
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "actions" + "'", str47, "actions");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 27017 + "'", int48 == 27017);
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.setmongoAdminUser("script");
        boolean boolean9 = builder0.advancedTransformation;
        boolean boolean10 = builder0.getstoreStatistics();
        java.util.Set<java.lang.String> strSet11 = builder0.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        java.util.Set<java.lang.String> strSet11 = builder7.includeFields;
        builder7.setconnectTimeout(30000);
        builder7.setmongoCollection("db");
        java.lang.String str16 = builder7.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "servers" + "'", str16, "servers");
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.getimportAllCollections();
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = mongoDBRiverDefinition39.getInitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp46);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("index", "include_fields", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.disableIndexRefresh(true);
        boolean boolean11 = builder7.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        boolean boolean24 = builder23.mongoSSLVerifyCertificate;
        builder23.setscriptType("localhost");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        boolean boolean50 = mongoDBRiverDefinition47.isMongoGridFS();
        boolean boolean51 = mongoDBRiverDefinition47.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = mongoDBRiverDefinition47.initialTimestamp;
        docScoreSearchScript0.setNextVar("admin", (java.lang.Object) wildcardTimestamp52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.isMongos((java.lang.Boolean) true);
        java.lang.String str60 = builder54.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder54.mongoSSLVerifyCertificate(false);
        builder62.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder62.throttleSize(10);
        builder62.script = "index";
        builder62.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        java.lang.String str72 = mongoDBRiverDefinition71.statisticsTypeName;
        boolean boolean73 = mongoDBRiverDefinition71.importAllCollections;
        java.lang.Object obj74 = docScoreSearchScript0.unwrap((java.lang.Object) boolean73);
        docScoreSearchScript0.setNextScore((float) 27017);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(27017);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + false + "'", obj74, false);
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoCollection("localhost");
        builder8.dropCollection = false;
        com.mongodb.BasicDBObject basicDBObject17 = builder8.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        com.mongodb.BasicDBObject basicDBObject21 = builder20.mongoCollectionFilter;
        builder20.mongoLocalUser = "store_statistics";
        boolean boolean24 = builder20.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        builder0.typeName = "script_type";
        java.lang.String str7 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.importAllCollections(true);
        java.lang.String str10 = builder9.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoCollection("localhost");
        builder8.dropCollection = false;
        builder8.scriptType = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.storeStatistics(false);
        int int21 = builder8.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder8.throttleSize(32);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        boolean boolean7 = builder0.getmongoGridFS();
        builder0.setmongoAdminUser("null.null");
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        int int13 = builder11.getthrottleSize();
        java.util.Set<java.lang.String> strSet14 = builder11.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.indexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        builder19.setscriptType("user");
        builder19.statisticsTypeName = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder28.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        java.lang.String str38 = builder33.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.skipInitialImport(true);
        boolean boolean41 = builder40.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.indexName("credentials");
        java.lang.String str50 = builder49.mongoAdminUser;
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder49.parentTypes((java.util.Set<java.lang.String>) strSet80);
        builder45.includeFields = strSet80;
        builder32.setincludeFields((java.util.Set<java.lang.String>) strSet80);
        builder19.excludeFields = strSet80;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet80);
        builder0.excludeFields = strSet80;
        builder0.connectTimeout = 'a';
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        java.lang.String str43 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder0.storeStatistics(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "advanced_transformation" + "'", str43, "advanced_transformation");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.String str39 = builder38.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.mongoSecondaryReadPreference(false);
        builder38.setmongoLocalUser("include_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoOplogFilter();
        boolean boolean47 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script" + "'", str44, "script");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 60000 + "'", int45 == 60000);
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean50 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str51 = mongoDBRiverDefinition39.getUSER_FIELD();
        int int52 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "user" + "'", str51, "user");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "socket_timeout" + "'", str53, "socket_timeout");
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        boolean boolean44 = mongoDBRiverDefinition42.getmongoSSLVerifyCertificate();
        java.lang.String str45 = mongoDBRiverDefinition42.script;
        java.lang.String str46 = mongoDBRiverDefinition42.getScriptType();
        java.lang.String str47 = mongoDBRiverDefinition42.getScriptType();
        java.lang.String str48 = mongoDBRiverDefinition42.getDB_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition42.getCOLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "db" + "'", str48, "db");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "collection" + "'", str49, "collection");
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.typeName("collection");
        builder7.setriverIndexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        builder12.setskipInitialImport(false);
        builder12.mongoAdminUser = "initial_timestamp";
        builder12.connectTimeout = 27017;
        java.lang.String str20 = builder12.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition60.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str63 = mongoDBRiverDefinition60.getINDEX_OBJECT();
        int int64 = mongoDBRiverDefinition60.getDEFAULT_SOCKET_TIMEOUT();
        int int65 = mongoDBRiverDefinition60.throttleSize;
        java.util.Set<java.lang.String> strSet66 = mongoDBRiverDefinition60.parentTypes;
        builder12.parentTypes = strSet66;
        builder7.setparentTypes(strSet66);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "skip_initial_import" + "'", str62, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "index" + "'", str63, "index");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 60000 + "'", int64 == 60000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strSet66);
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        java.lang.Boolean boolean15 = builder12.getisMongos();
        builder12.setriverIndexName("import_all_collections");
        java.lang.String str18 = builder12.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder19.setmongoCollectionFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoAdminUser("gridfs");
        builder19.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder19.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder31.setmongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.indexName("credentials");
        java.lang.String str39 = builder38.mongoAdminUser;
        java.lang.String[] strArray68 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder73);
        java.lang.String str75 = mongoDBRiverDefinition74.getSIZE_FIELD();
        boolean boolean76 = mongoDBRiverDefinition74.disableIndexRefresh;
        boolean boolean77 = mongoDBRiverDefinition74.isMongoGridFS();
        int int78 = mongoDBRiverDefinition74.throttleSize;
        java.lang.String str79 = mongoDBRiverDefinition74.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject80 = mongoDBRiverDefinition74.mongoOplogFilter;
        java.lang.String str81 = mongoDBRiverDefinition74.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str82 = mongoDBRiverDefinition74.getBULK_TIMEOUT_FIELD();
        int int83 = mongoDBRiverDefinition74.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet84 = mongoDBRiverDefinition74.getParentTypes();
        builder31.excludeFields = strSet84;
        builder19.parentTypes = strSet84;
        builder12.setincludeFields(strSet84);
        builder12.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder12.mongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "import_all_collections" + "'", str18, "import_all_collections");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "size" + "'", str75, "size");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(basicDBObject80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "script" + "'", str81, "script");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "bulk_timeout" + "'", str82, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        boolean boolean8 = mongoDBRiverDefinition6.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition6.mongoDb;
        com.mongodb.MongoClientOptions mongoClientOptions11 = mongoDBRiverDefinition6.getMongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions11);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder5.setmongoAdminUser("gridfs");
        java.util.Set<java.lang.String> strSet8 = builder5.includeFields;
        builder5.mongoUseSSL = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "skip_initial_import" + "'", str46, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "actions" + "'", str47, "actions");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "include_collection" + "'", str49, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        boolean boolean14 = builder12.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        builder12.setmongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        int int23 = builder21.getthrottleSize();
        java.util.Set<java.lang.String> strSet24 = builder21.parentTypes;
        builder21.mongoLocalUser = "";
        builder21.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.indexName("credentials");
        java.lang.String str35 = builder34.mongoAdminUser;
        java.lang.String[] strArray64 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder34.parentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str71 = mongoDBRiverDefinition70.getSIZE_FIELD();
        boolean boolean72 = mongoDBRiverDefinition70.disableIndexRefresh;
        boolean boolean73 = mongoDBRiverDefinition70.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject74 = mongoDBRiverDefinition70.getMongoCollectionFilter();
        builder21.mongoCollectionFilter = basicDBObject74;
        builder12.mongoOplogFilter = basicDBObject74;
        builder0.setmongoOplogFilter(basicDBObject74);
        builder0.dropCollection = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "size" + "'", str71, "size");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(basicDBObject74);
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.lang.String str5 = builder3.getmongoAdminUser();
        builder3.statisticsTypeName = "is_mongos";
        builder3.statisticsTypeName = "script_type.null";
        builder3.setscriptType("options");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setisMongos((java.lang.Boolean) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.script("advanced_transformation");
        java.util.Set<java.lang.String> strSet8 = builder7.getexcludeFields();
        boolean boolean9 = builder7.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        boolean boolean15 = builder10.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int17 = builder16.getsocketTimeout();
        boolean boolean18 = builder16.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        builder16.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder10.mongoCollectionFilter(basicDBObject23);
        boolean boolean26 = builder10.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder10.setmongoClientOptions(mongoClientOptions27);
        builder10.setstatisticsIndexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder10.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = builder10.build();
        java.lang.String str34 = mongoDBRiverDefinition33.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject35 = mongoDBRiverDefinition33.mongoCollectionFilter;
        builder7.mongoOplogFilter = basicDBObject35;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(basicDBObject35);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean50 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str51 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gridfs" + "'", str51, "gridfs");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str47 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoAdminUser;
        int int50 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1000 + "'", int50 == 1000);
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        int int45 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str46 = mongoDBRiverDefinition39.getScriptType();
        int int47 = mongoDBRiverDefinition39.throttleSize;
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        builder0.typeName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.socketTimeout((int) (short) 10);
        java.lang.String str14 = builder0.mongoDb;
        builder0.setmongoLocalPassword("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str42 = mongoDBRiverDefinition39.getIndexName();
        int int43 = mongoDBRiverDefinition39.getSocketTimeout();
        com.mongodb.BasicDBObject basicDBObject44 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str45 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "credentials" + "'", str42, "credentials");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "name" + "'", str45, "name");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "connect_timeout" + "'", str47, "connect_timeout");
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str18 = mongoDBRiverDefinition17.getSIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.getHOST_FIELD();
        boolean boolean20 = mongoDBRiverDefinition17.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        java.lang.String str11 = builder7.riverName;
        com.mongodb.BasicDBObject basicDBObject12 = builder7.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        boolean boolean29 = builder13.getmongoSecondaryReadPreference();
        boolean boolean30 = builder13.storeStatistics;
        java.lang.String str31 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder13.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder13.indexName("sandbox");
        java.lang.String str36 = builder13.getstatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject37 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder7.mongoCollectionFilter(basicDBObject37);
        java.util.Set<java.lang.String> strSet39 = builder38.getincludeFields();
        builder38.setriverName("ssl");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet39);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.indexName;
        java.lang.String str47 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        int int48 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str49 = mongoDBRiverDefinition39.riverName;
        java.lang.String str50 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "localhost" + "'", str47, "localhost");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "store_statistics" + "'", str50, "store_statistics");
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        boolean boolean11 = builder7.getadvancedTransformation();
        builder7.setdisableIndexRefresh(false);
        boolean boolean14 = builder7.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        boolean boolean37 = builder36.mongoSecondaryReadPreference;
        java.lang.String str38 = builder36.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.mongoLocalPassword("");
        java.lang.String str43 = builder36.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList44 = builder36.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(serverAddressList44);
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.lang.String str8 = builder0.getmongoAdminPassword();
        java.lang.String str9 = builder0.statisticsTypeName;
        java.lang.String str10 = builder0.getscriptType();
        boolean boolean11 = builder0.importAllCollections;
        java.lang.String str12 = builder0.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        boolean boolean7 = builder0.mongoUseSSL;
        java.util.Set<java.lang.String> strSet8 = builder0.excludeFields;
        java.util.Set<java.lang.String> strSet9 = builder0.getexcludeFields();
        java.lang.Boolean boolean10 = builder0.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        boolean boolean44 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str45 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "include_collection" + "'", str45, "include_collection");
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        builder0.setsocketTimeout((int) (byte) 1);
        builder0.statisticsTypeName = "localhost";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.importAllCollections(false);
        builder0.setmongoLocalPassword("secondary_read_preference");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean44 = mongoDBRiverDefinition39.isSkipInitialImport();
        boolean boolean45 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.mongoClientOptions;
        boolean boolean48 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean41 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str47 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getDB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "servers" + "'", str48, "servers");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "name" + "'", str49, "name");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "db" + "'", str50, "db");
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean49 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str50 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str52 = mongoDBRiverDefinition39.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "servers" + "'", str50, "servers");
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.getriverIndexName();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalUser("name");
        builder0.setriverIndexName("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "type" + "'", str48, "type");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "name" + "'", str49, "name");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_requests" + "'", str50, "concurrent_requests");
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "type" + "'", str45, "type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoSecondaryReadPreference(true);
        builder13.throttleSize = 27017;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.indexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder17.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.disableIndexRefresh(true);
        builder21.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder28.mongoAdminUser;
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSIZE_FIELD();
        int int66 = mongoDBRiverDefinition64.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str67 = mongoDBRiverDefinition64.getStatisticsTypeName();
        boolean boolean68 = mongoDBRiverDefinition64.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition64.getIncludeFields();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition64.getParentTypes();
        builder21.setexcludeFields(strSet70);
        builder13.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        com.mongodb.BasicDBObject basicDBObject74 = builder13.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 30000 + "'", int66 == 30000);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(basicDBObject74);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str49 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str50 = mongoDBRiverDefinition39.getHOST_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "servers" + "'", str47, "servers");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "null.null" + "'", str48, "null.null");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "host" + "'", str50, "host");
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder28.mongoAdminUser;
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str65 = mongoDBRiverDefinition64.getSIZE_FIELD();
        boolean boolean66 = mongoDBRiverDefinition64.disableIndexRefresh;
        java.lang.String str67 = mongoDBRiverDefinition64.getACTIONS_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition64.getMongoOplogNamespace();
        java.lang.Boolean boolean69 = mongoDBRiverDefinition64.isMongos();
        boolean boolean70 = mongoDBRiverDefinition64.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition64.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder22.parentTypes(strSet71);
        builder72.setscript("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "size" + "'", str65, "size");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "actions" + "'", str67, "actions");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "null.null" + "'", str68, "null.null");
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder5.setsocketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder5.getinitialTimestamp();
        java.util.Set<java.lang.String> strSet9 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoSecondaryReadPreference(false);
        builder11.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean45 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str46 = mongoDBRiverDefinition39.getScriptType();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.mongoCollectionFilter;
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk" + "'", str48, "bulk");
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str50 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean51 = mongoDBRiverDefinition39.getskipInitialImport();
        boolean boolean52 = mongoDBRiverDefinition39.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "actions" + "'", str46, "actions");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "skip_initial_import" + "'", str47, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
        org.junit.Assert.assertNull(basicDBObject49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        boolean boolean44 = mongoDBRiverDefinition42.getmongoSSLVerifyCertificate();
        java.lang.String str45 = mongoDBRiverDefinition42.getCREDENTIALS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition42.getimportAllCollections();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition42.parentTypes;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder7.statisticsIndexName = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.statisticsIndexName("servers");
        java.lang.String str14 = builder7.getmongoAdminPassword();
        java.lang.String str15 = builder7.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "servers" + "'", str15, "servers");
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        java.lang.String str19 = builder0.riverIndexName;
        java.util.Set<java.lang.String> strSet20 = builder0.getexcludeFields();
        builder0.mongoCollection = "drop_collection";
        builder0.mongoAdminUser = "port";
        java.lang.String str25 = builder0.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        java.lang.String str13 = builder12.getriverName();
        boolean boolean14 = builder12.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoClientOptions(mongoClientOptions15);
        builder16.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("include_collection", "ssl_verify_certificate", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?ssl_verify_certificate?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str44 = mongoDBRiverDefinition39.getHOST_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script_type" + "'", str42, "script_type");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "host" + "'", str44, "host");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        builder8.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.socketTimeout(60000);
        builder8.setthrottleSize((int) ' ');
        builder8.disableIndexRefresh = true;
        int int24 = builder8.getsocketTimeout();
        builder8.mongoDb = "ssl";
        builder8.mongoCollection = "flush_interval";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 60000 + "'", int24 == 60000);
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.String str43 = mongoDBRiverDefinition42.getSIZE_FIELD();
        boolean boolean44 = mongoDBRiverDefinition42.disableIndexRefresh;
        java.lang.String str45 = mongoDBRiverDefinition42.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition42.statisticsTypeName;
        boolean boolean47 = mongoDBRiverDefinition42.isAdvancedTransformation();
        java.lang.String str48 = mongoDBRiverDefinition42.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition42.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int50 = mongoDBRiverDefinition42.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str51 = mongoDBRiverDefinition42.getScriptType();
        com.mongodb.BasicDBObject basicDBObject52 = mongoDBRiverDefinition42.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        org.elasticsearch.script.ScriptService scriptService54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("admin", "script.default_lang", riverSettings53, scriptService54);
        java.lang.String str56 = mongoDBRiverDefinition55.getEXCLUDE_FIELDS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions57 = mongoDBRiverDefinition55.getMongoClientOptions();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "size" + "'", str43, "size");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "import_all_collections" + "'", str48, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "import_all_collections" + "'", str49, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 60000 + "'", int50 == 60000);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "exclude_fields" + "'", str56, "exclude_fields");
        org.junit.Assert.assertNull(mongoClientOptions57);
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue43 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoDb();
        int int45 = mongoDBRiverDefinition39.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.isMongos((java.lang.Boolean) true);
        java.lang.String str17 = builder11.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.mongoSSLVerifyCertificate(false);
        builder19.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.throttleSize(10);
        builder19.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        java.lang.String str30 = builder29.mongoAdminUser;
        java.lang.String[] strArray59 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        java.lang.String str66 = mongoDBRiverDefinition65.getSIZE_FIELD();
        java.lang.String str67 = mongoDBRiverDefinition65.getTHROTTLE_SIZE_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition65.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int69 = mongoDBRiverDefinition65.getDEFAULT_BULK_ACTIONS();
        int int70 = mongoDBRiverDefinition65.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList71 = mongoDBRiverDefinition65.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder19.mongoServers(serverAddressList71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder0.mongoServers(serverAddressList71);
        java.lang.String str74 = builder0.mongoLocalPassword;
        builder0.setstatisticsIndexName("ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "size" + "'", str66, "size");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "throttle_size" + "'", str67, "throttle_size");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "concurrent_bulk_requests" + "'", str68, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1000 + "'", int69 == 1000);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 60000 + "'", int70 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        boolean boolean11 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.storeStatistics(false);
        builder0.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder0.mongoAdminPassword = "parent_types";
        java.lang.String str11 = builder0.getriverIndexName();
        int int12 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder13.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoAdminUser("gridfs");
        builder13.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoOplogFilter();
        java.lang.String str24 = builder22.gettypeName();
        builder22.setscriptType("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        java.lang.String str31 = builder30.mongoAdminUser;
        java.lang.String[] strArray60 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder65);
        java.lang.String str67 = mongoDBRiverDefinition66.getSIZE_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition66.getTHROTTLE_SIZE_FIELD();
        java.lang.String str69 = mongoDBRiverDefinition66.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean70 = mongoDBRiverDefinition66.getmongoGridFS();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition66.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder22.excludeFields(strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder0.excludeFields(strSet71);
        int int74 = builder0.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(basicDBObject23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "size" + "'", str67, "size");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "throttle_size" + "'", str68, "throttle_size");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "concurrent_bulk_requests" + "'", str69, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "host" + "'", str41, "host");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        java.lang.String str10 = builder7.getindexName();
        java.lang.String str11 = builder7.getincludeCollection();
        java.lang.String str12 = builder7.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject51 = builder48.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        builder7.mongoOplogFilter = basicDBObject51;
        java.lang.String str54 = builder7.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder7.mongoAdminPassword("");
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder56.mongoCollectionFilter = basicDBObject57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.statisticsTypeName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.elasticsearch.common.logging.ESLogger eSLogger47 = mongoDBRiverDefinition39.getlogger();
        boolean boolean48 = mongoDBRiverDefinition39.isDropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(eSLogger47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getFILTER_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.mongoAdminUser;
        org.elasticsearch.common.unit.TimeValue timeValue50 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition39.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "filter" + "'", str48, "filter");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(timeValue50);
        org.junit.Assert.assertNull(boolean51);
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setscript("disable_index_refresh");
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder18.setindexName("ssl");
        builder18.scriptType = "index";
        builder18.includeCollection = "flush_interval";
        builder18.scriptType = "host";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str47 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "localhost" + "'", str47, "localhost");
        org.junit.Assert.assertNull(wildcardTimestamp48);
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.getSIZE_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.disableIndexRefresh;
        boolean boolean47 = mongoDBRiverDefinition44.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        java.lang.String str49 = mongoDBRiverDefinition44.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition44.getScriptType();
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition44);
        java.lang.String str52 = mongoDBRiverDefinition44.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition44.getDB_FIELD();
        boolean boolean54 = mongoDBRiverDefinition44.dropCollection;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "script" + "'", str52, "script");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "db" + "'", str53, "db");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoCollection("script.default_lang");
        builder7.setsocketTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.riverName("");
        builder7.mongoAdminPassword = "actions";
        boolean boolean16 = builder7.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        java.lang.String str6 = builder0.getstatisticsTypeName();
        builder0.setmongoCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.scriptType("script_type");
        builder0.mongoCollection = "options";
        boolean boolean13 = builder0.getdisableIndexRefresh();
        java.lang.String str14 = builder0.getmongoCollection();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder7.mongoCollection("disable_index_refresh");
        builder7.mongoLocalPassword = "filter";
        boolean boolean63 = builder7.dropCollection;
        builder7.setmongoLocalUser("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.Class<?> wildcardClass46 = mongoDBRiverDefinition39.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        builder38.setsocketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder38.riverIndexName("skip_initial_import");
        boolean boolean45 = builder44.mongoGridFS;
        builder44.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.isDropCollection();
        java.lang.String str46 = mongoDBRiverDefinition39.getSIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "size" + "'", str46, "size");
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        java.lang.String str46 = builder38.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder38.statisticsIndexName("password");
        boolean boolean49 = builder48.getadvancedTransformation();
        boolean boolean50 = builder48.mongoGridFS;
        java.lang.String str51 = builder48.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.indexName("credentials");
        java.lang.String str6 = builder5.mongoAdminUser;
        java.lang.String[] strArray35 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder5.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        java.lang.String str42 = mongoDBRiverDefinition41.getSIZE_FIELD();
        boolean boolean43 = mongoDBRiverDefinition41.disableIndexRefresh;
        boolean boolean44 = mongoDBRiverDefinition41.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition41.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition41.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition41.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = riverSettings48.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = riverSettings48.settings();
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings0, strMap50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = riverSettings51.settings();
        org.elasticsearch.common.settings.Settings settings53 = riverSettings51.globalSettings();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "size" + "'", str42, "size");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "bulk_timeout" + "'", str46, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(settings53);
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        java.lang.String str2 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder3.getscript();
        boolean boolean8 = builder3.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject16);
        java.lang.String str20 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.statisticsTypeName("bulk");
        builder22.storeStatistics = false;
        java.util.Set<java.lang.String> strSet25 = builder22.getexcludeFields();
        java.lang.Class<?> wildcardClass26 = builder22.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str51 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean53 = mongoDBRiverDefinition39.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gridfs" + "'", str51, "gridfs");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "concurrent_bulk_requests" + "'", str52, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        builder6.setisMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoUseSSL(false);
        builder13.mongoLocalUser = "bulk";
        builder13.setmongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject58 = builder57.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = builder57.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder57.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder57.disableIndexRefresh(true);
        docScoreSearchScript0.setNextVar("is_mongos", (java.lang.Object) builder57);
        java.lang.String str65 = builder57.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder57.mongoAdminPassword("sandbox");
        java.lang.String str68 = builder67.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject69 = builder67.mongoCollectionFilter;
        java.lang.String str70 = builder67.mongoAdminPassword;
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "sandbox" + "'", str70, "sandbox");
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "parent_types" + "'", str42, "parent_types");
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int10 = builder9.getsocketTimeout();
        boolean boolean11 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.excludeFields = strSet46;
        java.lang.String str50 = builder9.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        docScoreSearchScript0.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition51);
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition51.mongoCollectionFilter;
        boolean boolean54 = mongoDBRiverDefinition51.getstoreStatistics();
        java.lang.String str55 = mongoDBRiverDefinition51.getTypeName();
        java.lang.String str56 = mongoDBRiverDefinition51.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition51.getMongoOplogFilter();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition51.getExcludeFields();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(basicDBObject57);
        org.junit.Assert.assertNotNull(strSet58);
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "store_statistics" + "'", str45, "store_statistics");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script_type" + "'", str48, "script_type");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str48 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "connect_timeout" + "'", str48, "connect_timeout");
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        builder5.setriverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.disableIndexRefresh(false);
        builder9.setincludeCollection("type");
        java.lang.String str12 = builder9.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.setmongoCollectionFilter(basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder6.mongoOplogFilter(basicDBObject16);
        int int18 = builder6.throttleSize;
        java.lang.String str19 = builder6.getmongoLocalUser();
        int int20 = builder6.getsocketTimeout();
        int int21 = builder6.socketTimeout;
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) builder6);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(true);
        builder13.setconnectTimeout((int) 'a');
        builder13.riverName = "port";
        builder13.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.setmongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoAdminUser("gridfs");
        builder20.scriptType = "script.disable_dynamic";
        builder20.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder20.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder33.getscript();
        boolean boolean38 = builder33.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int40 = builder39.getsocketTimeout();
        boolean boolean41 = builder39.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str43 = builder42.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject46 = builder45.getmongoCollectionFilter();
        builder39.setmongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder33.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        builder31.mongoOplogFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder31.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = mongoDBRiverDefinition53.mongoServers;
        builder13.setmongoServers(serverAddressList54);
        java.lang.String str56 = builder13.riverIndexName;
        builder13.riverName = "script.disable_dynamic";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoAdminUser();
        java.lang.String str44 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script_type" + "'", str44, "script_type");
        org.junit.Assert.assertNotNull(byteSizeValue45);
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.throttleSize = (byte) 10;
        boolean boolean19 = builder8.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.scriptType("index");
        builder26.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        java.lang.String str33 = builder32.mongoAdminUser;
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        boolean boolean69 = mongoDBRiverDefinition68.getdropCollection();
        java.util.Set<java.lang.String> strSet70 = mongoDBRiverDefinition68.getParentTypes();
        builder26.parentTypes = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.excludeFields(strSet70);
        java.lang.String str73 = builder72.getindexName();
        java.lang.String str74 = builder72.riverIndexName;
        builder72.setskipInitialImport(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "credentials" + "'", str73, "credentials");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int11 = builder10.getsocketTimeout();
        boolean boolean12 = builder10.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        java.lang.String str15 = builder10.riverName;
        builder10.setmongoSecondaryReadPreference(true);
        com.mongodb.BasicDBObject basicDBObject18 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        java.lang.String str20 = builder0.getindexName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str47 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.excludeFields;
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str51 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index" + "'", str47, "index");
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "index" + "'", str51, "index");
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        docScoreSearchScript0.setNextScore((float) 32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder20.setmongoOplogFilter(basicDBObject21);
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder20.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder20.getinitialTimestamp();
        builder20.mongoLocalUser = "socket_timeout";
        java.lang.String str27 = builder20.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder20.getmongoClientOptions();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoClientOptions28);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.scriptType("null.null");
        builder49.setdropCollection(false);
        builder49.setstatisticsTypeName("size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverIndexName();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getIncludeFields();
        boolean boolean47 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        java.util.Set<java.lang.String> strSet43 = builder36.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.includeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder36.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder36.mongoCollection("options");
        builder49.setconnectTimeout(100);
        builder49.setriverName("script_type.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        boolean boolean6 = builder0.skipInitialImport;
        builder0.setmongoAdminUser("advanced_transformation");
        builder0.setthrottleSize(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoCollection("name");
        builder0.importAllCollections = false;
        builder0.setimportAllCollections(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.isMongos;
        int int47 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "import_all_collections" + "'", str45, "import_all_collections");
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 30000 + "'", int47 == 30000);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(true);
        boolean boolean12 = builder11.getskipInitialImport();
        java.lang.String str13 = builder11.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder11.mongoClientOptions = mongoClientOptions14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.typeName("password");
        java.lang.String str18 = builder17.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        builder0.dropCollection = true;
        builder0.setconnectTimeout(8);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getScript();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getExcludeFields();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_bulk_requests" + "'", str43, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean43 = mongoDBRiverDefinition42.mongoSSLVerifyCertificate;
        boolean boolean44 = mongoDBRiverDefinition42.getmongoSSLVerifyCertificate();
        java.lang.String str45 = mongoDBRiverDefinition42.getCREDENTIALS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition42.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition42.getDB_FIELD();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "db" + "'", str47, "db");
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        int int34 = builder33.getthrottleSize();
        builder33.riverName = "bulk";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.dropCollection(false);
        builder13.mongoDb = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoDb("bulk_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        builder0.settypeName("throttle_size");
        builder0.setindexName("secondary_read_preference");
        java.lang.String str16 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.connectTimeout((int) (byte) 1);
        boolean boolean19 = builder0.storeStatistics;
        java.lang.String str20 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder21.setmongoOplogFilter(basicDBObject22);
        int int24 = builder21.socketTimeout;
        builder21.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.mongoCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        boolean boolean33 = builder29.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        java.lang.String str38 = builder34.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder41.getscript();
        boolean boolean46 = builder41.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int48 = builder47.getsocketTimeout();
        boolean boolean49 = builder47.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject54 = builder53.getmongoCollectionFilter();
        builder47.setmongoOplogFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder41.mongoCollectionFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder40.mongoOplogFilter(basicDBObject54);
        builder29.setmongoOplogFilter(basicDBObject54);
        builder21.setmongoCollectionFilter(basicDBObject54);
        java.lang.String str60 = builder21.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str62 = builder61.statisticsIndexName;
        int int63 = builder61.getthrottleSize();
        builder61.mongoGridFS = false;
        int int66 = builder61.socketTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = builder61.getmongoServers();
        builder21.mongoServers = serverAddressList67;
        builder0.setmongoServers(serverAddressList67);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondary_read_preference" + "'", str20, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(serverAddressList67);
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder7.mongoCollection("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject61 = builder7.getmongoOplogFilter();
        boolean boolean62 = builder7.mongoSecondaryReadPreference;
        java.lang.String str63 = builder7.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder7.scriptType("throttle_size");
        builder65.dropCollection = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(basicDBObject61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        java.lang.String str10 = builder0.riverName;
        boolean boolean11 = builder0.skipInitialImport;
        boolean boolean12 = builder0.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.statisticsTypeName("bulk_size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str47 = mongoDBRiverDefinition39.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder8.mongoAdminUser;
        java.lang.String[] strArray38 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.lang.String str45 = mongoDBRiverDefinition44.getSIZE_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.disableIndexRefresh;
        boolean boolean47 = mongoDBRiverDefinition44.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition44.getMongoCollectionFilter();
        java.lang.String str49 = mongoDBRiverDefinition44.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition44.getScriptType();
        java.lang.Object obj51 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition44);
        java.lang.String str52 = mongoDBRiverDefinition44.getMongoCollection();
        boolean boolean53 = mongoDBRiverDefinition44.getstoreStatistics();
        java.lang.String str54 = mongoDBRiverDefinition44.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean55 = mongoDBRiverDefinition44.mongoSecondaryReadPreference;
        java.lang.String str56 = mongoDBRiverDefinition44.getMongoCollection();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "advanced_transformation" + "'", str54, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.indexName("index");
        builder9.mongoAdminUser = "secondary_read_preference";
        com.mongodb.BasicDBObject basicDBObject12 = builder9.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        java.lang.String str56 = builder0.getmongoLocalUser();
        builder0.statisticsIndexName = "size";
        java.lang.String str59 = builder0.scriptType;
        java.lang.String str60 = builder0.riverIndexName;
        builder0.skipInitialImport = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.mongoSSLVerifyCertificate(false);
        builder12.importAllCollections = true;
        com.mongodb.BasicDBObject basicDBObject22 = builder12.getmongoCollectionFilter();
        builder7.setmongoOplogFilter(basicDBObject22);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject22);
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        java.lang.String str50 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition47.getMongoOplogNamespace();
        java.lang.Boolean boolean52 = mongoDBRiverDefinition47.isMongos();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition47.excludeFields;
        boolean boolean54 = mongoDBRiverDefinition47.getskipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition47.mongoServers;
        java.lang.String str56 = mongoDBRiverDefinition47.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition47.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition47.mongoCollectionFilter;
        java.lang.String str59 = mongoDBRiverDefinition47.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition47.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject60;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "actions" + "'", str50, "actions");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "null.null" + "'", str51, "null.null");
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "import_all_collections" + "'", str56, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "gridfs" + "'", str57, "gridfs");
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "bulk_size" + "'", str59, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject60);
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.riverName;
        org.elasticsearch.common.logging.ESLogger eSLogger43 = mongoDBRiverDefinition39.getlogger();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos;
        boolean boolean45 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str48 = mongoDBRiverDefinition39.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(eSLogger43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.excludeFields(strSet8);
        java.lang.String str10 = builder9.mongoLocalPassword;
        java.lang.String str11 = builder9.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.riverIndexName("collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index" + "'", str11, "index");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList44 = mongoDBRiverDefinition39.mongoServers;
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str46 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.Boolean boolean48 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(serverAddressList44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "localhost" + "'", str46, "localhost");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean43 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "advanced_transformation" + "'", str40, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "credentials" + "'", str41, "credentials");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        builder0.setmongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.indexName("script.default_lang");
        java.lang.String str6 = builder5.getscript();
        builder5.setmongoCollection("script.disable_dynamic");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setstatisticsIndexName("db");
        builder0.setmongoSSLVerifyCertificate(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.statisticsIndexName("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.getMongoClientOptions();
        org.elasticsearch.common.unit.TimeValue timeValue45 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(timeValue45);
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str42 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str43 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "is_mongos" + "'", str43, "is_mongos");
        org.junit.Assert.assertNotNull(timeValue44);
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getExcludeFields();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str47 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.dropCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "user" + "'", str44, "user");
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.mongoAdminUser;
        builder0.mongoLocalPassword = "script.default_lang";
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getExcludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "advanced_transformation" + "'", str47, "advanced_transformation");
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject9 = builder6.getmongoCollectionFilter();
        builder6.setdisableIndexRefresh(true);
        builder6.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.isMongos((java.lang.Boolean) true);
        java.lang.String str20 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.mongoSSLVerifyCertificate(false);
        java.lang.String str23 = builder22.getmongoCollection();
        java.lang.String[] strArray38 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder22.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder6.mongoSSLVerifyCertificate(true);
        builder44.mongoLocalPassword = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str42 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "is_mongos" + "'", str42, "is_mongos");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl" + "'", str11, "ssl");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str46 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getDB_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "throttle_size" + "'", str46, "throttle_size");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "options" + "'", str47, "options");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "db" + "'", str48, "db");
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str47 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "options" + "'", str47, "options");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "throttle_size" + "'", str48, "throttle_size");
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        builder0.setsocketTimeout((int) (byte) 1);
        java.lang.String str11 = builder0.scriptType;
        boolean boolean12 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.storeStatistics(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverIndexName();
        boolean boolean46 = mongoDBRiverDefinition39.isImportAllCollections();
        boolean boolean47 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean48 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "actions" + "'", str44, "actions");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder0.statisticsTypeName("local");
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.mongoClientOptions(mongoClientOptions58);
        boolean boolean60 = builder59.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.excludeFields(strSet8);
        java.lang.String str10 = builder9.mongoLocalPassword;
        java.lang.String str11 = builder9.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.disableIndexRefresh(false);
        java.lang.String str14 = builder13.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index" + "'", str11, "index");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        java.lang.String str9 = builder0.typeName;
        java.util.Set<java.lang.String> strSet10 = builder0.includeFields;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoCollection();
        int int48 = mongoDBRiverDefinition39.getThrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        com.mongodb.BasicDBObject basicDBObject55 = builder54.mongoCollectionFilter;
        builder54.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.throttleSize((int) (short) 0);
        builder54.mongoCollection = "password";
        boolean boolean62 = builder54.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        int int46 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 30000 + "'", int46 == 30000);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_fields" + "'", str47, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder4.setmongoCollectionFilter(basicDBObject6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder4.mongoOplogFilter(basicDBObject14);
        builder3.mongoCollectionFilter = basicDBObject14;
        boolean boolean17 = builder3.advancedTransformation;
        builder3.settypeName("size");
        boolean boolean20 = builder3.getmongoGridFS();
        boolean boolean21 = builder3.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        java.lang.String str15 = builder12.getincludeCollection();
        boolean boolean16 = builder12.mongoSecondaryReadPreference;
        java.lang.String str17 = builder12.getmongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder0.setmongoCollection("initial_timestamp");
        java.lang.String str6 = builder0.getmongoCollection();
        builder0.script = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject10 = builder0.mongoOplogFilter;
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoOplogFilter();
        builder0.riverIndexName = "concurrent_requests";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        boolean boolean57 = builder56.storeStatistics;
        builder56.statisticsIndexName = "";
        java.lang.String str60 = builder56.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        builder56.setmongoClientOptions(mongoClientOptions61);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.bson.types.Binary binary10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.initialTimestamp(binary10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        java.lang.Boolean boolean47 = mongoDBRiverDefinition39.isMongos;
        boolean boolean48 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition39.mongoCollectionFilter;
        boolean boolean50 = mongoDBRiverDefinition39.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject51 = mongoDBRiverDefinition39.getMongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(basicDBObject51);
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        builder0.connectTimeout = (short) 0;
        boolean boolean57 = builder0.getskipInitialImport();
        builder0.dropCollection = false;
        java.lang.String str60 = builder0.mongoLocalPassword;
        com.mongodb.MongoClientOptions mongoClientOptions61 = null;
        builder0.setmongoClientOptions(mongoClientOptions61);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.storeStatistics(false);
        org.bson.types.BSONTimestamp bSONTimestamp14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.initialTimestamp(bSONTimestamp14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setstatisticsIndexName("db");
        boolean boolean8 = builder0.advancedTransformation;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.throttleSize((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsTypeName("flush_interval");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        java.lang.String str6 = builder0.getstatisticsTypeName();
        builder0.setmongoCollection("import_all_collections");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder10.getmongoClientOptions();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mongoClientOptions11);
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoCollectionFilter;
        java.lang.String str12 = builder0.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder15.mongoAdminUser;
        java.lang.String[] strArray45 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder15.parentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.getdropCollection();
        java.lang.String str53 = mongoDBRiverDefinition51.getGRIDFS_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition51.getSSL_VERIFY_CERT_FIELD();
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) str54);
        java.lang.Object obj57 = null;
        docScoreSearchScript0.setNextVar("connect_timeout", obj57);
        docScoreSearchScript0.setNextScore((float) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str63 = builder62.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder62.isMongos((java.lang.Boolean) true);
        java.lang.String str68 = builder62.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder62.mongoSSLVerifyCertificate(false);
        java.lang.String str71 = builder70.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder70.mongoGridFS(true);
        java.lang.String str74 = builder73.getincludeCollection();
        int int75 = builder73.getsocketTimeout();
        int int76 = builder73.connectTimeout;
        docScoreSearchScript0.setNextVar("options", (java.lang.Object) builder73);
        boolean boolean78 = builder73.mongoSSLVerifyCertificate;
        builder73.statisticsIndexName = "collection";
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ssl_verify_certificate" + "'", str54, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "ssl_verify_certificate" + "'", obj55, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str50 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int51 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str52 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ssl" + "'", str50, "ssl");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 60000 + "'", int51 == 60000);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "servers" + "'", str52, "servers");
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        builder3.setincludeCollection("drop_collection");
        java.util.Set<java.lang.String> strSet7 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = builder24.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.disableIndexRefresh(true);
        builder24.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder24.advancedTransformation(true);
        java.lang.String[] strArray69 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder34.parentTypes = strSet70;
        builder18.excludeFields = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder3.mongoLocalUser("connect_timeout");
        builder3.setdropCollection(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("user");
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        int int14 = builder12.getthrottleSize();
        java.util.Set<java.lang.String> strSet15 = builder12.parentTypes;
        builder12.mongoLocalUser = "";
        builder12.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet20 = null;
        builder12.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder22.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.scriptType("index");
        builder28.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject31 = builder28.getmongoCollectionFilter();
        builder12.setmongoCollectionFilter(basicDBObject31);
        builder0.mongoOplogFilter = basicDBObject31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.indexName("credentials");
        java.lang.String str38 = builder37.mongoAdminUser;
        java.lang.String[] strArray67 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        java.lang.String str74 = mongoDBRiverDefinition73.getSIZE_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition73.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str76 = mongoDBRiverDefinition73.getINDEX_OBJECT();
        java.lang.String str77 = mongoDBRiverDefinition73.script;
        java.lang.String str78 = mongoDBRiverDefinition73.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition73.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject79;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.connectTimeout(27017);
        boolean boolean83 = builder82.importAllCollections;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "size" + "'", str74, "size");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "skip_initial_import" + "'", str75, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "index" + "'", str76, "index");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder3.mongoGridFS(false);
        boolean boolean57 = builder56.storeStatistics;
        builder56.statisticsIndexName = "";
        builder56.setdisableIndexRefresh(false);
        int int62 = builder56.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        boolean boolean8 = mongoDBRiverDefinition6.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        int int10 = mongoDBRiverDefinition6.socketTimeout;
        boolean boolean11 = mongoDBRiverDefinition6.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition6.getTYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition6.getCOLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition6.getStatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition6.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "collection" + "'", str13, "collection");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        java.lang.String str11 = builder0.getstatisticsIndexName();
        int int12 = builder0.getsocketTimeout();
        java.lang.String str13 = builder0.getriverIndexName();
        java.lang.String str14 = builder0.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder14.mongoAdminUser;
        java.lang.String[] strArray44 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder14.parentTypes((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        java.lang.String str51 = mongoDBRiverDefinition50.getSIZE_FIELD();
        int int52 = mongoDBRiverDefinition50.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str53 = mongoDBRiverDefinition50.getStatisticsTypeName();
        boolean boolean54 = mongoDBRiverDefinition50.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition50.getIncludeFields();
        java.util.Set<java.lang.String> strSet56 = mongoDBRiverDefinition50.getParentTypes();
        builder7.setexcludeFields(strSet56);
        int int58 = builder7.getthrottleSize();
        builder7.setmongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder7.mongoAdminPassword("skip_initial_import");
        builder7.storeStatistics = true;
        boolean boolean65 = builder7.getdisableIndexRefresh();
        boolean boolean66 = builder7.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "size" + "'", str51, "size");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30000 + "'", int52 == 30000);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.statisticsTypeName("");
        java.lang.String str6 = builder0.mongoCollection;
        builder0.mongoUseSSL = false;
        java.lang.String str9 = builder0.typeName;
        builder0.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setscript("disable_index_refresh");
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder22.mongoAdminUser;
        java.lang.String[] strArray52 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        boolean boolean59 = mongoDBRiverDefinition58.getdropCollection();
        java.util.Set<java.lang.String> strSet60 = mongoDBRiverDefinition58.getParentTypes();
        java.lang.Boolean boolean61 = mongoDBRiverDefinition58.getisMongos();
        java.lang.Boolean boolean62 = mongoDBRiverDefinition58.isMongos();
        int int63 = mongoDBRiverDefinition58.getDEFAULT_BULK_ACTIONS();
        java.lang.String str64 = mongoDBRiverDefinition58.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition58.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.includeFields(strSet65);
        builder8.setmongoGridFS(false);
        builder8.riverName = "concurrent_requests";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(boolean61);
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1000 + "'", int63 == 1000);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder7.getscript();
        boolean boolean12 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int14 = builder13.getsocketTimeout();
        boolean boolean15 = builder13.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        builder13.setmongoOplogFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.mongoCollectionFilter(basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoOplogFilter(basicDBObject20);
        java.lang.String str24 = builder23.mongoAdminPassword;
        java.lang.Boolean boolean25 = builder23.getisMongos();
        builder23.setscript("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.getTYPE_FIELD();
        int int46 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsIndexName;
        java.lang.String str48 = mongoDBRiverDefinition39.mongoLocalUser;
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition39.parentTypes;
        java.lang.String str50 = mongoDBRiverDefinition39.indexName;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean52 = mongoDBRiverDefinition39.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "type" + "'", str45, "type");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript6.setNextScore(0.0f);
        java.lang.Object obj10 = docScoreSearchScript6.unwrap((java.lang.Object) 1);
        docScoreSearchScript0.setNextVar("script_type", obj10);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript12 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript12.setNextScore(0.0f);
        java.lang.Object obj16 = docScoreSearchScript12.unwrap((java.lang.Object) "");
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj19 = null;
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", obj19);
        docScoreSearchScript0.setNextScore((float) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        boolean boolean28 = builder26.getimportAllCollections();
        java.util.Set<java.lang.String> strSet29 = builder26.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.lang.String str70 = mongoDBRiverDefinition69.getSIZE_FIELD();
        boolean boolean71 = mongoDBRiverDefinition69.disableIndexRefresh;
        java.lang.String str72 = mongoDBRiverDefinition69.getACTIONS_FIELD();
        java.lang.String str73 = mongoDBRiverDefinition69.getMongoOplogNamespace();
        java.lang.Boolean boolean74 = mongoDBRiverDefinition69.isMongos();
        boolean boolean75 = mongoDBRiverDefinition69.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet76 = mongoDBRiverDefinition69.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder26.parentTypes(strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder26.mongoGridFS(false);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder26.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder26.disableIndexRefresh(true);
        java.lang.Object obj83 = docScoreSearchScript0.unwrap((java.lang.Object) builder82);
        int int84 = builder82.socketTimeout;
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "" + "'", obj16, "");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "" + "'", obj17, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "size" + "'", str70, "size");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "actions" + "'", str72, "actions");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "null.null" + "'", str73, "null.null");
        org.junit.Assert.assertNull(boolean74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(mongoClientOptions80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.mongoAdminPassword = "drop_collection";
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        builder0.dropCollection = false;
        boolean boolean9 = builder0.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminUser;
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.getExcludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str50 = mongoDBRiverDefinition39.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "bulk" + "'", str50, "bulk");
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        builder0.setmongoDb("secondary_read_preference");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoLocalUser("bulk");
        builder9.setmongoDb("socket_timeout");
        boolean boolean12 = builder9.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getPORT_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        boolean boolean48 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str49 = mongoDBRiverDefinition39.getTypeName();
        int int50 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "port" + "'", str46, "port");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.riverIndexName = "bulk";
        builder12.setscriptType("");
        com.mongodb.BasicDBObject basicDBObject17 = builder12.getmongoOplogFilter();
        java.util.Set<java.lang.String> strSet18 = builder12.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions49 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str50 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "throttle_size" + "'", str48, "throttle_size");
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "drop_collection" + "'", str50, "drop_collection");
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.isMongos((java.lang.Boolean) false);
        builder16.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.scriptType("index");
        builder25.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        java.lang.String[] strArray61 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder31.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        boolean boolean68 = mongoDBRiverDefinition67.getdropCollection();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition67.getParentTypes();
        builder25.parentTypes = strSet69;
        builder16.setparentTypes(strSet69);
        java.lang.String str72 = builder16.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder16.indexName("bulk_size");
        builder16.statisticsTypeName = "connect_timeout";
        java.util.Set<java.lang.String> strSet77 = builder16.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(strSet77);
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        builder0.setmongoLocalUser("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoLocalPassword("connect_timeout");
        boolean boolean14 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoGridFS(false);
        boolean boolean17 = builder16.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        boolean boolean52 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions53 = mongoDBRiverDefinition39.mongoClientOptions;
        boolean boolean54 = mongoDBRiverDefinition39.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        java.lang.String str12 = builder0.indexName;
        builder0.mongoGridFS = false;
        boolean boolean15 = builder0.getadvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "size" + "'", str44, "size");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoAdminPassword();
        boolean boolean46 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str47 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script_type" + "'", str47, "script_type");
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoLocalUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject16 = builder7.getmongoCollectionFilter();
        builder7.setscriptType("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder7.statisticsIndexName(".scripts");
        builder20.mongoSecondaryReadPreference = false;
        com.mongodb.BasicDBObject basicDBObject23 = builder20.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(basicDBObject23);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp41 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str42 = mongoDBRiverDefinition39.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertNull(wildcardTimestamp41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.throttleSize((int) (short) 100);
        builder57.setstoreStatistics(true);
        builder57.statisticsIndexName = "user";
        com.mongodb.BasicDBObject basicDBObject62 = builder57.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(basicDBObject62);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoLocalUser("bulk");
        builder9.setmongoDb("socket_timeout");
        java.lang.String str12 = builder9.getmongoAdminUser();
        java.lang.String str13 = builder9.getincludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.getinitialTimestamp();
        java.lang.String str13 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.indexName("credentials");
        java.lang.String str18 = builder17.mongoAdminUser;
        java.lang.String[] strArray47 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        java.lang.String str54 = mongoDBRiverDefinition53.getSIZE_FIELD();
        boolean boolean55 = mongoDBRiverDefinition53.disableIndexRefresh;
        boolean boolean56 = mongoDBRiverDefinition53.isMongoGridFS();
        java.lang.String str57 = mongoDBRiverDefinition53.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue58 = mongoDBRiverDefinition53.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList59 = mongoDBRiverDefinition53.mongoServers;
        java.lang.String str60 = mongoDBRiverDefinition53.getACTIONS_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition53.getMongoDb();
        boolean boolean62 = mongoDBRiverDefinition53.getdisableIndexRefresh();
        java.lang.String str63 = mongoDBRiverDefinition53.getSOCKET_TIMEOUT();
        java.util.Set<java.lang.String> strSet64 = mongoDBRiverDefinition53.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder0.includeFields(strSet64);
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoClientOptions(mongoClientOptions66);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "size" + "'", str54, "size");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(serverAddressList59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "actions" + "'", str60, "actions");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "socket_timeout" + "'", str63, "socket_timeout");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("actions", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoCollectionFilter;
        java.lang.String str12 = builder0.script;
        java.lang.String str13 = builder0.getmongoLocalUser();
        builder0.mongoLocalUser = ".scripts";
        java.util.Set<java.lang.String> strSet16 = builder0.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str42 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script_type" + "'", str42, "script_type");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.scriptType("bulk_timeout");
        builder31.indexName = "options";
        java.util.Set<java.lang.String> strSet38 = builder31.getparentTypes();
        java.util.Set<java.lang.String> strSet39 = builder31.excludeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNull(strSet39);
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str44 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.parentTypes;
        boolean boolean47 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "name" + "'", str44, "name");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "include_collection" + "'", str45, "include_collection");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        builder11.scriptType = "hi!";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder11.importAllCollections(false);
        boolean boolean35 = builder11.mongoGridFS;
        int int36 = builder11.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        int int44 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str45 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str47 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "include_fields" + "'", str45, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index" + "'", str47, "index");
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        boolean boolean46 = mongoDBRiverDefinition39.getskipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str48 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int49 = mongoDBRiverDefinition39.getSocketTimeout();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.getIncludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "import_all_collections" + "'", str48, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(strSet50);
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        int int44 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str45 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "localhost" + "'", str45, "localhost");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        java.lang.String str8 = builder5.getmongoAdminPassword();
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder5.mongoCollectionFilter = basicDBObject9;
        java.lang.String str11 = builder5.getmongoAdminPassword();
        boolean boolean12 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.mongoDb("connect_timeout");
        java.lang.String str15 = builder5.mongoCollection;
        builder5.connectTimeout = 100;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        builder8.setmongoUseSSL(false);
        builder8.setstatisticsTypeName("bulk_timeout");
        java.lang.String str13 = builder8.includeCollection;
        builder8.setscript("initial_timestamp");
        com.mongodb.BasicDBObject basicDBObject16 = builder8.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoLocalPassword("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout(8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = builder33.getmongoServers();
        builder33.setskipInitialImport(false);
        java.lang.String str37 = builder33.script;
        builder33.dropCollection = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoGridFS(false);
        builder11.setskipInitialImport(true);
        builder11.isMongos = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(false);
        java.lang.String str13 = builder12.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet14 = builder12.getparentTypes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean44 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean45 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(basicDBObject47);
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.setmongoDb("concurrent_bulk_requests");
        java.lang.String str9 = builder0.getstatisticsIndexName();
        java.lang.String str10 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getMongoCollection();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition11.getExcludeFields();
        java.lang.String str14 = mongoDBRiverDefinition11.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "credentials" + "'", str14, "credentials");
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        boolean boolean9 = builder0.dropCollection;
        builder0.setstatisticsTypeName("admin");
        builder0.setstatisticsIndexName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.riverName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.scriptType("is_mongos");
        int int18 = builder17.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str45 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "parent_types" + "'", str43, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "servers" + "'", str45, "servers");
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str44 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str45 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "flush_interval" + "'", str45, "flush_interval");
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isDropCollection();
        boolean boolean45 = mongoDBRiverDefinition39.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = mongoDBRiverDefinition39.initialTimestamp;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str50 = mongoDBRiverDefinition39.getStatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        java.lang.String str8 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("db");
        boolean boolean11 = builder0.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.scriptType("db");
        builder15.setmongoLocalUser("index");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        boolean boolean10 = builder3.getmongoSSLVerifyCertificate();
        int int11 = builder3.throttleSize;
        builder3.setmongoSecondaryReadPreference(true);
        boolean boolean14 = builder3.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_requests" + "'", str47, "concurrent_requests");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.lang.String str9 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        boolean boolean15 = builder10.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int17 = builder16.getsocketTimeout();
        boolean boolean18 = builder16.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        builder16.setmongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder10.mongoCollectionFilter(basicDBObject23);
        boolean boolean26 = builder10.getmongoSecondaryReadPreference();
        builder10.dropCollection = true;
        java.lang.String str29 = builder10.riverIndexName;
        java.util.Set<java.lang.String> strSet30 = builder10.getexcludeFields();
        builder10.mongoCollection = "drop_collection";
        java.util.Set<java.lang.String> strSet33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder10.includeFields(strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.indexName("credentials");
        java.lang.String str39 = builder38.mongoAdminUser;
        java.lang.String[] strArray68 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder71.mongoLocalPassword("initial_timestamp");
        com.mongodb.BasicDBObject basicDBObject74 = builder73.mongoCollectionFilter;
        builder34.setmongoCollectionFilter(basicDBObject74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder0.mongoOplogFilter(basicDBObject74);
        java.lang.String str77 = builder0.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(basicDBObject74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        java.util.Set<java.lang.String> strSet9 = builder0.getincludeFields();
        builder0.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        builder0.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoLocalUser("localhost");
        int int12 = builder0.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions43 = mongoDBRiverDefinition39.getMongoClientOptions();
        int int44 = mongoDBRiverDefinition39.connectTimeout;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.typeName;
        java.lang.String str47 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(mongoClientOptions43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "local" + "'", str47, "local");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder4.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder4.build();
        int int7 = mongoDBRiverDefinition6.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition6.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition6.indexName;
        java.lang.String str10 = mongoDBRiverDefinition6.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        boolean boolean48 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean43 = mongoDBRiverDefinition39.mongoUseSSL;
        org.elasticsearch.common.logging.ESLogger eSLogger44 = mongoDBRiverDefinition39.getlogger();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 30000 + "'", int45 == 30000);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder11.mongoOplogFilter(basicDBObject25);
        builder0.setmongoOplogFilter(basicDBObject25);
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.scriptType("script_type");
        builder33.setstoreStatistics(true);
        java.util.Set<java.lang.String> strSet36 = builder33.getincludeFields();
        builder33.mongoDb = "db";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(strSet36);
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.setmongoAdminUser("script");
        boolean boolean9 = builder0.advancedTransformation;
        java.lang.String str10 = builder0.riverName;
        builder0.setstatisticsTypeName("host");
        builder0.setisMongos((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        int int53 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "script" + "'", str50, "script");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "script" + "'", str51, "script");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "include_fields" + "'", str52, "include_fields");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 30000 + "'", int53 == 30000);
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(basicDBObject45);
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder0.getmongoLocalUser();
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.excludeFields(strSet8);
        builder9.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("script_type.null", "db");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?db?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        java.lang.String str11 = builder7.getindexName();
        builder7.storeStatistics = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.mongoUseSSL;
        java.lang.String str9 = builder7.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.skipInitialImport(false);
        builder11.skipInitialImport = true;
        builder11.mongoLocalUser = "password";
        builder11.isMongos = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.getriverIndexName();
        boolean boolean7 = builder0.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        java.lang.String str15 = mongoDBRiverDefinition14.riverIndexName;
        boolean boolean16 = mongoDBRiverDefinition14.isDropCollection();
        boolean boolean17 = mongoDBRiverDefinition14.importAllCollections;
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition14.getMongoOplogFilter();
        java.lang.String str19 = mongoDBRiverDefinition14.getINITIAL_TIMESTAMP_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue20 = mongoDBRiverDefinition14.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "initial_timestamp" + "'", str19, "initial_timestamp");
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        java.lang.String str6 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("exclude_fields");
        builder10.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.importAllCollections(true);
        int int15 = builder14.socketTimeout;
        boolean boolean16 = builder14.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript3 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript3.setNextScore(0.0f);
        java.lang.Object obj7 = docScoreSearchScript3.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField9 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript3.setNextVar("index", (java.lang.Object) parseField9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        boolean boolean14 = builder12.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder18.mongoAdminUser;
        java.lang.String[] strArray48 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet49);
        builder12.excludeFields = strSet49;
        java.lang.String str53 = builder12.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        docScoreSearchScript3.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition54);
        java.lang.String str56 = mongoDBRiverDefinition54.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean57 = mongoDBRiverDefinition54.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition54.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.script.ScriptService scriptService60 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("ssl_verify_certificate", "store_statistics", riverSettings59, scriptService60);
        java.lang.String str62 = mongoDBRiverDefinition61.getCREDENTIALS_FIELD();
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 1 + "'", obj7, 1);
        org.junit.Assert.assertNotNull(parseField9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "advanced_transformation" + "'", str56, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "credentials" + "'", str62, "credentials");
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        java.lang.String str6 = builder3.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.isMongos((java.lang.Boolean) true);
        boolean boolean9 = builder3.importAllCollections;
        builder3.mongoUseSSL = true;
        java.lang.String str12 = builder3.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.getSIZE_FIELD();
        boolean boolean54 = mongoDBRiverDefinition52.disableIndexRefresh;
        java.lang.String str55 = mongoDBRiverDefinition52.getACTIONS_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition52.statisticsTypeName;
        boolean boolean57 = mongoDBRiverDefinition52.isDropCollection();
        boolean boolean58 = mongoDBRiverDefinition52.isImportAllCollections();
        java.lang.String str59 = mongoDBRiverDefinition52.scriptType;
        java.lang.String str60 = mongoDBRiverDefinition52.getCOLLECTION_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition52.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean62 = mongoDBRiverDefinition52.isMongoGridFS();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition52.includeFields;
        com.mongodb.BasicDBObject basicDBObject64 = mongoDBRiverDefinition52.mongoCollectionFilter;
        builder3.mongoOplogFilter = basicDBObject64;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "actions" + "'", str55, "actions");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "collection" + "'", str60, "collection");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "initial_timestamp" + "'", str61, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNotNull(basicDBObject64);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.indexName("name");
        boolean boolean13 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        int int44 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        boolean boolean48 = mongoDBRiverDefinition39.getmongoGridFS();
        java.lang.String str49 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 60000 + "'", int44 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "store_statistics" + "'", str49, "store_statistics");
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        builder11.mongoLocalUser = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.riverIndexName("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("collection");
        java.lang.String str15 = builder14.getindexName();
        builder14.mongoDb = "import_all_collections";
        java.lang.String str18 = builder14.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "import_all_collections" + "'", str18, "import_all_collections");
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        boolean boolean45 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.getParentTypes();
        int int47 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str49 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        java.lang.Boolean boolean50 = mongoDBRiverDefinition39.getisMongos();
        int int51 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        java.lang.String str52 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        boolean boolean53 = mongoDBRiverDefinition39.importAllCollections;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "admin" + "'", str49, "admin");
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 60000 + "'", int51 == 60000);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "store_statistics" + "'", str52, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str43 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.riverName;
        java.lang.String str45 = mongoDBRiverDefinition39.statisticsIndexName;
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ssl" + "'", str43, "ssl");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        java.util.Set<java.lang.String> strSet3 = builder1.getincludeFields();
        java.lang.String str4 = builder1.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.indexName("credentials");
        java.lang.String str9 = builder5.getscript();
        java.lang.String str10 = builder5.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.skipInitialImport(true);
        boolean boolean13 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("credentials");
        java.lang.String str22 = builder21.mongoAdminUser;
        java.lang.String[] strArray51 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet52);
        builder17.includeFields = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder1.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str57 = builder1.getmongoLocalUser();
        builder1.statisticsIndexName = "size";
        builder1.mongoLocalPassword = "script.default_lang";
        builder1.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder1.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.statisticsIndexName;
        int int68 = builder66.getthrottleSize();
        java.util.Set<java.lang.String> strSet69 = builder66.parentTypes;
        builder66.mongoLocalUser = "";
        builder66.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder66.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.mongoUseSSL(true);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory78 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str80 = builder79.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder79.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder79.isMongos((java.lang.Boolean) true);
        java.lang.String str85 = builder79.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder79.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject88 = builder79.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript89 = docScoreNativeScriptFactory78.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        builder77.setmongoOplogFilter(basicDBObject88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder1.mongoOplogFilter(basicDBObject88);
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.common.settings.Settings settings93 = riverSettings92.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap94 = riverSettings92.settings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(executableScript89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(settings93);
        org.junit.Assert.assertNotNull(strMap94);
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        builder8.setconnectTimeout(8);
        builder8.setdropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder8.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet18 = builder8.includeFields;
        builder8.setconnectTimeout((int) ' ');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.includeCollection;
        builder0.mongoDb = "advanced_transformation";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str54 = mongoDBRiverDefinition39.getScript();
        boolean boolean55 = mongoDBRiverDefinition39.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "skip_initial_import" + "'", str46, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "actions" + "'", str47, "actions");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "credentials" + "'", str48, "credentials");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "store_statistics" + "'", str49, "store_statistics");
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.typeName;
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = builder13.build();
        int int15 = mongoDBRiverDefinition14.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition14.advancedTransformation;
        java.lang.String str17 = mongoDBRiverDefinition14.getTYPE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition14.getmongoSSLVerifyCertificate();
        java.lang.String str19 = mongoDBRiverDefinition14.getIS_MONGOS_FIELD();
        int int20 = mongoDBRiverDefinition14.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "type" + "'", str17, "type");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "is_mongos" + "'", str19, "is_mongos");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean52 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str53 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "flush_interval" + "'", str53, "flush_interval");
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        java.lang.String str3 = builder0.getstatisticsTypeName();
        java.lang.String str4 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoLocalPassword("sandbox");
        boolean boolean7 = builder0.advancedTransformation;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions50 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str52 = mongoDBRiverDefinition39.script;
        java.lang.String str53 = mongoDBRiverDefinition39.getMongoLocalUser();
        boolean boolean54 = mongoDBRiverDefinition39.dropCollection;
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition39.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl_verify_certificate" + "'", str47, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_fields" + "'", str48, "include_fields");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        boolean boolean52 = mongoDBRiverDefinition49.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject53;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.socketTimeout(1);
        java.lang.String str57 = builder0.indexName;
        boolean boolean58 = builder0.skipInitialImport;
        java.lang.String str59 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int61 = builder60.getsocketTimeout();
        builder60.setskipInitialImport(false);
        builder60.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions66 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder60.mongoClientOptions(mongoClientOptions66);
        builder60.setmongoCollection("index");
        builder60.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str72 = builder60.mongoAdminUser;
        java.lang.String str73 = builder60.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder60.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str77 = builder76.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder76.isMongos((java.lang.Boolean) true);
        java.lang.String str82 = builder76.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder76.mongoSSLVerifyCertificate(false);
        builder84.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder84.skipInitialImport(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList89 = builder84.mongoServers;
        builder75.mongoServers = serverAddressList89;
        builder0.mongoServers = serverAddressList89;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "initial_timestamp" + "'", str72, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(serverAddressList89);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        builder0.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(true);
        builder13.setconnectTimeout((int) 'a');
        builder13.riverName = "port";
        boolean boolean18 = builder13.importAllCollections;
        builder13.setmongoGridFS(false);
        java.lang.String str21 = builder13.statisticsIndexName;
        java.lang.String str22 = builder13.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition39.getMongoClientOptions();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoLocalUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        boolean boolean48 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str49 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "secondary_read_preference" + "'", str49, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean44 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(boolean45);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        java.lang.String str41 = builder0.getmongoCollection();
        builder0.setisMongos((java.lang.Boolean) false);
        boolean boolean44 = builder0.getdisableIndexRefresh();
        builder0.setskipInitialImport(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.scriptType;
        int int44 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.Boolean boolean46 = mongoDBRiverDefinition39.getisMongos();
        java.lang.String str47 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        boolean boolean49 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 30000 + "'", int44 == 30000);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "concurrent_bulk_requests" + "'", str47, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str45 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean48 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str49 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.mongoUseSSL;
        int int51 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "include_fields" + "'", str49, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        java.lang.String str7 = builder6.mongoAdminUser;
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet37);
        builder0.excludeFields = strSet37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.indexName("advanced_transformation");
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.connectTimeout((int) (short) 100);
        builder46.setindexName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.isMongos((java.lang.Boolean) true);
        builder46.setincludeCollection("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.skipInitialImport;
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(basicDBObject45);
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        boolean boolean8 = mongoDBRiverDefinition6.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        int int10 = mongoDBRiverDefinition6.socketTimeout;
        boolean boolean11 = mongoDBRiverDefinition6.dropCollection;
        boolean boolean12 = mongoDBRiverDefinition6.mongoSecondaryReadPreference;
        java.lang.String str13 = mongoDBRiverDefinition6.getDB_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition6.riverName;
        java.lang.String str15 = mongoDBRiverDefinition6.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "db" + "'", str13, "db");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "flush_interval" + "'", str15, "flush_interval");
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean48 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean49 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str50 = mongoDBRiverDefinition39.getStatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoAdminPassword();
        java.lang.String str47 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "exclude_fields" + "'", str47, "exclude_fields");
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.mongoLocalPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int18 = builder17.getsocketTimeout();
        boolean boolean19 = builder17.mongoUseSSL;
        builder17.statisticsIndexName = "collection";
        java.lang.String str22 = builder17.mongoAdminUser;
        java.lang.String str23 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        java.util.Set<java.lang.String> strSet26 = builder24.getincludeFields();
        java.lang.String str27 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder28.getscript();
        java.lang.String str33 = builder28.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.skipInitialImport(true);
        boolean boolean36 = builder35.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder44.mongoAdminUser;
        java.lang.String[] strArray74 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet75);
        builder40.includeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder24.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder17.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder81.throttleSize = (short) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder81.riverIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.throttleSize((int) (short) 1);
        builder87.setscript("is_mongos");
        builder87.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoLocalUser("port");
        java.lang.String str11 = builder3.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        boolean boolean44 = mongoDBRiverDefinition39.isImportAllCollections();
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = mongoDBRiverDefinition39.mongoServers;
        boolean boolean46 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str48 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index" + "'", str48, "index");
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.scriptType("name");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverName();
        int int48 = mongoDBRiverDefinition39.getThrottleSize();
        java.lang.String str49 = mongoDBRiverDefinition39.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "credentials" + "'", str49, "credentials");
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        builder3.mongoAdminUser = "store_statistics";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        java.lang.String str8 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("db");
        boolean boolean11 = builder10.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder10.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.getSIZE_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition52.getTHROTTLE_SIZE_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition52.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean56 = mongoDBRiverDefinition52.getmongoGridFS();
        java.util.Set<java.lang.String> strSet57 = mongoDBRiverDefinition52.getParentTypes();
        builder10.setparentTypes(strSet57);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "throttle_size" + "'", str54, "throttle_size");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "concurrent_bulk_requests" + "'", str55, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.getmongoUseSSL();
        int int6 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("localhost");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder8.mongoClientOptions = mongoClientOptions9;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder1.isMongos((java.lang.Boolean) true);
        java.lang.String str7 = builder1.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.mongoSSLVerifyCertificate(false);
        builder9.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.throttleSize(10);
        builder9.setmongoAdminUser("local");
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder9.setmongoClientOptions(mongoClientOptions16);
        java.lang.String str18 = builder9.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder9.riverIndexName("credentials");
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        java.lang.String str26 = builder25.mongoAdminUser;
        java.lang.String[] strArray55 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        java.util.Set<java.lang.String> strSet62 = builder60.getincludeFields();
        com.mongodb.BasicDBObject basicDBObject63 = builder60.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings64 = new org.elasticsearch.river.RiverSettings(settings21, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder20.mongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.RiverSettings riverSettings66 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject63);
        java.util.Map<java.lang.String, java.lang.Object> strMap67 = riverSettings66.settings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strMap67);
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str46 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "store_statistics" + "'", str43, "store_statistics");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "type" + "'", str44, "type");
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondary_read_preference" + "'", str47, "secondary_read_preference");
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        java.lang.String str7 = mongoDBRiverDefinition6.getSCRIPT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition6.getRiverIndexName();
        java.lang.String str9 = mongoDBRiverDefinition6.getOPTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition6.getMongoAdminUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition6.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "options" + "'", str9, "options");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.getincludeCollection();
        int int13 = builder11.getsocketTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder11.setmongoClientOptions(mongoClientOptions14);
        builder11.setdisableIndexRefresh(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        boolean boolean49 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str50 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str53 = mongoDBRiverDefinition39.getSIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "script_type" + "'", str50, "script_type");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "advanced_transformation" + "'", str51, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        java.lang.String str15 = builder12.mongoAdminPassword;
        builder12.connectTimeout = (byte) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder18.setmongoOplogFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoAdminUser("servers");
        java.lang.Boolean boolean23 = builder18.isMongos;
        builder18.setmongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        java.lang.String str30 = builder29.mongoAdminUser;
        java.lang.String[] strArray59 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        boolean boolean66 = mongoDBRiverDefinition65.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject67 = mongoDBRiverDefinition65.mongoOplogFilter;
        boolean boolean68 = mongoDBRiverDefinition65.getdropCollection();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition65.getExcludeFields();
        java.lang.String str70 = mongoDBRiverDefinition65.getMongoDb();
        java.util.Set<java.lang.String> strSet71 = mongoDBRiverDefinition65.getParentTypes();
        builder18.setincludeFields(strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder12.includeFields(strSet71);
        java.lang.String str74 = builder73.getmongoAdminPassword();
        builder73.setriverIndexName("include_fields");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(basicDBObject67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean52 = mongoDBRiverDefinition39.importAllCollections;
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str54 = mongoDBRiverDefinition39.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "credentials" + "'", str54, "credentials");
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        builder8.setskipInitialImport(true);
        builder8.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        int int23 = builder21.getthrottleSize();
        java.util.Set<java.lang.String> strSet24 = builder21.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        java.lang.String str29 = builder25.getscript();
        java.lang.String str30 = builder25.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder25.skipInitialImport(true);
        boolean boolean33 = builder32.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.indexName("credentials");
        java.lang.String str42 = builder41.mongoAdminUser;
        java.lang.String[] strArray71 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder41.parentTypes((java.util.Set<java.lang.String>) strSet72);
        builder37.includeFields = strSet72;
        builder21.setincludeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet72);
        java.lang.String str78 = builder8.mongoLocalPassword;
        java.lang.String str79 = builder8.getmongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject80 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder8.mongoSecondaryReadPreference(true);
        builder8.statisticsIndexName = "exclude_fields";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "local" + "'", str79, "local");
        org.junit.Assert.assertNull(basicDBObject80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        java.lang.String str57 = builder56.mongoLocalPassword;
        boolean boolean58 = builder56.getstoreStatistics();
        boolean boolean59 = builder56.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder56.mongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str46 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "initial_timestamp" + "'", str43, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl" + "'", str44, "ssl");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "concurrent_requests" + "'", str46, "concurrent_requests");
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        docScoreSearchScript0.setNextScore((float) 27017);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str48 = mongoDBRiverDefinition39.getScript();
        java.lang.String str49 = mongoDBRiverDefinition39.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk" + "'", str44, "bulk");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "exclude_fields" + "'", str49, "exclude_fields");
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str43 = mongoDBRiverDefinition39.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue44 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.indexName;
        java.lang.String str47 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos;
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition39.mongoServers;
        java.lang.String str51 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition39.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "credentials" + "'", str46, "credentials");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ssl" + "'", str47, "ssl");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 30000 + "'", int48 == 30000);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "host" + "'", str51, "host");
        org.junit.Assert.assertNotNull(strSet52);
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.mongoGridFS = true;
        java.lang.String str8 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.scriptType("script.disable_dynamic");
        java.lang.String str11 = builder10.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.storeStatistics(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder7.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.isMongos((java.lang.Boolean) true);
        java.lang.String str19 = builder13.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoSSLVerifyCertificate(false);
        java.lang.String str22 = builder13.riverName;
        java.lang.String str23 = builder13.scriptType;
        builder13.statisticsTypeName = "secondary_read_preference";
        builder13.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject30 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.mongoOplogFilter(basicDBObject30);
        boolean boolean32 = builder7.getstoreStatistics();
        java.lang.String str33 = builder7.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject9 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = false;
        int int14 = builder0.throttleSize;
        int int15 = builder0.getsocketTimeout();
        builder0.includeCollection = "script.disable_dynamic";
        builder0.setmongoSecondaryReadPreference(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder0.mongoClientOptions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(mongoClientOptions20);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        int int43 = mongoDBRiverDefinition39.getConnectTimeout();
        boolean boolean44 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str45 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean48 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean49 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        boolean boolean50 = mongoDBRiverDefinition39.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index" + "'", str45, "index");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "null.null" + "'", str47, "null.null");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setstoreStatistics(true);
        builder5.riverIndexName = "include_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoUseSSL(false);
        boolean boolean14 = builder13.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        java.lang.String str44 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int45 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str47 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getMongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script" + "'", str44, "script");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 60000 + "'", int45 == 60000);
        org.junit.Assert.assertNull(basicDBObject46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "advanced_transformation" + "'", str47, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.Boolean boolean45 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str46 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.getadvancedTransformation();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger49 = mongoDBRiverDefinition39.getlogger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "servers" + "'", str46, "servers");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNotNull(eSLogger49);
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        builder0.setscriptType("user");
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setstatisticsIndexName("db");
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsTypeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.throttleSize(8);
        builder0.setmongoSecondaryReadPreference(true);
        builder0.statisticsTypeName = "bulk_size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.mongoAdminPassword = "script.disable_dynamic";
        java.util.Set<java.lang.String> strSet8 = null;
        builder0.parentTypes = strSet8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder10.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.scriptType("index");
        builder16.statisticsTypeName = ".scripts";
        com.mongodb.BasicDBObject basicDBObject19 = builder16.getmongoCollectionFilter();
        builder0.setmongoCollectionFilter(basicDBObject19);
        builder0.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp23 = builder0.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(wildcardTimestamp23);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoDb("disable_index_refresh");
        builder8.mongoAdminPassword = "advanced_transformation";
        builder8.setstatisticsIndexName("script.default_lang");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        builder7.setriverName("name");
        builder7.setmongoGridFS(false);
        builder7.storeStatistics = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition39.getMongoServers();
        java.lang.String str43 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean45 = mongoDBRiverDefinition39.storeStatistics;
        boolean boolean46 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str47 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "skip_initial_import" + "'", str43, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "advanced_transformation" + "'", str47, "advanced_transformation");
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder4.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder4.build();
        boolean boolean7 = mongoDBRiverDefinition6.getmongoUseSSL();
        java.lang.String str8 = mongoDBRiverDefinition6.statisticsTypeName;
        boolean boolean9 = mongoDBRiverDefinition6.getdropCollection();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoClientOptions(mongoClientOptions9);
        java.lang.String str11 = builder7.statisticsTypeName;
        boolean boolean12 = builder7.getmongoUseSSL();
        java.util.Set<java.lang.String> strSet13 = null;
        builder7.setincludeFields(strSet13);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setstoreStatistics(true);
        builder5.skipInitialImport = true;
        java.lang.String str12 = builder5.includeCollection;
        builder5.setadvancedTransformation(true);
        boolean boolean15 = builder5.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder9.mongoClientOptions = mongoClientOptions12;
        builder9.setincludeCollection("script_type.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.mongoGridFS(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.scriptType;
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoCollection("filter");
        java.lang.String str17 = builder0.getstatisticsIndexName();
        boolean boolean18 = builder0.dropCollection;
        int int19 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        builder23.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.typeName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.setmongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoAdminUser("gridfs");
        builder28.scriptType = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.indexName("credentials");
        java.lang.String str40 = builder39.mongoAdminUser;
        java.lang.String[] strArray69 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder39.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder74);
        boolean boolean76 = mongoDBRiverDefinition75.getdropCollection();
        java.util.Set<java.lang.String> strSet77 = mongoDBRiverDefinition75.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder28.parentTypes(strSet77);
        builder27.parentTypes = strSet77;
        builder0.setincludeFields(strSet77);
        java.util.Set<java.lang.String> strSet81 = builder0.parentTypes;
        builder0.setmongoCollection("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(strSet81);
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setmongoAdminUser("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoLocalUser("ssl");
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript18 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript18.setNextScore(0.0f);
        java.lang.Object obj22 = docScoreSearchScript18.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField24 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript18.setNextVar("index", (java.lang.Object) parseField24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int28 = builder27.getsocketTimeout();
        boolean boolean29 = builder27.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.indexName("credentials");
        java.lang.String str34 = builder33.mongoAdminUser;
        java.lang.String[] strArray63 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder33.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder27.excludeFields = strSet64;
        java.lang.String str68 = builder27.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        docScoreSearchScript18.setNextVar("flush_interval", (java.lang.Object) mongoDBRiverDefinition69);
        java.lang.String str71 = mongoDBRiverDefinition69.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean72 = mongoDBRiverDefinition69.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject73 = mongoDBRiverDefinition69.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings74 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder16.mongoCollectionFilter(basicDBObject73);
        java.lang.String str76 = builder75.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 1 + "'", obj22, 1);
        org.junit.Assert.assertNotNull(parseField24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "advanced_transformation" + "'", str71, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.lang.String str50 = mongoDBRiverDefinition39.getStatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "servers" + "'", str48, "servers");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        org.elasticsearch.common.logging.ESLogger eSLogger44 = mongoDBRiverDefinition39.getlogger();
        boolean boolean45 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str46 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str48 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "import_all_collections" + "'", str46, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "advanced_transformation" + "'", str48, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bulk_timeout" + "'", str49, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("db");
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder9.mongoClientOptions = mongoClientOptions12;
        builder9.setincludeCollection("script_type.null");
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder9.getmongoServers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        int int15 = builder13.getthrottleSize();
        java.util.Set<java.lang.String> strSet16 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int18 = builder17.getsocketTimeout();
        boolean boolean19 = builder17.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject24 = builder23.getmongoCollectionFilter();
        builder17.setmongoOplogFilter(basicDBObject24);
        builder17.throttleSize = 10;
        builder17.setsocketTimeout(10);
        java.lang.String[] strArray70 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        java.lang.String str74 = builder17.getscript();
        com.mongodb.BasicDBObject basicDBObject75 = builder17.getmongoCollectionFilter();
        builder13.mongoOplogFilter = basicDBObject75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder0.mongoCollectionFilter(basicDBObject75);
        java.lang.String str78 = builder77.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.Boolean boolean49 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str50 = mongoDBRiverDefinition39.getIndexName();
        java.lang.String str51 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "credentials" + "'", str50, "credentials");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "include_fields" + "'", str51, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoAdminUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.importAllCollections(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder6.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.riverIndexName;
        java.lang.String str10 = mongoDBRiverDefinition8.mongoLocalUser;
        boolean boolean11 = mongoDBRiverDefinition8.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "password" + "'", str13, "password");
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str48 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getTYPE_FIELD();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str51 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "skip_initial_import" + "'", str48, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "type" + "'", str49, "type");
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "disable_index_refresh" + "'", str51, "disable_index_refresh");
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder11.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.includeCollection;
        boolean boolean35 = mongoDBRiverDefinition33.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition33.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(basicDBObject36);
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        boolean boolean8 = mongoDBRiverDefinition6.getmongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition6.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.riverName;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.getInitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        int int43 = mongoDBRiverDefinition39.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str45 = mongoDBRiverDefinition39.getRiverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 60000 + "'", int43 == 60000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        int int49 = mongoDBRiverDefinition47.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str50 = mongoDBRiverDefinition47.getStatisticsTypeName();
        boolean boolean51 = mongoDBRiverDefinition47.isMongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions52 = mongoDBRiverDefinition47.getMongoClientOptions();
        java.lang.Boolean boolean53 = mongoDBRiverDefinition47.isMongos;
        boolean boolean54 = mongoDBRiverDefinition47.isMongoGridFS();
        java.lang.String str55 = mongoDBRiverDefinition47.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition47.getEXCLUDE_FIELDS_FIELD();
        java.lang.Object obj57 = docScoreSearchScript0.unwrap((java.lang.Object) str56);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext58 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(mongoClientOptions52);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "skip_initial_import" + "'", str55, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "exclude_fields" + "'", str56, "exclude_fields");
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + "exclude_fields" + "'", obj57, "exclude_fields");
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.mongoLocalPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.isMongos((java.lang.Boolean) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int18 = builder17.getsocketTimeout();
        boolean boolean19 = builder17.mongoUseSSL;
        builder17.statisticsIndexName = "collection";
        java.lang.String str22 = builder17.mongoAdminUser;
        java.lang.String str23 = builder17.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        java.util.Set<java.lang.String> strSet26 = builder24.getincludeFields();
        java.lang.String str27 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder28.getscript();
        java.lang.String str33 = builder28.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.skipInitialImport(true);
        boolean boolean36 = builder35.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder44.mongoAdminUser;
        java.lang.String[] strArray74 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder44.parentTypes((java.util.Set<java.lang.String>) strSet75);
        builder40.includeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder24.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder17.includeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder81.throttleSize = (short) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder81.riverIndexName("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.throttleSize((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder87.mongoUseSSL(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        java.lang.String str16 = builder0.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(true);
        builder17.setindexName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.mongoLocalPassword("include_collection");
        org.bson.types.BSONTimestamp bSONTimestamp22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.initialTimestamp(bSONTimestamp22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) "");
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        docScoreSearchScript0.setNextScore((float) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "" + "'", obj4, "");
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.setmongoLocalPassword("concurrent_requests");
        java.util.Set<java.lang.String> strSet5 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder0.initialTimestamp;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("gridfs");
        java.util.Set<java.lang.String> strSet11 = builder10.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.advancedTransformation(false);
        boolean boolean16 = builder10.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition12.getInitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition12.mongoServers;
        boolean boolean16 = mongoDBRiverDefinition12.isSkipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition12.getDB_FIELD();
        int int18 = mongoDBRiverDefinition12.getDEFAULT_SOCKET_TIMEOUT();
        boolean boolean19 = mongoDBRiverDefinition12.isMongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "db" + "'", str17, "db");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 60000 + "'", int18 == 60000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        builder0.setisMongos((java.lang.Boolean) true);
        java.lang.String str14 = builder0.getmongoCollection();
        builder0.mongoDb = "bulk_timeout";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        java.lang.String str51 = mongoDBRiverDefinition39.mongoDb;
        java.lang.Boolean boolean52 = mongoDBRiverDefinition39.isMongos;
        java.lang.String str53 = mongoDBRiverDefinition39.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "socket_timeout" + "'", str53, "socket_timeout");
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        builder0.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("ssl_verify_certificate");
        builder0.settypeName("script");
        builder0.setscriptType("options");
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder0.mongoServers;
        builder0.setmongoDb("script.default_lang");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        java.lang.String str11 = builder0.scriptType;
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder0.setmongoClientOptions(mongoClientOptions12);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script.disable_dynamic" + "'", str11, "script.disable_dynamic");
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.storeStatistics(false);
        builder44.setmongoAdminPassword("bulk");
        java.lang.String str47 = builder44.riverIndexName;
        boolean boolean48 = builder44.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.advancedTransformation(false);
        java.lang.String str5 = builder0.riverName;
        java.lang.String str6 = builder0.getstatisticsTypeName();
        builder0.setmongoCollection("import_all_collections");
        builder0.setmongoLocalUser("include_fields");
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder0.mongoClientOptions = mongoClientOptions11;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder7.mongoAdminUser;
        java.lang.String[] strArray37 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str44 = mongoDBRiverDefinition43.getSIZE_FIELD();
        boolean boolean45 = mongoDBRiverDefinition43.disableIndexRefresh;
        boolean boolean46 = mongoDBRiverDefinition43.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        java.lang.String str48 = mongoDBRiverDefinition43.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition43.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings50 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = riverSettings50.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = riverSettings50.settings();
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings2, strMap52);
        org.elasticsearch.script.ScriptService scriptService54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("script", "type", riverSettings53, scriptService54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = riverSettings53.settings();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "size" + "'", str44, "size");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk_timeout" + "'", str48, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition55);
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.storeStatistics(true);
        boolean boolean15 = builder14.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.riverName("bulk_size");
        boolean boolean20 = builder19.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder10.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoServers(serverAddressList62);
        builder9.setmongoServers(serverAddressList62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder9.storeStatistics(true);
        builder9.setmongoCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder9.mongoGridFS(true);
        builder70.mongoUseSSL = false;
        builder70.mongoAdminPassword = "exclude_fields";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder0.setmongoClientOptions(mongoClientOptions12);
        java.lang.String str14 = builder0.getmongoAdminPassword();
        java.lang.String str15 = builder0.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        java.lang.String[] strArray46 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet47);
        builder12.includeFields = strSet47;
        builder12.setmongoSSLVerifyCertificate(false);
        java.lang.String str53 = builder12.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder12.socketTimeout((int) (byte) 100);
        int int56 = builder55.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoGridFS(true);
        java.lang.String str12 = builder11.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder11.getmongoServers();
        boolean boolean14 = builder11.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoDb("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.riverIndexName("type");
        builder11.setmongoLocalUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder11.socketTimeout((int) (byte) 1);
        builder11.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "throttle_size" + "'", str41, "throttle_size");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "concurrent_bulk_requests" + "'", str42, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "actions" + "'", str45, "actions");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disable_index_refresh" + "'", str47, "disable_index_refresh");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoUseSSL;
        boolean boolean12 = mongoDBRiverDefinition8.isSkipInitialImport();
        boolean boolean13 = mongoDBRiverDefinition8.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        builder0.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        builder0.mongoLocalUser = "drop_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.setmongoCollectionFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoAdminUser("gridfs");
        boolean boolean18 = builder12.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int22 = builder21.getsocketTimeout();
        boolean boolean23 = builder21.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        java.lang.String str28 = builder27.mongoAdminUser;
        java.lang.String[] strArray57 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder27.parentTypes((java.util.Set<java.lang.String>) strSet58);
        builder21.excludeFields = strSet58;
        java.lang.String str62 = builder21.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean64 = mongoDBRiverDefinition63.mongoSSLVerifyCertificate;
        boolean boolean65 = mongoDBRiverDefinition63.getmongoSSLVerifyCertificate();
        java.lang.String str66 = mongoDBRiverDefinition63.script;
        java.lang.Boolean boolean67 = mongoDBRiverDefinition63.getisMongos();
        java.lang.String str68 = mongoDBRiverDefinition63.getFLUSH_INTERVAL_FIELD();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition63.excludeFields;
        builder20.setparentTypes(strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder0.excludeFields(strSet69);
        builder0.setthrottleSize((-1));
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(boolean67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "flush_interval" + "'", str68, "flush_interval");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet44 = mongoDBRiverDefinition39.getIncludeFields();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str46 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "local" + "'", str46, "local");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_fields" + "'", str47, "include_fields");
        org.junit.Assert.assertNull(wildcardTimestamp48);
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        boolean boolean9 = builder7.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.importAllCollections(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        java.lang.String str45 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getADMIN_DB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isImportAllCollections();
        boolean boolean48 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script" + "'", str42, "script");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "localhost" + "'", str44, "localhost");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "throttle_size" + "'", str45, "throttle_size");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "admin" + "'", str46, "admin");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoDb();
        java.lang.String str44 = mongoDBRiverDefinition39.getScript();
        java.lang.String str45 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "local" + "'", str41, "local");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl" + "'", str42, "ssl");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "local" + "'", str45, "local");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str43 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions44 = mongoDBRiverDefinition39.mongoClientOptions;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoCollection;
        boolean boolean46 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        int int47 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean48 = mongoDBRiverDefinition39.isMongoSSLVerifyCertificate();
        boolean boolean49 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "password" + "'", str43, "password");
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        java.lang.String str7 = builder6.getstatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("user");
        builder0.settypeName("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        java.lang.String str16 = builder12.getscript();
        boolean boolean17 = builder12.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int19 = builder18.getsocketTimeout();
        boolean boolean20 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject25 = builder24.getmongoCollectionFilter();
        builder18.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoCollectionFilter(basicDBObject25);
        boolean boolean28 = builder12.getmongoSecondaryReadPreference();
        boolean boolean29 = builder12.storeStatistics;
        java.lang.String str30 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder12.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder12.indexName("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.indexName("credentials");
        java.lang.String str41 = builder40.mongoAdminUser;
        java.lang.String[] strArray70 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder40.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder75);
        java.lang.String str77 = mongoDBRiverDefinition76.getSIZE_FIELD();
        boolean boolean78 = mongoDBRiverDefinition76.disableIndexRefresh;
        java.lang.String str79 = mongoDBRiverDefinition76.getACTIONS_FIELD();
        java.lang.String str80 = mongoDBRiverDefinition76.getMongoOplogNamespace();
        java.lang.Boolean boolean81 = mongoDBRiverDefinition76.isMongos();
        boolean boolean82 = mongoDBRiverDefinition76.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet83 = mongoDBRiverDefinition76.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder34.parentTypes(strSet83);
        builder84.setisMongos((java.lang.Boolean) true);
        builder84.mongoLocalUser = "initial_timestamp";
        java.util.Set<java.lang.String> strSet89 = builder84.parentTypes;
        builder0.excludeFields = strSet89;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "size" + "'", str77, "size");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "actions" + "'", str79, "actions");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "null.null" + "'", str80, "null.null");
        org.junit.Assert.assertNull(boolean81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        java.lang.String str16 = builder15.getincludeCollection();
        java.lang.Boolean boolean17 = builder15.getisMongos();
        builder15.mongoAdminPassword = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoLocalPassword("null.null");
        builder15.setstoreStatistics(true);
        boolean boolean24 = builder15.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.mongoAdminPassword = "drop_collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder6.getscript();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoSSLVerifyCertificate(false);
        builder13.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.indexName("local");
        java.lang.String str18 = builder17.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.throttleSize(60000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoLocalPassword("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int24 = builder23.getsocketTimeout();
        boolean boolean25 = builder23.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        builder23.setmongoOplogFilter(basicDBObject30);
        builder23.throttleSize = 10;
        builder23.setsocketTimeout(10);
        java.lang.String[] strArray76 = new java.lang.String[] { "gridfs", "include_fields", "", "collection", "drop_collection", "db", "size", "servers", "script.disable_dynamic", "bulk_size", "local", "index", "is_mongos", "bulk_timeout", "include_collection", "servers", "password", "name", "port", "credentials", "flush_interval", "advanced_transformation", "", "user", "bulk_timeout", "index", "drop_collection", "options", "flush_interval", "script", "sandbox", "options", "actions", "script.default_lang", "disable_index_refresh", "collection", "ssl_verify_certificate", "connect_timeout", "gridfs", "bulk" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet77);
        builder22.parentTypes = strSet77;
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder0.mongoCollection("include_fields");
        com.mongodb.MongoClientOptions mongoClientOptions84 = null;
        builder0.mongoClientOptions = mongoClientOptions84;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp4 = builder3.initialTimestamp;
        builder3.setmongoGridFS(false);
        org.bson.types.Binary binary7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.initialTimestamp(binary7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(wildcardTimestamp4);
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str48 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        boolean boolean50 = mongoDBRiverDefinition39.getskipInitialImport();
        boolean boolean51 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean52 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.String str53 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disable_index_refresh" + "'", str48, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "throttle_size" + "'", str53, "throttle_size");
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoLocalPassword;
        builder0.setsocketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject4 = builder0.mongoCollectionFilter;
        int int5 = builder0.getconnectTimeout();
        java.lang.String str6 = builder0.mongoLocalPassword;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverIndexName("options");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        boolean boolean12 = builder11.getdropCollection();
        java.lang.String str13 = builder11.typeName;
        builder11.skipInitialImport = false;
        boolean boolean16 = builder11.dropCollection;
        java.lang.String str17 = builder11.getmongoAdminUser();
        builder11.setadvancedTransformation(true);
        builder11.setincludeCollection("password.password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoDb("is_mongos");
        java.util.Set<java.lang.String> strSet19 = builder18.getparentTypes();
        builder18.scriptType = "socket_timeout";
        builder18.mongoCollection = "sandbox";
        builder18.setriverIndexName("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoOplogFilter();
        java.lang.String str11 = builder9.gettypeName();
        builder9.typeName = "user";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder14.setmongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("gridfs");
        builder14.setadvancedTransformation(false);
        java.lang.String str22 = builder14.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.typeName("db");
        boolean boolean25 = builder14.getdropCollection();
        builder14.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder28.getscript();
        builder28.setincludeCollection("user");
        boolean boolean35 = builder28.mongoUseSSL;
        java.lang.String str36 = builder28.getmongoAdminPassword();
        builder28.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder28.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.isMongos((java.lang.Boolean) true);
        java.lang.String str47 = builder41.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.mongoSSLVerifyCertificate(false);
        java.lang.String str50 = builder49.getmongoCollection();
        java.lang.String[] strArray65 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder40.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder14.excludeFields = strSet66;
        builder9.setincludeFields((java.util.Set<java.lang.String>) strSet66);
        builder9.importAllCollections = true;
        builder9.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getSIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "user" + "'", str44, "user");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "size" + "'", str45, "size");
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        int int46 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str47 = mongoDBRiverDefinition39.getRiverName();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_DB_PORT();
        boolean boolean49 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        boolean boolean52 = mongoDBRiverDefinition39.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 27017 + "'", int48 == 27017);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bulk_size" + "'", str51, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        builder42.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder42.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.storeStatistics(false);
        builder50.setmongoAdminPassword("bulk");
        java.lang.String str53 = builder50.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoLocalPassword("");
        docScoreSearchScript0.setNextVar("throttle_size", (java.lang.Object) "");
        java.lang.Object obj57 = null;
        java.lang.Object obj58 = docScoreSearchScript0.unwrap(obj57);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getPORT_FIELD();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        int int48 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "port" + "'", str46, "port");
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 30000 + "'", int48 == 30000);
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        builder3.setisMongos((java.lang.Boolean) false);
        java.lang.Boolean boolean12 = builder3.isMongos;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + false + "'", boolean12, false);
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.statisticsTypeName = ".scripts";
        boolean boolean9 = builder6.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(false);
        boolean boolean12 = builder6.getdropCollection();
        builder6.storeStatistics = true;
        builder6.setmongoSSLVerifyCertificate(false);
        builder6.setstatisticsIndexName("localhost");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder8.getscript();
        java.lang.String str13 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.skipInitialImport(true);
        boolean boolean16 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder20.includeFields = strSet55;
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder7.script("filter");
        java.lang.String str62 = builder7.statisticsIndexName;
        java.lang.String str63 = builder7.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.statisticsTypeName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.isMongos((java.lang.Boolean) true);
        java.lang.String str19 = builder13.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoSSLVerifyCertificate(false);
        java.lang.String str22 = builder21.getmongoCollection();
        java.lang.String[] strArray37 = new java.lang.String[] { "flush_interval", "sandbox", "user", "options", "credentials", "concurrent_bulk_requests", "store_statistics", "secondary_read_preference", "", "skip_initial_import", "ssl_verify_certificate", "credentials", "options", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder21.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.indexName("credentials");
        java.lang.String str45 = builder41.getscript();
        builder41.setincludeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.mongoSSLVerifyCertificate(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = builder41.mongoServers;
        builder21.setmongoServers(serverAddressList50);
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = builder21.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder8.mongoServers(serverAddressList52);
        builder8.isMongos = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(serverAddressList50);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        builder6.setmongoDb("script.disable_dynamic");
        boolean boolean9 = builder6.getmongoSecondaryReadPreference();
        boolean boolean10 = builder6.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoClientOptions(mongoClientOptions11);
        java.lang.String str13 = builder6.getindexName();
        builder6.script = "socket_timeout";
        java.util.Set<java.lang.String> strSet16 = builder6.getincludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        builder6.mongoClientOptions = mongoClientOptions17;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder3.build();
        boolean boolean7 = mongoDBRiverDefinition6.getstoreStatistics();
        boolean boolean8 = mongoDBRiverDefinition6.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        int int10 = mongoDBRiverDefinition6.socketTimeout;
        boolean boolean11 = mongoDBRiverDefinition6.getmongoUseSSL();
        int int12 = mongoDBRiverDefinition6.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str45 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger46 = mongoDBRiverDefinition39.getlogger();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition39.mongoSSLVerifyCertificate;
        java.lang.String str50 = mongoDBRiverDefinition39.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bulk_timeout" + "'", str45, "bulk_timeout");
        org.junit.Assert.assertNotNull(eSLogger46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "secondary_read_preference" + "'", str48, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean46 = mongoDBRiverDefinition39.skipInitialImport;
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        int int48 = mongoDBRiverDefinition39.getSocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        builder3.setimportAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        builder0.mongoGridFS = false;
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.dropCollection(true);
        builder8.indexName = ".scripts";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        java.lang.String str11 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        java.lang.String str14 = builder0.getmongoLocalPassword();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        com.mongodb.BasicDBObject basicDBObject39 = builder38.mongoCollectionFilter;
        java.lang.String str40 = builder38.script;
        com.mongodb.BasicDBObject basicDBObject41 = builder38.mongoOplogFilter;
        java.lang.String str42 = builder38.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.Boolean boolean39 = builder38.isMongos;
        builder38.socketTimeout = 0;
        builder38.mongoDb = "type";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(boolean39);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.mongoClientOptions = mongoClientOptions9;
        java.lang.String str11 = builder0.getmongoDb();
        builder0.mongoCollection = "sandbox";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        builder0.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.includeCollection("ssl_verify_certificate");
        builder0.settypeName("script");
        builder0.setscriptType("options");
        java.lang.String str17 = builder0.getmongoAdminPassword();
        java.lang.String str18 = builder0.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder0.getmongoServers();
        builder0.importAllCollections = false;
        java.lang.String str12 = builder0.mongoDb;
        builder0.setskipInitialImport(false);
        builder0.setmongoCollection("script_type");
        boolean boolean17 = builder0.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str47 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean48 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition39.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index" + "'", str47, "index");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean44 = mongoDBRiverDefinition39.getadvancedTransformation();
        int int45 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean46 = mongoDBRiverDefinition39.getstoreStatistics();
        java.lang.String str47 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition39.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "store_statistics" + "'", str47, "store_statistics");
        org.junit.Assert.assertNull(strSet48);
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoAdminUser();
        int int55 = mongoDBRiverDefinition39.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        boolean boolean15 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder8.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardTimestamp16);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.script = "is_mongos";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoLocalPassword("");
        builder12.throttleSize = (short) 0;
        boolean boolean15 = builder12.skipInitialImport;
        boolean boolean16 = builder12.skipInitialImport;
        java.lang.String str17 = builder12.typeName;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue43 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_size" + "'", str44, "bulk_size");
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        builder3.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject6 = builder3.mongoOplogFilter;
        boolean boolean7 = builder3.mongoSSLVerifyCertificate;
        builder3.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        builder10.mongoGridFS = true;
        java.lang.String str18 = builder10.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder19.scriptType("index");
        builder25.statisticsTypeName = ".scripts";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.indexName("credentials");
        java.lang.String str32 = builder31.mongoAdminUser;
        java.lang.String[] strArray61 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder31.parentTypes((java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        boolean boolean68 = mongoDBRiverDefinition67.getdropCollection();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition67.getParentTypes();
        builder25.parentTypes = strSet69;
        builder10.setexcludeFields(strSet69);
        builder3.setincludeFields(strSet69);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp73 = builder3.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(wildcardTimestamp73);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.isMongos((java.lang.Boolean) true);
        java.lang.String str18 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject21 = builder12.mongoCollectionFilter;
        builder7.setmongoCollectionFilter(basicDBObject21);
        builder7.setmongoAdminUser("size");
        boolean boolean25 = builder7.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        boolean boolean46 = mongoDBRiverDefinition39.getmongoGridFS();
        boolean boolean47 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean48 = mongoDBRiverDefinition39.getskipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int13 = builder12.getsocketTimeout();
        builder12.setskipInitialImport(false);
        builder12.mongoAdminUser = "initial_timestamp";
        builder12.connectTimeout = 27017;
        java.lang.String str20 = builder12.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        java.lang.String str62 = mongoDBRiverDefinition60.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str63 = mongoDBRiverDefinition60.getINDEX_OBJECT();
        int int64 = mongoDBRiverDefinition60.getDEFAULT_SOCKET_TIMEOUT();
        int int65 = mongoDBRiverDefinition60.throttleSize;
        java.util.Set<java.lang.String> strSet66 = mongoDBRiverDefinition60.parentTypes;
        builder12.parentTypes = strSet66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder9.parentTypes(strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "skip_initial_import" + "'", str62, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "index" + "'", str63, "index");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 60000 + "'", int64 == 60000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject9 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsIndexName("port");
        builder13.setmongoAdminUser("store_statistics");
        builder13.socketTimeout = (short) 1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.BasicDBObject basicDBObject1 = null;
        builder0.setmongoOplogFilter(basicDBObject1);
        int int3 = builder0.socketTimeout;
        builder0.setriverIndexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        boolean boolean12 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder20.getscript();
        boolean boolean25 = builder20.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int27 = builder26.getsocketTimeout();
        boolean boolean28 = builder26.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoCollectionFilter();
        builder26.setmongoOplogFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder20.mongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder19.mongoOplogFilter(basicDBObject33);
        builder8.setmongoOplogFilter(basicDBObject33);
        builder0.setmongoCollectionFilter(basicDBObject33);
        java.lang.String str39 = builder0.getstatisticsTypeName();
        boolean boolean40 = builder0.advancedTransformation;
        java.util.List<com.mongodb.ServerAddress> serverAddressList41 = builder0.mongoServers;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(serverAddressList41);
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.util.Set<java.lang.String> strSet40 = builder38.getincludeFields();
        int int41 = builder38.getconnectTimeout();
        builder38.riverName = "index";
        builder38.mongoSSLVerifyCertificate = false;
        boolean boolean46 = builder38.dropCollection;
        boolean boolean47 = builder38.getstoreStatistics();
        builder38.setmongoDb("script");
        builder38.setscriptType("advanced_transformation");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str44 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger45 = mongoDBRiverDefinition39.getlogger();
        boolean boolean46 = mongoDBRiverDefinition39.isDisableIndexRefresh();
        boolean boolean47 = mongoDBRiverDefinition39.isAdvancedTransformation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "initial_timestamp" + "'", str43, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "drop_collection" + "'", str44, "drop_collection");
        org.junit.Assert.assertNotNull(eSLogger45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        builder8.setconnectTimeout(8);
        builder8.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.advancedTransformation(false);
        org.bson.types.BSONTimestamp bSONTimestamp17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.initialTimestamp(bSONTimestamp17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        java.lang.String str10 = builder9.mongoAdminUser;
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("initial_timestamp");
        builder42.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder42.statisticsIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder42.storeStatistics(false);
        builder50.setmongoAdminPassword("bulk");
        java.lang.String str53 = builder50.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoLocalPassword("");
        docScoreSearchScript0.setNextVar("throttle_size", (java.lang.Object) "");
        java.lang.Object obj57 = null;
        java.lang.Object obj58 = docScoreSearchScript0.unwrap(obj57);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        boolean boolean42 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        int int44 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean45 = mongoDBRiverDefinition39.getmongoUseSSL();
        boolean boolean46 = mongoDBRiverDefinition39.isAdvancedTransformation();
        boolean boolean47 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str48 = mongoDBRiverDefinition39.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "throttle_size" + "'", str48, "throttle_size");
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.lang.String str2 = builder0.gettypeName();
        java.util.Set<java.lang.String> strSet3 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        int int6 = builder4.getthrottleSize();
        java.util.Set<java.lang.String> strSet7 = builder4.parentTypes;
        builder4.mongoLocalUser = "";
        boolean boolean10 = builder4.getskipInitialImport();
        builder4.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder4.getmongoServers();
        builder4.mongoLocalPassword = "store_statistics";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.isMongos((java.lang.Boolean) true);
        java.lang.String str22 = builder16.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoSSLVerifyCertificate(false);
        builder16.mongoAdminPassword = "parent_types";
        java.lang.String str27 = builder16.getriverIndexName();
        int int28 = builder16.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder16.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str32 = builder31.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.indexName("credentials");
        java.lang.String str35 = builder34.mongoAdminUser;
        java.lang.String[] strArray64 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder34.parentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder67.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str71 = mongoDBRiverDefinition70.getSIZE_FIELD();
        boolean boolean72 = mongoDBRiverDefinition70.disableIndexRefresh;
        java.lang.String str73 = mongoDBRiverDefinition70.getINCLUDE_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet74 = mongoDBRiverDefinition70.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder30.excludeFields(strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder4.excludeFields(strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder0.excludeFields(strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = builder0.build();
        boolean boolean79 = builder0.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "size" + "'", str71, "size");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "include_collection" + "'", str73, "include_collection");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoCollection();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean45 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean46 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str47 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition39.getTypeName();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "store_statistics" + "'", str47, "store_statistics");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        builder0.setmongoLocalPassword("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str60 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder0.storeStatistics(true);
        com.mongodb.BasicDBObject basicDBObject63 = builder62.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(basicDBObject63);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.setmongoCollection("index");
        builder0.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str12 = builder0.mongoAdminUser;
        java.lang.String str13 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoLocalPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.statisticsTypeName("store_statistics");
        builder15.setconnectTimeout(1);
        boolean boolean20 = builder15.storeStatistics;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoLocalPassword("actions");
        boolean boolean11 = builder0.mongoGridFS;
        java.lang.String str12 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        java.lang.String str8 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("db");
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder10.getmongoServers();
        builder10.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.importAllCollections(false);
        builder15.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder3.script;
        builder3.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder3.includeCollection("admin");
        builder12.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.riverName("script.default_lang");
        boolean boolean17 = builder16.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject7);
        builder0.throttleSize = 10;
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder0.getmongoServers();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(serverAddressList11);
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        builder0.isMongos = false;
        builder0.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoAdminUser = "exclude_fields";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder5.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        java.util.Set<java.lang.String> strSet43 = builder36.getincludeFields();
        builder36.settypeName("local");
        builder36.mongoLocalPassword = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str49 = builder48.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject52 = builder51.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = builder51.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder51.disableIndexRefresh(true);
        builder55.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str59 = builder58.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder58.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder58.isMongos((java.lang.Boolean) true);
        java.lang.String str64 = builder58.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.mongoSSLVerifyCertificate(false);
        java.lang.String str67 = builder66.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str69 = builder68.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder68.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject72 = builder71.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList73 = builder71.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder71.disableIndexRefresh(true);
        builder75.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder75.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str81 = builder80.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder80.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder80.isMongos((java.lang.Boolean) true);
        java.lang.String str86 = builder80.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder80.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject89 = builder80.mongoCollectionFilter;
        builder75.setmongoCollectionFilter(basicDBObject89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder66.mongoOplogFilter(basicDBObject89);
        builder55.mongoCollectionFilter = basicDBObject89;
        builder36.setmongoCollectionFilter(basicDBObject89);
        boolean boolean94 = builder36.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(serverAddressList73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(basicDBObject89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        builder36.mongoDb = "";
        builder36.mongoCollection = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder36.importAllCollections(false);
        builder48.setriverIndexName("bulk_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory3);
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        java.lang.String str12 = builder11.mongoAdminUser;
        java.lang.String[] strArray41 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.getSIZE_FIELD();
        boolean boolean49 = mongoDBRiverDefinition47.disableIndexRefresh;
        java.lang.String str50 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str51 = mongoDBRiverDefinition47.getACTIONS_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition47.mongoAdminPassword;
        boolean boolean53 = mongoDBRiverDefinition47.isAdvancedTransformation();
        java.lang.String str54 = mongoDBRiverDefinition47.getINDEX_OBJECT();
        boolean boolean55 = mongoDBRiverDefinition47.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp56 = mongoDBRiverDefinition47.getInitialTimestamp();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) wildcardTimestamp56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.isMongos((java.lang.Boolean) true);
        java.lang.String str65 = builder59.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder59.mongoSSLVerifyCertificate(false);
        java.lang.String str68 = builder67.mongoAdminPassword;
        boolean boolean69 = builder67.getstoreStatistics();
        int int70 = builder67.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder67.mongoLocalUser("socket_timeout");
        docScoreSearchScript0.setNextVar("script.default_lang", (java.lang.Object) builder72);
        // The following exception was thrown during execution in test generation
        try {
            float float74 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "host" + "'", obj6, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "size" + "'", str48, "size");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "actions" + "'", str50, "actions");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "actions" + "'", str51, "actions");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "index" + "'", str54, "index");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardTimestamp56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str42 = mongoDBRiverDefinition39.getSCRIPT_TYPE_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.mongoAdminUser;
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.getisMongos();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoOplogFilter();
        int int46 = mongoDBRiverDefinition39.getThrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "script_type" + "'", str42, "script_type");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalUser = "type";
        boolean boolean9 = builder0.advancedTransformation;
        boolean boolean10 = builder0.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str45 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gridfs" + "'", str41, "gridfs");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ssl_verify_certificate" + "'", str42, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "null.null" + "'", str44, "null.null");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "advanced_transformation" + "'", str45, "advanced_transformation");
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoLocalUser;
        boolean boolean42 = mongoDBRiverDefinition39.getskipInitialImport();
        java.lang.String str43 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.indexName;
        java.lang.String str45 = mongoDBRiverDefinition39.mongoLocalPassword;
        java.lang.String str46 = mongoDBRiverDefinition39.getScriptType();
        java.lang.String str47 = mongoDBRiverDefinition39.getScriptType();
        boolean boolean48 = mongoDBRiverDefinition39.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index" + "'", str40, "index");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "local" + "'", str43, "local");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "credentials" + "'", str44, "credentials");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "initial_timestamp" + "'", str45, "initial_timestamp");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str50 = mongoDBRiverDefinition39.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bulk_timeout" + "'", str48, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "initial_timestamp" + "'", str49, "initial_timestamp");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoAdminPassword;
        boolean boolean45 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str46 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean47 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str48 = mongoDBRiverDefinition39.getIncludeCollection();
        java.lang.String str49 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index" + "'", str46, "index");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "script" + "'", str49, "script");
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.mongoUseSSL;
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions47 = mongoDBRiverDefinition39.getMongoClientOptions();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str49 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList50 = mongoDBRiverDefinition39.mongoServers;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "drop_collection" + "'", str49, "drop_collection");
        org.junit.Assert.assertNotNull(serverAddressList50);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        java.lang.String str17 = builder13.getscript();
        boolean boolean18 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int20 = builder19.getsocketTimeout();
        boolean boolean21 = builder19.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        builder19.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder13.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder11.mongoOplogFilter = basicDBObject26;
        builder11.scriptType = "hi!";
        builder11.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder11.riverIndexName("sandbox");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.statisticsTypeName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("concurrent_bulk_requests");
        java.lang.String str15 = builder12.getstatisticsIndexName();
        boolean boolean16 = builder12.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet17 = builder12.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextVar("script", (java.lang.Object) 1L);
        docScoreSearchScript0.setNextScore((float) (-1L));
        docScoreSearchScript0.setNextScore((float) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.setmongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.mongoAdminUser("gridfs");
        builder10.scriptType = "script.disable_dynamic";
        builder10.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.mongoCollection("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder10.riverIndexName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.isMongos((java.lang.Boolean) true);
        java.lang.String str30 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.mongoSSLVerifyCertificate(false);
        builder24.mongoAdminPassword = "parent_types";
        java.lang.String str35 = builder24.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int37 = builder36.getsocketTimeout();
        builder36.setskipInitialImport(false);
        builder36.mongoAdminUser = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder36.mongoClientOptions(mongoClientOptions42);
        builder36.setmongoCollection("index");
        builder36.setstatisticsIndexName("script.disable_dynamic");
        java.lang.String str48 = builder36.mongoAdminUser;
        java.lang.String str49 = builder36.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.indexName("credentials");
        java.lang.String str54 = builder50.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder50.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str58 = builder57.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.indexName("credentials");
        java.lang.String str61 = builder57.getscript();
        boolean boolean62 = builder57.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int64 = builder63.getsocketTimeout();
        boolean boolean65 = builder63.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder66.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject70 = builder69.getmongoCollectionFilter();
        builder63.setmongoOplogFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder57.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder56.mongoOplogFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder36.mongoCollectionFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder24.mongoOplogFilter(basicDBObject70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder10.mongoCollectionFilter(basicDBObject70);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "initial_timestamp" + "'", str48, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        org.elasticsearch.common.unit.TimeValue timeValue42 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str43 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.riverName;
        int int45 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ssl" + "'", str43, "ssl");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.mongoClientOptions(mongoClientOptions13);
        builder7.setimportAllCollections(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.mongoGridFS;
        java.lang.String str44 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet46 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str47 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "include_collection" + "'", str42, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "password" + "'", str44, "password");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "advanced_transformation" + "'", str45, "advanced_transformation");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bulk_timeout" + "'", str47, "bulk_timeout");
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        int int2 = builder0.getthrottleSize();
        java.util.Set<java.lang.String> strSet3 = builder0.parentTypes;
        builder0.mongoLocalUser = "";
        boolean boolean6 = builder0.getskipInitialImport();
        builder0.mongoLocalPassword = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder0.getmongoServers();
        builder0.importAllCollections = false;
        builder0.mongoAdminPassword = "";
        java.lang.String str14 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        int int50 = mongoDBRiverDefinition39.throttleSize;
        boolean boolean51 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str52 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        java.util.Set<java.lang.String> strSet54 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.String str55 = mongoDBRiverDefinition39.mongoCollection;
        java.lang.String str56 = mongoDBRiverDefinition39.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition39.mongoCollectionFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "gridfs" + "'", str52, "gridfs");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ssl_verify_certificate" + "'", str53, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "bulk_size" + "'", str56, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject57);
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.indexName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoCollection("null.null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoCollection();
        boolean boolean44 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean45 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean46 = mongoDBRiverDefinition39.isImportAllCollections();
        java.lang.String str47 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        boolean boolean48 = mongoDBRiverDefinition39.isSkipInitialImport();
        java.lang.String str49 = mongoDBRiverDefinition39.getUSER_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "store_statistics" + "'", str47, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "user" + "'", str49, "user");
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.lang.String str10 = builder3.getstatisticsIndexName();
        int int11 = builder3.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.indexName("");
        java.lang.String str14 = builder13.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder13.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.statisticsIndexName;
        java.lang.String str18 = builder16.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder22.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        java.lang.String str31 = builder27.getscript();
        java.lang.String str32 = builder27.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.skipInitialImport(true);
        boolean boolean35 = builder34.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.indexName("credentials");
        java.lang.String str44 = builder43.mongoAdminUser;
        java.lang.String[] strArray73 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder43.parentTypes((java.util.Set<java.lang.String>) strSet74);
        builder39.includeFields = strSet74;
        builder26.setincludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet74);
        builder13.parentTypes = strSet74;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder13.typeName("concurrent_bulk_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        boolean boolean9 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("hi!");
        int int12 = builder11.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.disableIndexRefresh(false);
        builder14.setskipInitialImport(true);
        builder14.setindexName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoLocalPassword("servers");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINDEX_OBJECT();
        boolean boolean43 = mongoDBRiverDefinition39.getdropCollection();
        boolean boolean44 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsIndexName();
        java.lang.String str46 = mongoDBRiverDefinition39.getHOST_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "skip_initial_import" + "'", str41, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "host" + "'", str46, "host");
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getScript();
        java.lang.String str46 = mongoDBRiverDefinition39.getDB_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str48 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getMongoDb();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "import_all_collections" + "'", str44, "import_all_collections");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "db" + "'", str46, "db");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        java.lang.String str38 = builder3.indexName;
        java.lang.String str39 = builder3.mongoLocalUser;
        builder3.setincludeCollection("script_type");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "credentials" + "'", str38, "credentials");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.importAllCollections(true);
        builder16.setconnectTimeout((int) (short) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        builder7.setthrottleSize((int) (byte) 0);
        boolean boolean10 = builder7.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder14.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.mongoServers(serverAddressList16);
        java.lang.String str18 = builder17.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean42 = mongoDBRiverDefinition39.getdropCollection();
        java.lang.String str43 = mongoDBRiverDefinition39.getPASSWORD_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "password" + "'", str43, "password");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "connect_timeout" + "'", str44, "connect_timeout");
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        java.lang.Boolean boolean39 = builder38.isMongos;
        builder38.socketTimeout = 0;
        builder38.dropCollection = false;
        java.util.Set<java.lang.String> strSet44 = builder38.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = null;
        builder38.mongoServers = serverAddressList45;
        builder38.setindexName("actions");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        boolean boolean5 = builder3.getimportAllCollections();
        java.util.Set<java.lang.String> strSet6 = builder3.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.indexName("credentials");
        java.lang.String str11 = builder10.mongoAdminUser;
        java.lang.String[] strArray40 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        java.lang.String str47 = mongoDBRiverDefinition46.getSIZE_FIELD();
        boolean boolean48 = mongoDBRiverDefinition46.disableIndexRefresh;
        java.lang.String str49 = mongoDBRiverDefinition46.getACTIONS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition46.getMongoOplogNamespace();
        java.lang.Boolean boolean51 = mongoDBRiverDefinition46.isMongos();
        boolean boolean52 = mongoDBRiverDefinition46.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition46.getParentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder3.parentTypes(strSet53);
        com.mongodb.BasicDBObject basicDBObject55 = builder54.mongoCollectionFilter;
        java.lang.String str56 = builder54.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder54.includeCollection("host");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "size" + "'", str47, "size");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "actions" + "'", str49, "actions");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "null.null" + "'", str50, "null.null");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.storeStatistics;
        java.lang.String str45 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str46 = mongoDBRiverDefinition39.mongoDb;
        java.lang.String str47 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "actions" + "'", str43, "actions");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "is_mongos" + "'", str47, "is_mongos");
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.mongoSSLVerifyCertificate;
        java.lang.String str14 = mongoDBRiverDefinition12.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition12.mongoLocalPassword;
        java.lang.String str16 = mongoDBRiverDefinition12.getPASSWORD_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition12.getIndexName();
        java.lang.String str18 = mongoDBRiverDefinition12.getACTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "password" + "'", str16, "password");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "credentials" + "'", str17, "credentials");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "actions" + "'", str18, "actions");
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str46 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue48 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        boolean boolean49 = mongoDBRiverDefinition39.getadvancedTransformation();
        int int50 = mongoDBRiverDefinition39.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "include_fields" + "'", str46, "include_fields");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "is_mongos" + "'", str47, "is_mongos");
        org.junit.Assert.assertNotNull(byteSizeValue48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1000 + "'", int50 == 1000);
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getScriptType();
        int int49 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition39.includeFields;
        boolean boolean51 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean52 = mongoDBRiverDefinition39.isStoreStatistics();
        java.lang.String str53 = mongoDBRiverDefinition39.statisticsTypeName;
        java.lang.String str54 = mongoDBRiverDefinition39.getMongoAdminUser();
        int int55 = mongoDBRiverDefinition39.getDEFAULT_CONCURRENT_REQUESTS();
        int int56 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str57 = mongoDBRiverDefinition39.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet58 = mongoDBRiverDefinition39.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 30000 + "'", int49 == 30000);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "advanced_transformation" + "'", str57, "advanced_transformation");
        org.junit.Assert.assertNull(strSet58);
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("index");
        boolean boolean7 = builder6.mongoGridFS;
        builder6.statisticsIndexName = "concurrent_bulk_requests";
        builder6.advancedTransformation = false;
        boolean boolean12 = builder6.storeStatistics;
        java.lang.String str13 = builder6.scriptType;
        boolean boolean14 = builder6.getadvancedTransformation();
        builder6.scriptType = "gridfs";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        int int41 = mongoDBRiverDefinition39.getDEFAULT_CONNECT_TIMEOUT();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean43 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str44 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.String str45 = mongoDBRiverDefinition39.scriptType;
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        java.lang.String str47 = mongoDBRiverDefinition39.scriptType;
        java.lang.String str48 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger49 = mongoDBRiverDefinition39.getlogger();
        java.lang.String str50 = mongoDBRiverDefinition39.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 30000 + "'", int41 == 30000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "include_collection" + "'", str48, "include_collection");
        org.junit.Assert.assertNotNull(eSLogger49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getmongoSecondaryReadPreference();
        java.lang.String str41 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str42 = mongoDBRiverDefinition39.getHOST_FIELD();
        int int43 = mongoDBRiverDefinition39.getThrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "host" + "'", str42, "host");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        boolean boolean2 = builder0.mongoUseSSL;
        builder0.statisticsIndexName = "collection";
        java.lang.String str5 = builder0.mongoAdminUser;
        java.lang.String str6 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.statisticsIndexName;
        java.util.Set<java.lang.String> strSet9 = builder7.getincludeFields();
        java.lang.String str10 = builder7.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("credentials");
        java.lang.String str15 = builder11.getscript();
        java.lang.String str16 = builder11.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder11.skipInitialImport(true);
        boolean boolean19 = builder18.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder24.indexName("credentials");
        java.lang.String str28 = builder27.mongoAdminUser;
        java.lang.String[] strArray57 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder27.parentTypes((java.util.Set<java.lang.String>) strSet58);
        builder23.includeFields = strSet58;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder7.includeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.includeFields((java.util.Set<java.lang.String>) strSet58);
        builder63.scriptType = "script";
        java.lang.String str66 = builder63.mongoDb;
        builder63.mongoGridFS = false;
        builder63.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore(0.0f);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) 1);
        org.elasticsearch.common.ParseField parseField6 = org.elasticsearch.script.ScriptService.SCRIPT_ID;
        docScoreSearchScript0.setNextVar("index", (java.lang.Object) parseField6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.isMongos((java.lang.Boolean) true);
        java.lang.String str14 = builder8.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoSSLVerifyCertificate(false);
        java.lang.String str17 = builder16.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoGridFS(true);
        java.lang.String str20 = builder19.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder19.getmongoServers();
        boolean boolean22 = builder19.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoCollection("disable_index_refresh");
        java.lang.Object obj25 = docScoreSearchScript0.unwrap((java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.mongoSecondaryReadPreference(false);
        int int28 = builder27.getthrottleSize();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1 + "'", obj4, 1);
        org.junit.Assert.assertNotNull(parseField6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        java.lang.String str44 = mongoDBRiverDefinition39.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        boolean boolean46 = mongoDBRiverDefinition39.advancedTransformation;
        int int47 = mongoDBRiverDefinition39.socketTimeout;
        java.lang.String str48 = mongoDBRiverDefinition39.getRiverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bulk_timeout" + "'", str44, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.getstoreStatistics();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition39.getExcludeFields();
        java.lang.String str53 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        int int54 = mongoDBRiverDefinition39.getConnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "localhost" + "'", str53, "localhost");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        java.util.Set<java.lang.String> strSet11 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.isMongoGridFS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition12.getInitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition12.mongoServers;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition12.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder3.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet10 = builder3.parentTypes;
        boolean boolean11 = builder3.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoCollection("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.isMongos((java.lang.Boolean) true);
        java.lang.String str24 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoSSLVerifyCertificate(false);
        builder26.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.throttleSize(10);
        builder26.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.indexName("credentials");
        java.lang.String str37 = builder36.mongoAdminUser;
        java.lang.String[] strArray66 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder36.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder69.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        java.lang.String str73 = mongoDBRiverDefinition72.getSIZE_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition72.getTHROTTLE_SIZE_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition72.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int76 = mongoDBRiverDefinition72.getDEFAULT_BULK_ACTIONS();
        int int77 = mongoDBRiverDefinition72.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList78 = mongoDBRiverDefinition72.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder26.mongoServers(serverAddressList78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder15.mongoServers(serverAddressList78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder80.mongoLocalUser("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder80.scriptType("password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "size" + "'", str73, "size");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "throttle_size" + "'", str74, "throttle_size");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "concurrent_bulk_requests" + "'", str75, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1000 + "'", int76 == 1000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 60000 + "'", int77 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminUser("gridfs");
        builder0.scriptType = "script.disable_dynamic";
        builder0.throttleSize = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("collection");
        builder0.mongoAdminUser = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoGridFS(true);
        java.util.Set<java.lang.String> strSet16 = builder15.getparentTypes();
        builder15.setsocketTimeout(32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.importAllCollections(false);
        java.lang.String str21 = builder15.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.storeStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str14 = builder13.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder16.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.disableIndexRefresh(true);
        builder16.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.advancedTransformation(true);
        java.lang.String[] strArray61 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        builder26.parentTypes = strSet62;
        builder10.excludeFields = strSet62;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder10.riverIndexName("secondary_read_preference");
        builder10.setscriptType("concurrent_bulk_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "import_all_collections" + "'", str47, "import_all_collections");
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        builder0.setriverName("");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        java.util.Set<java.lang.String> strSet9 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.indexName("actions");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.initialTimestamp;
        builder0.setindexName("advanced_transformation");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        java.util.Set<java.lang.String> strSet2 = builder0.getincludeFields();
        java.lang.String str3 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("credentials");
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.skipInitialImport(true);
        boolean boolean12 = builder11.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.indexName("credentials");
        java.lang.String str21 = builder20.mongoAdminUser;
        java.lang.String[] strArray50 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet51);
        builder16.includeFields = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder0.includeFields((java.util.Set<java.lang.String>) strSet51);
        builder0.setmongoLocalPassword("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder0.isMongos((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        org.elasticsearch.common.unit.TimeValue timeValue47 = mongoDBRiverDefinition39.getDEFAULT_FLUSH_INTERVAL();
        int int48 = mongoDBRiverDefinition39.connectTimeout;
        java.lang.String str49 = mongoDBRiverDefinition39.getINCLUDE_FIELDS_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition39.getMongoCollection();
        boolean boolean51 = mongoDBRiverDefinition39.isMongoGridFS();
        java.lang.String str52 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject53 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "include_fields" + "'", str49, "include_fields");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "script_type" + "'", str52, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject53);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getCONNECT_TIMEOUT();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "actions" + "'", str44, "actions");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "connect_timeout" + "'", str45, "connect_timeout");
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str46 = mongoDBRiverDefinition39.getIS_MONGOS_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition39.getSSL_CONNECTION_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean50 = mongoDBRiverDefinition39.advancedTransformation;
        boolean boolean51 = mongoDBRiverDefinition39.mongoGridFS;
        boolean boolean52 = mongoDBRiverDefinition39.importAllCollections;
        java.lang.String str53 = mongoDBRiverDefinition39.getSIZE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "is_mongos" + "'", str46, "is_mongos");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ssl" + "'", str48, "ssl");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "concurrent_requests" + "'", str49, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "size" + "'", str53, "size");
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        boolean boolean42 = mongoDBRiverDefinition39.isMongoGridFS();
        boolean boolean43 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        java.lang.String str44 = mongoDBRiverDefinition39.getLOCAL_DB_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoDb();
        java.util.Set<java.lang.String> strSet47 = mongoDBRiverDefinition39.getIncludeFields();
        java.lang.String str48 = mongoDBRiverDefinition39.getScript();
        boolean boolean49 = mongoDBRiverDefinition39.getmongoUseSSL();
        java.lang.String str50 = mongoDBRiverDefinition39.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean51 = mongoDBRiverDefinition39.mongoSecondaryReadPreference;
        boolean boolean52 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean53 = mongoDBRiverDefinition39.isDropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "local" + "'", str44, "local");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "null.null" + "'", str45, "null.null");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "concurrent_bulk_requests" + "'", str50, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        boolean boolean40 = mongoDBRiverDefinition39.getdropCollection();
        java.util.Set<java.lang.String> strSet41 = mongoDBRiverDefinition39.getParentTypes();
        java.lang.Boolean boolean42 = mongoDBRiverDefinition39.getisMongos();
        java.lang.Boolean boolean43 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str44 = mongoDBRiverDefinition39.getSSL_VERIFY_CERT_FIELD();
        boolean boolean45 = mongoDBRiverDefinition39.getmongoSSLVerifyCertificate();
        boolean boolean46 = mongoDBRiverDefinition39.dropCollection;
        boolean boolean47 = mongoDBRiverDefinition39.storeStatistics;
        boolean boolean48 = mongoDBRiverDefinition39.getstoreStatistics();
        boolean boolean49 = mongoDBRiverDefinition39.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ssl_verify_certificate" + "'", str44, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        java.lang.String str14 = builder13.mongoAdminUser;
        java.lang.String[] strArray43 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str50 = mongoDBRiverDefinition49.getSIZE_FIELD();
        boolean boolean51 = mongoDBRiverDefinition49.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = mongoDBRiverDefinition49.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoServers(serverAddressList52);
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder0.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.riverIndexName("socket_timeout");
        builder0.setdisableIndexRefresh(true);
        builder0.dropCollection = false;
        java.lang.String str61 = builder0.mongoAdminPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "size" + "'", str50, "size");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serverAddressList52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder3.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.disableIndexRefresh(true);
        java.lang.String str8 = builder7.riverIndexName;
        builder7.mongoAdminUser = "servers";
        int int11 = builder7.getsocketTimeout();
        builder7.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoLocalUser("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.skipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.setmongoCollectionFilter(basicDBObject2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoOplogFilter(basicDBObject10);
        int int12 = builder0.throttleSize;
        java.lang.String str13 = builder0.getmongoLocalUser();
        int int14 = builder0.getsocketTimeout();
        int int15 = builder0.socketTimeout;
        builder0.setindexName("script.default_lang");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoLocalUser("collection");
        java.util.Set<java.lang.String> strSet20 = builder19.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.indexName("credentials");
        java.lang.String str25 = builder24.mongoAdminUser;
        java.lang.String[] strArray54 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        java.lang.String str61 = mongoDBRiverDefinition60.getSIZE_FIELD();
        boolean boolean62 = mongoDBRiverDefinition60.disableIndexRefresh;
        java.lang.String str63 = mongoDBRiverDefinition60.getACTIONS_FIELD();
        java.lang.String str64 = mongoDBRiverDefinition60.scriptType;
        int int65 = mongoDBRiverDefinition60.getDEFAULT_CONNECT_TIMEOUT();
        java.util.Set<java.lang.String> strSet66 = mongoDBRiverDefinition60.excludeFields;
        java.lang.String str67 = mongoDBRiverDefinition60.getHOST_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = mongoDBRiverDefinition60.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder19.mongoServers(serverAddressList68);
        boolean boolean70 = builder19.getmongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "size" + "'", str61, "size");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "actions" + "'", str63, "actions");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 30000 + "'", int65 == 30000);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "host" + "'", str67, "host");
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        boolean boolean37 = builder36.mongoSecondaryReadPreference;
        java.lang.String str38 = builder36.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.dropCollection(true);
        boolean boolean41 = builder36.storeStatistics;
        builder36.riverName = "import_all_collections";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        java.lang.String str42 = mongoDBRiverDefinition39.riverIndexName;
        java.lang.String str43 = mongoDBRiverDefinition39.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean44 = mongoDBRiverDefinition39.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "script" + "'", str40, "script");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "secondary_read_preference" + "'", str43, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet6 = builder0.parentTypes;
        int int7 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.isMongos((java.lang.Boolean) true);
        java.lang.String str16 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSSLVerifyCertificate(false);
        java.lang.String str19 = builder10.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.indexName("credentials");
        java.lang.String str24 = builder23.mongoAdminUser;
        java.lang.String[] strArray53 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.lang.String str60 = mongoDBRiverDefinition59.getSIZE_FIELD();
        boolean boolean61 = mongoDBRiverDefinition59.disableIndexRefresh;
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder10.mongoServers(serverAddressList62);
        builder9.setmongoServers(serverAddressList62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder9.storeStatistics(true);
        builder9.mongoLocalUser = "null.null";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder9.storeStatistics(false);
        builder9.mongoLocalUser = "user";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "size" + "'", str60, "size");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder8.setmongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.disableIndexRefresh(true);
        boolean boolean19 = builder8.mongoSSLVerifyCertificate;
        builder8.setconnectTimeout(1000);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject9 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoGridFS(false);
        builder0.mongoGridFS = false;
        java.lang.String str14 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.script("type");
        builder0.throttleSize = 100;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.indexName;
        int int48 = mongoDBRiverDefinition39.getThrottleSize();
        java.util.Set<java.lang.String> strSet49 = mongoDBRiverDefinition39.getIncludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "skip_initial_import" + "'", str46, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "credentials" + "'", str47, "credentials");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(strSet49);
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str9 = builder0.riverName;
        java.lang.String str10 = builder0.scriptType;
        builder0.statisticsTypeName = "secondary_read_preference";
        builder0.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject17 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.statisticsIndexName;
        int int20 = builder18.getthrottleSize();
        java.util.Set<java.lang.String> strSet21 = builder18.parentTypes;
        builder18.mongoLocalUser = "";
        boolean boolean24 = builder18.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = builder30.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder30.disableIndexRefresh(true);
        builder30.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder30.advancedTransformation(true);
        java.lang.String[] strArray75 = new java.lang.String[] { "advanced_transformation", "hi!", "db", "include_fields", "local", "actions", "import_all_collections", "include_collection", "bulk_size", "connect_timeout", "filter", "import_all_collections", "admin", "sandbox", "script", "password", "user", "drop_collection", "credentials", "throttle_size", "flush_interval", "secondary_read_preference", "bulk", "actions", "type", "socket_timeout", "connect_timeout", "gridfs", "secondary_read_preference", "local", "hi!", "script", "gridfs", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        builder40.parentTypes = strSet76;
        builder18.excludeFields = strSet76;
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet76);
        builder0.script = "localhost";
        builder0.includeCollection = "import_all_collections";
        java.lang.String str85 = builder0.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "credentials" + "'", str85, "credentials");
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        boolean boolean46 = mongoDBRiverDefinition39.getdisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject47 = mongoDBRiverDefinition39.getMongoOplogFilter();
        java.lang.String str48 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str49 = mongoDBRiverDefinition39.getPORT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "servers" + "'", str48, "servers");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "port" + "'", str49, "port");
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        builder7.setisMongos((java.lang.Boolean) false);
        builder7.scriptType = "script.disable_dynamic";
        boolean boolean15 = builder7.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder7.getmongoClientOptions();
        builder7.mongoDb = "parent_types";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        builder8.mongoCollection = "db";
        boolean boolean17 = builder8.getmongoSecondaryReadPreference();
        java.lang.String str18 = builder8.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.disableIndexRefresh(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        builder36.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder36.statisticsIndexName("disable_index_refresh");
        builder36.riverName = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.indexName("credentials");
        builder48.mongoDb = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = builder48.build();
        boolean boolean52 = mongoDBRiverDefinition51.getstoreStatistics();
        boolean boolean53 = mongoDBRiverDefinition51.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder36.mongoCollectionFilter(basicDBObject54);
        builder36.throttleSize = 10;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.setmongoAdminUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.indexName("credentials");
        java.lang.String str19 = builder18.mongoAdminUser;
        java.lang.String[] strArray48 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        java.lang.String str55 = mongoDBRiverDefinition54.getSIZE_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition54.getTHROTTLE_SIZE_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition54.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int58 = mongoDBRiverDefinition54.getDEFAULT_BULK_ACTIONS();
        int int59 = mongoDBRiverDefinition54.getDEFAULT_SOCKET_TIMEOUT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList60 = mongoDBRiverDefinition54.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder8.mongoServers(serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder8.advancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "size" + "'", str55, "size");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "throttle_size" + "'", str56, "throttle_size");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "concurrent_bulk_requests" + "'", str57, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1000 + "'", int58 == 1000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 60000 + "'", int59 == 60000);
        org.junit.Assert.assertNotNull(serverAddressList60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.isMongos((java.lang.Boolean) true);
        java.lang.String str6 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoSSLVerifyCertificate(false);
        builder8.setincludeCollection("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize(10);
        builder8.script = "index";
        int int15 = builder8.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        java.lang.String str37 = builder3.getmongoAdminUser();
        java.lang.String str38 = builder3.indexName;
        java.lang.String str39 = builder3.mongoLocalUser;
        java.lang.String str40 = builder3.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "credentials" + "'", str38, "credentials");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        java.lang.String str5 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.skipInitialImport(true);
        boolean boolean8 = builder7.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("actions");
        builder12.setincludeCollection("connect_timeout");
        builder12.setadvancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.indexName("credentials");
        java.lang.String str23 = builder19.getscript();
        java.lang.String str24 = builder19.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder28.getmongoServers();
        builder19.mongoServers = serverAddressList30;
        builder18.mongoServers = serverAddressList30;
        java.lang.String str33 = builder18.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder18.connectTimeout(1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition39.isMongoUseSSL();
        java.lang.String str42 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "flush_interval" + "'", str42, "flush_interval");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "concurrent_requests" + "'", str43, "concurrent_requests");
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.Boolean boolean44 = mongoDBRiverDefinition39.isMongos();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.excludeFields;
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean47 = mongoDBRiverDefinition39.isMongoSecondaryReadPreference();
        java.lang.Boolean boolean48 = mongoDBRiverDefinition39.isMongos();
        java.lang.String str49 = mongoDBRiverDefinition39.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script_type" + "'", str46, "script_type");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "disable_index_refresh" + "'", str49, "disable_index_refresh");
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int1 = builder0.getsocketTimeout();
        builder0.setskipInitialImport(false);
        builder0.mongoAdminUser = "initial_timestamp";
        builder0.script = "script.disable_dynamic";
        builder0.setmongoGridFS(true);
        builder0.settypeName("flush_interval");
        int int12 = builder0.getconnectTimeout();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.statisticsTypeName;
        boolean boolean44 = mongoDBRiverDefinition39.isAdvancedTransformation();
        java.lang.String str45 = mongoDBRiverDefinition39.script;
        java.lang.String str46 = mongoDBRiverDefinition39.getMongoCollection();
        java.lang.String str47 = mongoDBRiverDefinition39.getINCLUDE_COLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition39.mongoOplogFilter;
        boolean boolean49 = mongoDBRiverDefinition39.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "include_collection" + "'", str47, "include_collection");
        org.junit.Assert.assertNull(basicDBObject48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder0.getscript();
        boolean boolean5 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        int int7 = builder6.getsocketTimeout();
        boolean boolean8 = builder6.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.indexName("credentials");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        builder6.setmongoOplogFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollectionFilter(basicDBObject13);
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        boolean boolean17 = builder0.storeStatistics;
        java.lang.String str18 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("is_mongos");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.indexName("sandbox");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.statisticsIndexName("disable_index_refresh");
        java.lang.String str25 = builder24.mongoAdminPassword;
        java.lang.String str26 = builder24.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "is_mongos" + "'", str25, "is_mongos");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.indexName("credentials");
        java.lang.String str4 = builder3.mongoAdminUser;
        java.lang.String[] strArray33 = new java.lang.String[] { "throttle_size", "sandbox", "type", "skip_initial_import", "script", "bulk_size", "concurrent_bulk_requests", "script.disable_dynamic", "actions", "password", "include_collection", "script.disable_dynamic", "", "drop_collection", "type", "index", "disable_index_refresh", "skip_initial_import", "type", "store_statistics", "bulk", "include_collection", "localhost", "script_type", "credentials", "servers", "localhost", "sandbox" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder3.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoLocalPassword("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.getSIZE_FIELD();
        boolean boolean41 = mongoDBRiverDefinition39.disableIndexRefresh;
        java.lang.String str42 = mongoDBRiverDefinition39.getACTIONS_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoOplogNamespace();
        java.lang.String str44 = mongoDBRiverDefinition39.getUSER_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str46 = mongoDBRiverDefinition39.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "actions" + "'", str42, "actions");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "null.null" + "'", str43, "null.null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "user" + "'", str44, "user");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "localhost" + "'", str46, "localhost");
    }
}

