/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 21:02:16 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.collect.ImmutableMap;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.env.Environment;
import org.elasticsearch.river.RiverName;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.Indexer;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.script.ScriptEngineService;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.watcher.ResourceWatcherService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Indexer_ESTest extends Indexer_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      RiverName riverName0 = null;
      ImmutableSettings immutableSettings0 = (ImmutableSettings)ImmutableSettings.EMPTY;
      assertNotNull(immutableSettings0);
      
      String string0 = "g/I0/&Zpkl";
      String string1 = "Could not query index for _version";
      // Undeclared exception!
      try { 
        ImmutableMap.of(string0, (Object) immutableSettings0, string0, (Object) immutableSettings0, string1, (Object) immutableSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: g/I0/&Zpkl=org.elasticsearch.common.settings.ImmutableSettings@0 and g/I0/&Zpkl=org.elasticsearch.common.settings.ImmutableSettings@0
         //
         verifyException("org.elasticsearch.common.collect.ImmutableMap", e);
      }
  }
}
