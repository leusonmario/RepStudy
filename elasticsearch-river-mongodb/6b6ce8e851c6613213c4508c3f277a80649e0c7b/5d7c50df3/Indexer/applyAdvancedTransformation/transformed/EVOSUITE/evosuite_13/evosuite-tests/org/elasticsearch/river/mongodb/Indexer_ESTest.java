/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 20:13:53 GMT 2021
 */

package org.elasticsearch.river.mongodb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mongodb.DB;
import com.mongodb.DBRef;
import com.mongodb.LazyDBList;
import java.io.EOFException;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;
import org.bson.types.Binary;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.collect.ImmutableSortedMap;
import org.elasticsearch.common.io.stream.BytesStreamInput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.env.Environment;
import org.elasticsearch.node.settings.NodeSettingsService;
import org.elasticsearch.river.RiverName;
import org.elasticsearch.river.RiverSettings;
import org.elasticsearch.river.mongodb.Indexer;
import org.elasticsearch.river.mongodb.MongoDBRiver;
import org.elasticsearch.river.mongodb.MongoDBRiverDefinition;
import org.elasticsearch.river.mongodb.SharedContext;
import org.elasticsearch.river.mongodb.Status;
import org.elasticsearch.script.ScriptEngineService;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.watcher.ResourceWatcherService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Indexer_ESTest extends Indexer_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String string0 = "Snwd2rfjN>";
      String string1 = "7F>Z*xph{<f";
      RiverName riverName0 = new RiverName(string0, string1);
      assertNotNull(riverName0);
      assertEquals("Snwd2rfjN>", riverName0.type());
      assertEquals("7F>Z*xph{<f", riverName0.getName());
      assertEquals("Snwd2rfjN>", riverName0.getType());
      assertEquals("7F>Z*xph{<f", riverName0.name());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte)67;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-56);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)76;
      byteArray0[5] = byte5;
      byte byte6 = (byte)124;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-110);
      byteArray0[7] = byte7;
      boolean boolean0 = false;
      BytesStreamInput bytesStreamInput0 = new BytesStreamInput(byteArray0, boolean0);
      assertNotNull(bytesStreamInput0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, bytesStreamInput0.position());
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)67, (byte) (-56), (byte)0, (byte)76, (byte)124, (byte) (-110)}, byteArray0);
      
      try { 
        ImmutableSettings.readSettingsFromStream(bytesStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.BytesStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      String string0 = "";
      RiverName riverName0 = new RiverName(string0, string0);
      assertNotNull(riverName0);
      assertEquals("", riverName0.type());
      assertEquals("", riverName0.getType());
      assertEquals("", riverName0.getName());
      assertEquals("", riverName0.name());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        ImmutableSettings.readSettingsFromStream(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.settings.ImmutableSettings", e);
      }
  }
}
