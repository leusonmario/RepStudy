import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test3501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        builder0.setadvancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder0.mongoClientOptions;
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.riverIndexName("mongodb-1638820218326");
        builder0.throttleSize = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoAdminPassword("credentials");
        boolean boolean21 = builder20.advancedTransformation;
        builder20.mongoDb = "admin";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3502");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = builder9.getthrottleSize();
        java.lang.String str12 = builder9.getmongoAdminUser();
        java.lang.String str13 = builder9.getriverName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str22 = mongoDBRiverDefinition19.getHOST_FIELD();
        boolean boolean23 = mongoDBRiverDefinition19.isImportAllCollections();
        java.lang.String str24 = mongoDBRiverDefinition19.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "host" + "'", str22, "host");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "size" + "'", str24, "size");
    }

    @Test
    public void test3504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3504");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218424" + "'", str3, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218363" + "'", str4, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test3505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        builder7.scriptType = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.statisticsTypeName("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        boolean boolean15 = builder12.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        builder12.parentTypes = strSet29;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3506");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test3507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str12 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str14 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str15 = mongoDBRiverDefinition1.indexName;
        java.lang.String str16 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test3508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        builder7.setdropCollection(false);
        java.util.Set<java.lang.String> strSet14 = builder7.parentTypes;
        java.util.Set<java.lang.String> strSet15 = builder7.parentTypes;
        java.lang.String str16 = builder7.riverName;
        builder7.setstatisticsIndexName("secondary_read_preference");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "throttle_size" + "'", str16, "throttle_size");
    }

    @Test
    public void test3509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition8.mongoClientOptions;
        boolean boolean10 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test3510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setriverName("hi!");
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.setsocketTimeout(32);
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setskipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test3511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3511");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.apache.lucene.search.Scorer scorer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
    }

    @Test
    public void test3512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3512");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str4 = mongoDBRiverDefinition3.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean5 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition3.getACTIONS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition3.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition3.getMongoLocalPassword();
        java.lang.String str9 = mongoDBRiverDefinition3.getSCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition3.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.common.settings.Settings settings12 = riverSettings11.globalSettings();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(settings12);
    }

    @Test
    public void test3513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getMongoCollection();
        boolean boolean22 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        boolean boolean23 = mongoDBRiverDefinition19.skipInitialImport;
        int int24 = mongoDBRiverDefinition19.getDEFAULT_BULK_ACTIONS();
        java.lang.String str25 = mongoDBRiverDefinition19.getTYPE_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition19.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1000 + "'", int24 == 1000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "type" + "'", str25, "type");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "type" + "'", str26, "type");
    }

    @Test
    public void test3514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str6 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str16 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "socket_timeout" + "'", str16, "socket_timeout");
    }

    @Test
    public void test3516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3516");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings5);
    }

    @Test
    public void test3517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        java.lang.String str10 = builder0.statisticsTypeName;
        int int11 = builder0.socketTimeout;
        java.lang.String str12 = builder0.getscript();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoUseSSL(false);
        builder7.storeStatistics = false;
        java.lang.String str26 = builder7.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoAdminPassword("");
        java.lang.String[] strArray39 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder35.excludeFields = strSet40;
        builder29.setexcludeFields((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder29.mongoSecondaryReadPreference(false);
        boolean boolean46 = builder45.storeStatistics;
        builder45.setmongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        builder49.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder49.importAllCollections(true);
        builder49.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray81 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        builder60.excludeFields = strSet82;
        builder49.includeFields = strSet82;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder45.excludeFields((java.util.Set<java.lang.String>) strSet82);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet82);
        java.lang.String str88 = builder7.getmongoAdminPassword();
        java.util.Set<java.lang.String> strSet89 = builder7.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder0.includeFields(strSet89);
        boolean boolean91 = builder90.skipInitialImport;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        builder2.throttleSize = (byte) 100;
        boolean boolean9 = builder2.storeStatistics;
        builder2.setconnectTimeout((int) '4');
        builder2.mongoAdminUser = "";
        builder2.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition16.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test3520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test3521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3521");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "flush_interval" + "'", str11, "flush_interval");
    }

    @Test
    public void test3522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition19.mongoOplogFilter;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = mongoDBRiverDefinition19.initialTimestamp;
        java.lang.String str26 = mongoDBRiverDefinition19.getSECONDARY_READ_PREFERENCE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter27 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str28 = serializedObjectSupporter27.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter27.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings30 = serializedObjectSupporter27.deserializeObjectRiverSettings5();
        java.lang.String str31 = serializedObjectSupporter27.deserializeObjectString3();
        java.lang.String str32 = serializedObjectSupporter27.deserializeObjectString12();
        java.lang.String str33 = serializedObjectSupporter27.deserializeObjectString16();
        mongoDBRiverDefinition19.serializedObjectSupporter = serializedObjectSupporter27;
        java.lang.String str35 = serializedObjectSupporter27.deserializeObjectString7();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "initial_timestamp" + "'", str23, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "secondary_read_preference" + "'", str26, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertNull(riverSettings29);
        org.junit.Assert.assertNull(riverSettings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb-1638820218264" + "'", str31, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_river" + "'", str32, "_river");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb-1638820218326" + "'", str35, "mongodb-1638820218326");
    }

    @Test
    public void test3523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3523");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218424" + "'", str7, "mongodb-1638820218424");
    }

    @Test
    public void test3524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3524");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore(100.0f);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
    }

    @Test
    public void test3525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder3.mongoServers;
        boolean boolean5 = builder3.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoAdminUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder24.mongoGridFS = true;
        boolean boolean34 = builder24.mongoSSLVerifyCertificate;
        int int35 = builder24.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder36.setmongoOplogFilter(basicDBObject39);
        java.lang.String str41 = builder36.getmongoLocalPassword();
        builder36.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        builder44.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder49.setmongoOplogFilter(basicDBObject52);
        boolean boolean54 = builder49.importAllCollections;
        java.lang.String[] strArray68 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder49.parentTypes = strSet69;
        builder44.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder36.includeFields((java.util.Set<java.lang.String>) strSet69);
        builder24.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder18.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder7.excludeFields((java.util.Set<java.lang.String>) strSet69);
        int int77 = builder76.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test3526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        java.lang.String str5 = builder0.getmongoLocalPassword();
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean10 = builder0.disableIndexRefresh;
        builder0.mongoUseSSL = true;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getBULK_FIELD();
        boolean boolean22 = mongoDBRiverDefinition19.mongoUseSSL;
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getParentTypes();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk" + "'", str21, "bulk");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script_type" + "'", str24, "script_type");
    }

    @Test
    public void test3528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        boolean boolean14 = builder4.advancedTransformation;
        builder4.setriverName("exclude_fields");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3529");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        java.util.Set<java.lang.String> strSet29 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder2.socketTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject32 = builder2.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.connectTimeout(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        builder0.setconnectTimeout((int) '#');
        com.mongodb.BasicDBObject basicDBObject25 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.mongoAdminPassword("");
        java.lang.String[] strArray38 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder34.excludeFields = strSet39;
        builder28.setexcludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet39);
        boolean boolean44 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder0.getmongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(mongoClientOptions45);
    }

    @Test
    public void test3531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3531");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("options");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?options?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3532");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = builder0.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject6 = builder0.mongoOplogFilter;
        java.lang.String str7 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder0.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.indexName("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean12 = builder0.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder4.parentTypes;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test3534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = builder0.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("disable_index_refresh");
        java.lang.String str43 = builder42.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject49 = builder48.mongoCollectionFilter;
        builder42.mongoCollectionFilter = basicDBObject49;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.gettypeName();
        builder52.setmongoDb("concurrent_bulk_requests");
        builder52.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder52.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet60 = builder59.getparentTypes();
        java.lang.String str61 = builder59.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory62 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str66 = mongoDBRiverDefinition65.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str67 = mongoDBRiverDefinition65.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = mongoDBRiverDefinition65.getMongoServers();
        boolean boolean69 = mongoDBRiverDefinition65.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript71 = docScoreNativeScriptFactory62.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        builder59.mongoCollectionFilter = basicDBObject70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder42.mongoOplogFilter(basicDBObject70);
        builder42.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        java.lang.String str79 = mongoDBRiverDefinition78.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str80 = mongoDBRiverDefinition78.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList81 = mongoDBRiverDefinition78.getMongoServers();
        boolean boolean82 = mongoDBRiverDefinition78.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition78.getMongoCollectionFilter();
        builder42.mongoCollectionFilter = basicDBObject83;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.mongoOplogFilter(basicDBObject83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder0.indexName("advanced_transformation");
        builder87.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(serializedObjectSupporter37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disable_index_refresh" + "'", str66, "disable_index_refresh");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(executableScript71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "disable_index_refresh" + "'", str79, "disable_index_refresh");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(serverAddressList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        int int8 = mongoDBRiverDefinition2.getSocketTimeout();
        boolean boolean9 = mongoDBRiverDefinition2.disableIndexRefresh;
        boolean boolean10 = mongoDBRiverDefinition2.storeStatistics;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = mongoDBRiverDefinition2.serializedObjectSupporter;
        boolean boolean12 = mongoDBRiverDefinition2.getskipInitialImport();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3536");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.riverIndexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.mongoAdminPassword("");
        java.lang.String[] strArray47 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder43.excludeFields = strSet48;
        com.mongodb.BasicDBObject basicDBObject51 = builder43.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder35.mongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder34.mongoCollectionFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.mongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.throttleSize((int) 'a');
        builder56.typeName = "";
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.getmongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(mongoClientOptions59);
    }

    @Test
    public void test3537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        boolean boolean11 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("mongodb-1638820218363");
        builder13.settypeName("script_type");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter16 = builder13.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
    }

    @Test
    public void test3538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.mongoAdminUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoUseSSL(true);
        builder12.mongoSecondaryReadPreference = false;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder12.setmongoClientOptions(mongoClientOptions15);
        com.mongodb.BasicDBObject basicDBObject17 = builder12.getmongoOplogFilter();
        java.util.Set<java.lang.String> strSet18 = builder12.parentTypes;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test3539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        boolean boolean11 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str12 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
    }

    @Test
    public void test3540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3540");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setriverName("hi!");
        java.lang.String str4 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        int int7 = builder6.connectTimeout;
        builder6.mongoLocalUser = "gridfs";
        boolean boolean10 = builder6.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3541");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        builder7.setincludeCollection("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition12.mongoOplogFilter;
        java.lang.String str14 = mongoDBRiverDefinition12.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test3542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str8 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "credentials" + "'", str8, "credentials");
    }

    @Test
    public void test3543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        builder0.mongoLocalUser = "mongodb-1638820218387";
        java.util.Set<java.lang.String> strSet22 = builder0.excludeFields;
        boolean boolean23 = builder0.advancedTransformation;
        java.lang.String str24 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test3544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        boolean boolean23 = builder18.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject24 = builder18.getmongoOplogFilter();
        builder18.setdropCollection(false);
        boolean boolean27 = builder18.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3545");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test3546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3546");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition4.getSTORE_STATISTICS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean11 = mongoDBRiverDefinition4.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        builder0.setadvancedTransformation(true);
        builder0.setadvancedTransformation(true);
        java.lang.String str41 = builder0.getmongoCollection();
        com.mongodb.BasicDBObject basicDBObject42 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(basicDBObject42);
    }

    @Test
    public void test3548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3548");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore((float) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        builder19.setmongoCollection("name");
        java.lang.String str26 = builder19.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.gettypeName();
        builder27.setmongoDb("concurrent_bulk_requests");
        builder27.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        boolean boolean39 = mongoDBRiverDefinition38.storeStatistics;
        boolean boolean40 = mongoDBRiverDefinition38.isDisableIndexRefresh();
        java.lang.String str41 = mongoDBRiverDefinition38.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet42 = mongoDBRiverDefinition38.getIncludeFields();
        java.lang.String str43 = mongoDBRiverDefinition38.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition38.includeCollection;
        java.lang.String str45 = mongoDBRiverDefinition38.getMongoAdminPassword();
        java.lang.String str46 = mongoDBRiverDefinition38.getDROP_COLLECTION_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition38.mongoAdminPassword;
        java.lang.String str48 = mongoDBRiverDefinition38.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject49 = mongoDBRiverDefinition38.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder36.mongoOplogFilter(basicDBObject49);
        builder19.setmongoOplogFilter(basicDBObject49);
        java.lang.String str52 = builder19.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder19.indexName("password");
        java.lang.String str55 = builder19.mongoDb;
        builder19.setmongoLocalUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        boolean boolean60 = mongoDBRiverDefinition59.storeStatistics;
        java.util.Set<java.lang.String> strSet61 = mongoDBRiverDefinition59.getParentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList62 = mongoDBRiverDefinition59.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder19.mongoServers(serverAddressList62);
        java.lang.Object obj64 = docScoreSearchScript0.unwrap((java.lang.Object) serverAddressList62);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "script" + "'", str43, "script");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "drop_collection" + "'", str46, "drop_collection");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(serverAddressList62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "[]");
    }

    @Test
    public void test3549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getMongoCollection();
        boolean boolean22 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        boolean boolean23 = mongoDBRiverDefinition19.skipInitialImport;
        java.lang.String str24 = mongoDBRiverDefinition19.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ssl_verify_certificate" + "'", str24, "ssl_verify_certificate");
    }

    @Test
    public void test3550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString11();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter5;
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter5.deserializeObjectRiverSettings8();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString16();
        java.lang.String str11 = serializedObjectSupporter5.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        java.lang.String str13 = serializedObjectSupporter5.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter5.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter5.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter5.deserializeObjectRiverSettings7();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218387" + "'", str7, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218449" + "'", str11, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertNull(riverSettings16);
    }

    @Test
    public void test3551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        boolean boolean11 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoAdminUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.gettypeName();
        builder21.setmongoDb("concurrent_bulk_requests");
        builder21.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet29 = builder28.getparentTypes();
        java.lang.String str30 = builder28.getindexName();
        builder28.setindexName("local");
        builder28.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.importAllCollections(true);
        java.lang.String str42 = builder41.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder41.mongoCollectionFilter(basicDBObject48);
        builder28.setmongoCollectionFilter(basicDBObject48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder20.mongoOplogFilter(basicDBObject48);
        builder0.setmongoCollectionFilter(basicDBObject48);
        builder0.setmongoCollection("include_collection");
        int int55 = builder0.connectTimeout;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test3552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        java.lang.String str5 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "secondary_read_preference" + "'", str5, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
    }

    @Test
    public void test3553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        boolean boolean6 = builder4.getadvancedTransformation();
        boolean boolean7 = builder4.storeStatistics;
        java.lang.String str8 = builder4.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        boolean boolean12 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3555");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.statisticsTypeName = "secondary_read_preference";
        builder4.setindexName("secondary_read_preference");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3556");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.Set<java.lang.String> strSet9 = builder2.includeFields;
        java.lang.String str10 = builder2.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.statisticsTypeName("hi!");
        boolean boolean15 = builder14.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disable_index_refresh" + "'", str10, "disable_index_refresh");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        boolean boolean37 = mongoDBRiverDefinition36.getmongoSSLVerifyCertificate();
        java.lang.String str38 = mongoDBRiverDefinition36.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int39 = mongoDBRiverDefinition36.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "script" + "'", str38, "script");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1000 + "'", int39 == 1000);
    }

    @Test
    public void test3558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        int int8 = mongoDBRiverDefinition2.throttleSize;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.getIncludeFields();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test3559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition4.getSTORE_STATISTICS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoCollection();
        java.lang.String str11 = mongoDBRiverDefinition4.scriptType;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition4.getMongoCollectionFilter();
        java.lang.String str13 = mongoDBRiverDefinition4.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
    }

    @Test
    public void test3560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getDROP_COLLECTION_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition39.getScriptType();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "drop_collection" + "'", str42, "drop_collection");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test3561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition4.getINDEX_OBJECT();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition4.mongoCollectionFilter;
        java.lang.String str11 = mongoDBRiverDefinition4.mongoLocalUser;
        int int12 = mongoDBRiverDefinition4.socketTimeout;
        java.lang.String str13 = mongoDBRiverDefinition4.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition4.getIncludeCollection();
        java.lang.String str15 = mongoDBRiverDefinition4.getMongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index" + "'", str9, "index");
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "import_all_collections" + "'", str13, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test3562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject33 = builder0.mongoCollectionFilter;
        builder0.setindexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.mongoLocalUser("null.null");
        boolean boolean38 = builder37.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.skipInitialImport(false);
        builder37.dropCollection = false;
        boolean boolean43 = builder37.mongoUseSSL;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test3563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter3 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter3.deserializeObjectRiverSettings4();
        java.lang.String str5 = serializedObjectSupporter3.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter3.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter3.deserializeObjectRiverSettings3();
        builder0.serializedObjectSupporter = serializedObjectSupporter3;
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter3.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter3.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter3.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
    }

    @Test
    public void test3564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        builder4.riverIndexName = "include_fields";
        builder4.setmongoDb("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoSSLVerifyCertificate(true);
        java.lang.String str11 = builder4.getincludeCollection();
        builder4.storeStatistics = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3565");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        int int11 = mongoDBRiverDefinition1.socketTimeout;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter12.deserializeObjectRiverSettings4();
        java.lang.String str14 = serializedObjectSupporter12.deserializeObjectString11();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter12.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter12.deserializeObjectRiverSettings8();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString12();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString13();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter12;
        org.elasticsearch.river.RiverSettings riverSettings21 = serializedObjectSupporter12.deserializeObjectRiverSettings1();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218387" + "'", str14, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218363" + "'", str15, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_river" + "'", str18, "_river");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218408" + "'", str19, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings21);
    }

    @Test
    public void test3566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder18.build();
        int int31 = builder18.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str33 = mongoDBRiverDefinition32.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject34 = mongoDBRiverDefinition32.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "import_all_collections" + "'", str33, "import_all_collections");
        org.junit.Assert.assertNull(basicDBObject34);
    }

    @Test
    public void test3567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        builder7.script = "collection";
        boolean boolean10 = builder7.mongoUseSSL;
        boolean boolean11 = builder7.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        int int13 = mongoDBRiverDefinition12.socketTimeout;
        java.lang.String str14 = mongoDBRiverDefinition12.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests" + "'", str14, "concurrent_bulk_requests");
    }

    @Test
    public void test3568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "password" + "'", str3, "password");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1000 + "'", int6 == 1000);
    }

    @Test
    public void test3569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3569");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820217755" + "'", str9, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820217755" + "'", str10, "mongodb-1638820217755");
    }

    @Test
    public void test3570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder6.build();
        builder6.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int8 = mongoDBRiverDefinition7.getConnectTimeout();
        java.lang.String str9 = mongoDBRiverDefinition7.getIndexName();
        java.lang.String str10 = mongoDBRiverDefinition7.riverName;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3572");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getimportAllCollections();
        boolean boolean10 = mongoDBRiverDefinition2.disableIndexRefresh;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        builder6.setmongoAdminUser("skip_initial_import");
        builder6.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        builder15.setsocketTimeout((int) '4');
        builder15.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = builder15.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.gettypeName();
        builder21.setmongoDb("concurrent_bulk_requests");
        builder21.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        com.mongodb.ServerAddress[] serverAddressArray32 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList33 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList33, serverAddressArray32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        builder15.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder6.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        builder6.settypeName("mongodb-1638820218408");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(serializedObjectSupporter20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(serverAddressArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test3574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3574");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getTypeName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "password" + "'", str3, "password");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test3575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setmongoLocalUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoAdminPassword("");
        java.lang.String[] strArray21 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder17.excludeFields = strSet22;
        builder11.setexcludeFields((java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder11.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.dropCollection(true);
        builder27.setsocketTimeout(27017);
        builder27.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet36 = builder27.getexcludeFields();
        builder6.setexcludeFields(strSet36);
        builder6.setadvancedTransformation(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test3576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition19.getMongoOplogFilter();
        java.lang.String str24 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.getmongoUseSSL();
        boolean boolean26 = mongoDBRiverDefinition19.skipInitialImport;
        java.lang.String str27 = mongoDBRiverDefinition19.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disable_index_refresh" + "'", str22, "disable_index_refresh");
        org.junit.Assert.assertNull(basicDBObject23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "admin" + "'", str24, "admin");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test3577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.getParentTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test3578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3578");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        com.mongodb.BasicDBObject basicDBObject5 = mongoDBRiverDefinition2.mongoOplogFilter;
        java.lang.String str6 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
    }

    @Test
    public void test3579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings9();
        java.lang.String str18 = serializedObjectSupporter13.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter13.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_river" + "'", str18, "_river");
        org.junit.Assert.assertNull(riverSettings19);
    }

    @Test
    public void test3580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3580");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
    }

    @Test
    public void test3581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3581");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize(0);
        builder2.statisticsIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.advancedTransformation(true);
        java.lang.String str13 = builder9.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean6 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean7 = mongoDBRiverDefinition1.getskipInitialImport();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str9 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
    }

    @Test
    public void test3584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.getmongoServers();
        builder2.setthrottleSize((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoLocalPassword("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder18.excludeFields = strSet23;
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder12.mongoUseSSL(false);
        java.lang.String str29 = builder28.getindexName();
        boolean boolean30 = builder28.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        builder28.mongoClientOptions = mongoClientOptions31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        java.util.Set<java.lang.String> strSet37 = builder36.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.typeName("port");
        builder36.mongoSSLVerifyCertificate = true;
        com.mongodb.BasicDBObject basicDBObject42 = builder36.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder28.mongoCollectionFilter(basicDBObject42);
        builder9.setmongoOplogFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder9.includeCollection("actions");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter47 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str48 = serializedObjectSupporter47.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings49 = serializedObjectSupporter47.deserializeObjectRiverSettings1();
        java.lang.String str50 = serializedObjectSupporter47.deserializeObjectString5();
        builder46.serializedObjectSupporter = serializedObjectSupporter47;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "mongodb-1638820218449" + "'", str48, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mongodb-1638820218299" + "'", str50, "mongodb-1638820218299");
    }

    @Test
    public void test3585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.riverName;
        java.lang.String str13 = mongoDBRiverDefinition10.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "skip_initial_import" + "'", str13, "skip_initial_import");
    }

    @Test
    public void test3586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str6 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition1.advancedTransformation;
        java.lang.String str9 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
    }

    @Test
    public void test3587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.getIndexName();
        int int14 = mongoDBRiverDefinition10.connectTimeout;
        boolean boolean15 = mongoDBRiverDefinition10.isMongoSSLVerifyCertificate();
        java.lang.String str16 = mongoDBRiverDefinition10.getMongoOplogNamespace();
        org.elasticsearch.common.unit.TimeValue timeValue17 = mongoDBRiverDefinition10.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_bulk_requests.null" + "'", str16, "concurrent_bulk_requests.null");
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test3588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3588");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test3589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3589");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        java.lang.String str37 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str39 = mongoDBRiverDefinition38.getSOCKET_TIMEOUT();
        int int40 = mongoDBRiverDefinition38.throttleSize;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "socket_timeout" + "'", str39, "socket_timeout");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str13 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        int int14 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "collection" + "'", str13, "collection");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "socket_timeout" + "'", str15, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "connect_timeout" + "'", str17, "connect_timeout");
    }

    @Test
    public void test3591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        java.lang.String str11 = builder3.getstatisticsIndexName();
        boolean boolean12 = builder3.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str15 = mongoDBRiverDefinition14.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "filter" + "'", str15, "filter");
    }

    @Test
    public void test3592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.indexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = null;
        builder4.mongoServers = serverAddressList6;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = builder4.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
    }

    @Test
    public void test3593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3593");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder2.mongoDb("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        int int34 = builder33.getsocketTimeout();
        builder33.includeCollection = "mongodb-1638820218299";
        java.util.Set<java.lang.String> strSet37 = builder33.excludeFields;
        boolean boolean38 = builder33.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder33.mongoAdminPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        builder46.mongoLocalUser = "store_statistics";
        int int50 = builder46.connectTimeout;
        java.util.Set<java.lang.String> strSet51 = builder46.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder46.riverName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.mongoAdminPassword("");
        java.lang.String[] strArray66 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        builder62.excludeFields = strSet67;
        builder56.setexcludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder56.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        boolean boolean74 = builder72.dropCollection;
        boolean boolean75 = builder72.storeStatistics;
        java.util.Set<java.lang.String> strSet76 = builder72.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder46.includeFields(strSet76);
        builder43.setparentTypes(strSet76);
        builder33.setparentTypes(strSet76);
        builder30.setincludeFields(strSet76);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test3594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        boolean boolean25 = builder23.dropCollection;
        boolean boolean26 = builder23.storeStatistics;
        java.util.Set<java.lang.String> strSet27 = builder23.excludeFields;
        builder2.setexcludeFields(strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoAdminPassword("");
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder37.excludeFields = strSet42;
        builder31.setexcludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder31.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.dropCollection(true);
        builder47.setsocketTimeout(27017);
        builder47.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder47.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet56 = builder47.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder2.excludeFields(strSet56);
        java.lang.String str58 = builder2.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder2.typeName("_river");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test3595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3595");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.storeStatistics;
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition1.getMongoServers();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressList7);
    }

    @Test
    public void test3596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3596");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        java.lang.String str5 = builder0.getmongoLocalPassword();
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder13.importAllCollections;
        java.lang.String[] strArray32 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder13.parentTypes = strSet33;
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.includeFields((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.riverName("db");
        builder39.setdisableIndexRefresh(false);
        java.lang.String str42 = builder39.getincludeCollection();
        java.lang.String str43 = builder39.indexName;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test3597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3597");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.mongoAdminPassword("");
        java.lang.String[] strArray19 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder15.excludeFields = strSet20;
        builder9.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder9.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        boolean boolean27 = builder25.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject35 = builder34.getmongoCollectionFilter();
        builder25.setmongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder6.mongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject35);
        org.elasticsearch.script.ScriptService scriptService39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("filter", "mongodb-1638820218264", riverSettings38, scriptService39);
        java.lang.String str41 = mongoDBRiverDefinition40.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test3598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        boolean boolean7 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getScript();
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.getMongoClientOptions();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test3599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        boolean boolean4 = builder0.getmongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        builder0.mongoClientOptions = mongoClientOptions5;
        java.util.Set<java.lang.String> strSet7 = builder0.getincludeFields();
        java.lang.String str8 = builder0.getmongoDb();
        builder0.disableIndexRefresh = false;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.getParentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str5 = mongoDBRiverDefinition1.scriptType;
        boolean boolean6 = mongoDBRiverDefinition1.isMongoGridFS();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test3601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3601");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        docScoreSearchScript0.setNextScore((float) 10L);
        java.lang.Object obj18 = null;
        docScoreSearchScript0.setNextVar("parent_types", obj18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = builder23.getmongoServers();
        docScoreSearchScript0.setNextVar("servers", (java.lang.Object) serverAddressList24);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serverAddressList24);
    }

    @Test
    public void test3602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition19.getMongoOplogFilter();
        int int24 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        java.lang.String str25 = mongoDBRiverDefinition19.getPARENT_TYPES_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition19.getSERVERS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disable_index_refresh" + "'", str22, "disable_index_refresh");
        org.junit.Assert.assertNull(basicDBObject23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "parent_types" + "'", str25, "parent_types");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "servers" + "'", str26, "servers");
    }

    @Test
    public void test3603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoGridFS;
        boolean boolean9 = mongoDBRiverDefinition2.isSkipInitialImport();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "servers" + "'", str7, "servers");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        builder13.settypeName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoSSLVerifyCertificate(true);
        boolean boolean18 = builder17.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.String str10 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str13 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "local" + "'", str11, "local");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
    }

    @Test
    public void test3606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3606");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet8 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        boolean boolean10 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean11 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str12 = mongoDBRiverDefinition9.indexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3607");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str7 = mongoDBRiverDefinition6.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition6.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition6.getMongoServers();
        boolean boolean10 = mongoDBRiverDefinition6.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = riverSettings13.settings();
        org.elasticsearch.script.ScriptService scriptService15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("secondary_read_preference", "disable_index_refresh", riverSettings13, scriptService15);
        java.lang.String str17 = mongoDBRiverDefinition16.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "skip_initial_import" + "'", str17, "skip_initial_import");
    }

    @Test
    public void test3608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        java.util.Set<java.lang.String> strSet29 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder2.socketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.mongoAdminPassword("");
        java.lang.String[] strArray44 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder40.excludeFields = strSet45;
        builder34.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder34.mongoSecondaryReadPreference(false);
        boolean boolean51 = builder50.storeStatistics;
        builder50.setmongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        builder54.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder54.importAllCollections(true);
        builder54.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray86 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        builder65.excludeFields = strSet87;
        builder54.includeFields = strSet87;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder50.excludeFields((java.util.Set<java.lang.String>) strSet87);
        java.util.Set<java.lang.String> strSet92 = builder91.excludeFields;
        builder31.setexcludeFields(strSet92);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test3609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoClientOptions(mongoClientOptions5);
        boolean boolean7 = builder6.mongoSSLVerifyCertificate;
        builder6.mongoUseSSL = false;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3610");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder15.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean23 = mongoDBRiverDefinition22.storeStatistics;
        boolean boolean24 = mongoDBRiverDefinition22.isDisableIndexRefresh();
        java.lang.String str25 = mongoDBRiverDefinition22.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet26 = mongoDBRiverDefinition22.getIncludeFields();
        java.lang.String str27 = mongoDBRiverDefinition22.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition22.includeCollection;
        java.lang.String str29 = mongoDBRiverDefinition22.getMongoAdminPassword();
        java.lang.String str30 = mongoDBRiverDefinition22.getDROP_COLLECTION_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition22.mongoAdminPassword;
        java.lang.String str32 = mongoDBRiverDefinition22.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition22.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder15.mongoOplogFilter(basicDBObject33);
        builder5.mongoOplogFilter = basicDBObject33;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder5.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.socketTimeout = 0;
        builder5.statisticsTypeName = "_river";
        java.lang.String str43 = builder5.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "script" + "'", str27, "script");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "drop_collection" + "'", str30, "drop_collection");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "_river" + "'", str43, "_river");
    }

    @Test
    public void test3611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3611");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        boolean boolean11 = builder4.mongoUseSSL;
        java.lang.String str12 = builder4.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        java.lang.String str20 = builder15.getmongoLocalPassword();
        builder15.socketTimeout = (byte) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoAdminPassword("");
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder31.excludeFields = strSet36;
        builder25.setexcludeFields((java.util.Set<java.lang.String>) strSet36);
        builder15.includeFields = strSet36;
        builder14.includeFields = strSet36;
        boolean boolean42 = builder14.importAllCollections;
        builder14.importAllCollections = false;
        java.lang.String str45 = builder14.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test3612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index" + "'", str7, "index");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test3613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str6 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean8 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str10 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str11 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        java.lang.String str8 = builder2.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoDb("servers");
        java.util.Set<java.lang.String> strSet11 = builder2.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.mongoLocalPassword("mongodb-1638820218363");
        builder2.storeStatistics = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.riverIndexName;
        java.lang.String str14 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition10.getParentTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "connect_timeout" + "'", str14, "connect_timeout");
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test3616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3616");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean4 = mongoDBRiverDefinition1.isDropCollection();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "socket_timeout" + "'", str2, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "include_fields" + "'", str3, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3617");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.importAllCollections;
        builder3.setmongoGridFS(false);
        int int11 = builder3.throttleSize;
        java.lang.String str12 = builder3.getscript();
        builder3.setadvancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder3.mongoClientOptions;
        java.lang.String str16 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollection("concurrent_bulk_requests.null");
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet26 = builder23.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("mongodb-1638820218387");
        java.lang.String str33 = builder32.getmongoLocalPassword();
        boolean boolean34 = builder32.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder38.excludeFields = strSet43;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = builder38.initialTimestamp;
        boolean boolean47 = builder38.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter48 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings49 = serializedObjectSupporter48.deserializeObjectRiverSettings4();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString16();
        builder38.serializedObjectSupporter = serializedObjectSupporter48;
        org.elasticsearch.river.RiverSettings riverSettings52 = serializedObjectSupporter48.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings53 = serializedObjectSupporter48.deserializeObjectRiverSettings4();
        builder32.serializedObjectSupporter = serializedObjectSupporter48;
        java.lang.String str55 = serializedObjectSupporter48.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings56 = serializedObjectSupporter48.deserializeObjectRiverSettings2();
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) serializedObjectSupporter48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.gettypeName();
        builder59.setmongoDb("concurrent_bulk_requests");
        builder59.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder59.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet67 = builder66.getparentTypes();
        java.lang.String str68 = builder66.getindexName();
        builder66.setindexName("local");
        builder66.setdropCollection(false);
        java.util.Set<java.lang.String> strSet73 = builder66.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder66.script("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.dropCollection(false);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder75);
        // The following exception was thrown during execution in test generation
        try {
            float float79 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(riverSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "_river" + "'", str50, "_river");
        org.junit.Assert.assertNull(riverSettings52);
        org.junit.Assert.assertNull(riverSettings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_river" + "'", str55, "_river");
        org.junit.Assert.assertNull(riverSettings56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test3618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3618");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.mongoLocalUser;
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str13 = mongoDBRiverDefinition2.mongoCollection;
        java.lang.String str14 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str15 = mongoDBRiverDefinition2.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        builder0.mongoLocalPassword = "concurrent_bulk_requests";
        boolean boolean10 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("local");
        java.lang.String str16 = builder0.getriverName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoCollection;
        int int8 = mongoDBRiverDefinition2.connectTimeout;
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_bulk_requests" + "'", str9, "concurrent_bulk_requests");
    }

    @Test
    public void test3621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition1.indexName;
        java.lang.String str12 = mongoDBRiverDefinition1.typeName;
        boolean boolean13 = mongoDBRiverDefinition1.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3622");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(true);
        java.lang.String str5 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition6.mongoCollectionFilter;
        java.lang.String str8 = mongoDBRiverDefinition6.typeName;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3623");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.typeName("mongodb-1638820218449");
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder10.mongoServers;
        builder6.setmongoServers(serverAddressList11);
        builder6.mongoDb = "filter";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(serverAddressList11);
    }

    @Test
    public void test3624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = builder5.serializedObjectSupporter;
        builder5.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
    }

    @Test
    public void test3625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3625");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean11 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str12 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str14 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getSERVERS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "servers" + "'", str7, "servers");
    }

    @Test
    public void test3627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3627");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
    }

    @Test
    public void test3628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setmongoLocalUser("servers");
        builder6.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.indexName("collection");
        builder14.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        boolean boolean23 = builder18.mongoUseSSL;
        builder18.setmongoGridFS(false);
        boolean boolean26 = builder18.getmongoUseSSL();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder18.initialTimestamp;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardTimestamp27);
    }

    @Test
    public void test3630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3630");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str22 = mongoDBRiverDefinition19.getHOST_FIELD();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.includeFields;
        boolean boolean24 = mongoDBRiverDefinition19.isImportAllCollections();
        boolean boolean25 = mongoDBRiverDefinition19.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "host" + "'", str22, "host");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition7.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition7.getMongoAdminUser();
        boolean boolean10 = mongoDBRiverDefinition7.getimportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3632");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter9.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter9.deserializeObjectRiverSettings9();
        java.lang.String str12 = serializedObjectSupporter9.deserializeObjectString2();
        builder6.serializedObjectSupporter = serializedObjectSupporter9;
        builder6.typeName = "skip_initial_import";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
    }

    @Test
    public void test3633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        builder0.mongoAdminPassword = "disable_index_refresh";
        builder0.setmongoSecondaryReadPreference(true);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder0.mongoClientOptions;
        java.lang.String str29 = builder0.script;
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean33 = builder0.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3634");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        java.lang.String str8 = builder0.statisticsTypeName;
        java.lang.String str9 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoCollection("mongodb-1638820218424");
        builder11.setimportAllCollections(true);
        builder11.setscriptType("flush_interval");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3635");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.gettypeName();
        builder14.setmongoDb("concurrent_bulk_requests");
        builder14.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet22 = builder21.getparentTypes();
        java.lang.String str23 = builder21.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str28 = mongoDBRiverDefinition27.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition27.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition27.getMongoServers();
        boolean boolean31 = mongoDBRiverDefinition27.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder21.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder4.mongoOplogFilter(basicDBObject32);
        java.util.List<com.mongodb.ServerAddress> serverAddressList36 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder37.setmongoOplogFilter(basicDBObject40);
        java.lang.String str42 = builder37.getmongoLocalPassword();
        builder37.socketTimeout = (byte) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.mongoAdminPassword("");
        java.lang.String[] strArray57 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder53.excludeFields = strSet58;
        builder47.setexcludeFields((java.util.Set<java.lang.String>) strSet58);
        builder37.includeFields = strSet58;
        java.util.Set<java.lang.String> strSet63 = builder37.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder4.excludeFields(strSet63);
        java.lang.String str65 = builder4.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disable_index_refresh" + "'", str28, "disable_index_refresh");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(serverAddressList36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test3636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.mongoDb;
        java.lang.String str8 = mongoDBRiverDefinition6.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition6.getmongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition6.parentTypes;
        int int11 = mongoDBRiverDefinition6.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test3637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3637");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str5 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "flush_interval" + "'", str5, "flush_interval");
    }

    @Test
    public void test3638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int3 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean4 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition2.getHOST_FIELD();
        int int6 = mongoDBRiverDefinition2.getConnectTimeout();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "host" + "'", str5, "host");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test3639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3639");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.mongoOplogFilter;
        builder6.setindexName("script");
        builder6.mongoAdminPassword = "size";
        java.lang.String str12 = builder6.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3640");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean10 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str11 = mongoDBRiverDefinition1.script;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3641");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test3642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSSLVerifyCertificate(false);
        builder0.setincludeCollection("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str17 = mongoDBRiverDefinition16.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition16.getMongoServers();
        builder0.mongoServers = serverAddressList18;
        java.util.Set<java.lang.String> strSet20 = builder0.parentTypes;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disable_index_refresh" + "'", str17, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test3643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoAdminUser();
        java.lang.String str10 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3644");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218449" + "'", str6, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test3645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3645");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean11 = mongoDBRiverDefinition1.disableIndexRefresh;
        java.lang.String str12 = mongoDBRiverDefinition1.getFILTER_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.getmongoGridFS();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter14.deserializeObjectRiverSettings4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter14.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter14.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter14.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter14.deserializeObjectRiverSettings5();
        java.lang.String str21 = serializedObjectSupporter14.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter14.deserializeObjectRiverSettings6();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter14;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218387" + "'", str16, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertNull(riverSettings18);
        org.junit.Assert.assertNull(riverSettings19);
        org.junit.Assert.assertNull(riverSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218449" + "'", str21, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings22);
    }

    @Test
    public void test3646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean11 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        builder7.setscript("socket_timeout");
        java.util.Set<java.lang.String> strSet14 = builder7.getincludeFields();
        builder7.mongoLocalUser = "mongodb-1638820218449";
        builder7.storeStatistics = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test3648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3648");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        boolean boolean4 = mongoDBRiverDefinition3.storeStatistics;
        java.lang.String str5 = mongoDBRiverDefinition3.getTypeName();
        java.lang.String str6 = mongoDBRiverDefinition3.getIndexName();
        boolean boolean7 = mongoDBRiverDefinition3.getmongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition3.getSOCKET_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition3.getADMIN_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition3.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test3649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.setriverName("skip_initial_import");
        com.mongodb.BasicDBObject basicDBObject16 = builder4.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition17.getMongoCollectionFilter();
        java.lang.String str19 = mongoDBRiverDefinition17.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition17.mongoServers;
        java.lang.String str21 = mongoDBRiverDefinition17.getMongoAdminUser();
        java.lang.String str22 = mongoDBRiverDefinition17.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "type" + "'", str22, "type");
    }

    @Test
    public void test3650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3650");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        builder0.skipInitialImport = true;
    }

    @Test
    public void test3651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder2.mongoClientOptions = mongoClientOptions8;
        builder2.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.mongoUseSSL(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript14 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoAdminPassword("");
        java.lang.String[] strArray23 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder19.excludeFields = strSet24;
        java.lang.String str27 = builder19.indexName;
        docScoreSearchScript14.setNextVar("actions", (java.lang.Object) builder19);
        java.lang.String str29 = builder19.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList35 = builder32.getmongoServers();
        builder32.setthrottleSize((int) (byte) 10);
        java.util.Set<java.lang.String> strSet38 = builder32.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder32.mongoClientOptions(mongoClientOptions39);
        java.lang.String[] strArray53 = new java.lang.String[] { "mongodb-1638820218264", "mongodb-1638820218449", "db", "credentials", "localhost", "user", "secondary_read_preference", "local", "options", "options", "include_collection", "advanced_transformation" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder32.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder19.includeFields((java.util.Set<java.lang.String>) strSet54);
        builder2.includeFields = strSet54;
        builder2.setindexName("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter61 = builder2.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder2.mongoSecondaryReadPreference(false);
        builder2.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(serverAddressList35);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(serializedObjectSupporter61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test3652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.getUSER_FIELD();
        int int7 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str10 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str11 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition2.mongoServers;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondary_read_preference" + "'", str11, "secondary_read_preference");
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test3653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3653");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) 8);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3654");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        java.util.Set<java.lang.String> strSet4 = builder2.excludeFields;
        int int5 = builder2.connectTimeout;
        builder2.setimportAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3655");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        boolean boolean25 = builder23.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoCollectionFilter();
        builder23.setmongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder4.mongoCollectionFilter(basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript36 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoClientOptions(mongoClientOptions38);
        java.util.Set<java.lang.String> strSet40 = builder39.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder39.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet45 = builder39.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = builder39.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = builder39.build();
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition47.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executableScript36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition46);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
    }

    @Test
    public void test3656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int3 = mongoDBRiverDefinition2.getConnectTimeout();
        int int4 = mongoDBRiverDefinition2.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str6 = mongoDBRiverDefinition2.includeCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test3657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition4.getINDEX_OBJECT();
        com.mongodb.BasicDBObject basicDBObject10 = mongoDBRiverDefinition4.mongoCollectionFilter;
        java.lang.String str11 = mongoDBRiverDefinition4.mongoCollection;
        java.lang.String str12 = mongoDBRiverDefinition4.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index" + "'", str9, "index");
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "flush_interval" + "'", str12, "flush_interval");
    }

    @Test
    public void test3658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3658");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "skip_initial_import" + "'", str4, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.lang.String str12 = builder11.getmongoLocalPassword();
        boolean boolean13 = builder11.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoAdminPassword("");
        java.lang.String[] strArray21 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        builder17.excludeFields = strSet22;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder17.initialTimestamp;
        boolean boolean26 = builder17.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter27 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings28 = serializedObjectSupporter27.deserializeObjectRiverSettings4();
        java.lang.String str29 = serializedObjectSupporter27.deserializeObjectString16();
        builder17.serializedObjectSupporter = serializedObjectSupporter27;
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter27.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings32 = serializedObjectSupporter27.deserializeObjectRiverSettings4();
        builder11.serializedObjectSupporter = serializedObjectSupporter27;
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter27.deserializeObjectRiverSettings7();
        java.lang.String str35 = serializedObjectSupporter27.deserializeObjectString17();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(riverSettings28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_river" + "'", str29, "_river");
        org.junit.Assert.assertNull(riverSettings31);
        org.junit.Assert.assertNull(riverSettings32);
        org.junit.Assert.assertNull(riverSettings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb-1638820218449" + "'", str35, "mongodb-1638820218449");
    }

    @Test
    public void test3661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3661");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str12 = mongoDBRiverDefinition11.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3662");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str20 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str22 = mongoDBRiverDefinition19.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "concurrent_requests" + "'", str22, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "flush_interval" + "'", str23, "flush_interval");
    }

    @Test
    public void test3663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str5 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str6 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition2.getIncludeFields();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "credentials" + "'", str8, "credentials");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test3664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str7 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition2.advancedTransformation;
        boolean boolean9 = mongoDBRiverDefinition2.getmongoGridFS();
        boolean boolean10 = mongoDBRiverDefinition2.isDropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.typeName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter22 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter22.deserializeObjectRiverSettings4();
        java.lang.String str24 = serializedObjectSupporter22.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter22.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings26 = serializedObjectSupporter22.deserializeObjectRiverSettings9();
        java.lang.String str27 = serializedObjectSupporter22.deserializeObjectString1();
        mongoDBRiverDefinition19.serializedObjectSupporter = serializedObjectSupporter22;
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter22.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings30 = serializedObjectSupporter22.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(riverSettings23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb-1638820218387" + "'", str24, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings25);
        org.junit.Assert.assertNull(riverSettings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820217755" + "'", str27, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings29);
        org.junit.Assert.assertNull(riverSettings30);
    }

    @Test
    public void test3666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3666");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218449" + "'", str5, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertNull(riverSettings10);
    }

    @Test
    public void test3667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str5 = builder4.gettypeName();
        builder4.setmongoDb("concurrent_bulk_requests");
        builder4.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet12 = builder11.getparentTypes();
        builder11.setconnectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = builder26.getmongoServers();
        builder11.setmongoServers(serverAddressList27);
        builder0.mongoServers = serverAddressList27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(serverAddressList27);
    }

    @Test
    public void test3668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder9.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoServers(serverAddressList12);
        java.lang.String str14 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.script("concurrent_bulk_requests.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.script;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_bulk_requests.null" + "'", str18, "concurrent_bulk_requests.null");
    }

    @Test
    public void test3669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3669");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNull(riverSettings5);
    }

    @Test
    public void test3670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3670");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
    }

    @Test
    public void test3671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3671");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("localhost", "filter");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?filter? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition4.mongoCollectionFilter;
        java.lang.String str8 = mongoDBRiverDefinition4.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoCollection();
        java.lang.String str11 = mongoDBRiverDefinition4.getMongoLocalPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3673");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.typeName;
        java.lang.String str13 = mongoDBRiverDefinition10.riverName;
        java.lang.String str14 = mongoDBRiverDefinition10.getINITIAL_TIMESTAMP_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = mongoDBRiverDefinition10.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertNull(serializedObjectSupporter15);
    }

    @Test
    public void test3674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoLocalPassword("throttle_size");
        java.util.Set<java.lang.String> strSet11 = builder6.excludeFields;
        builder6.setthrottleSize(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test3675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3675");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        builder0.mongoLocalPassword = "concurrent_bulk_requests";
        builder0.setscriptType("flush_interval");
        java.lang.String str12 = builder0.getindexName();
        boolean boolean13 = builder0.importAllCollections;
        builder0.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getNAME_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gridfs" + "'", str5, "gridfs");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "name" + "'", str8, "name");
    }

    @Test
    public void test3677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        boolean boolean4 = builder0.getmongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        builder0.mongoClientOptions = mongoClientOptions5;
        builder0.mongoSSLVerifyCertificate = false;
        builder0.setthrottleSize((int) (byte) -1);
        int int11 = builder0.connectTimeout;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.throttleSize = 0;
        java.lang.String str11 = builder2.getscript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3679");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str17 = mongoDBRiverDefinition16.indexName;
        java.lang.String str18 = mongoDBRiverDefinition16.getRiverIndexName();
        boolean boolean19 = mongoDBRiverDefinition16.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        java.lang.String str6 = builder2.mongoLocalPassword;
        builder2.setindexName("mongodb-1638820218449");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet16 = builder15.getparentTypes();
        java.lang.String str17 = builder15.getindexName();
        builder15.setindexName("local");
        builder15.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        builder22.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.importAllCollections(true);
        java.lang.String str29 = builder28.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject35 = builder34.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.mongoCollectionFilter(basicDBObject35);
        builder15.setmongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder38.setmongoOplogFilter(basicDBObject41);
        boolean boolean43 = builder38.importAllCollections;
        java.lang.String[] strArray57 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder38.parentTypes = strSet58;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject68 = builder67.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder38.mongoCollectionFilter(basicDBObject68);
        builder15.mongoOplogFilter = basicDBObject68;
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder0.setmongoCollectionFilter(basicDBObject68);
        builder0.mongoAdminUser = "ssl_verify_certificate";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        boolean boolean7 = mongoDBRiverDefinition1.isImportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.typeName;
        java.lang.String str9 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        int int10 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean11 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        boolean boolean11 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("mongodb-1638820218363");
        boolean boolean14 = builder13.getdropCollection();
        builder13.setdisableIndexRefresh(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoCollection;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition2.mongoServers;
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_requests" + "'", str9, "concurrent_requests");
    }

    @Test
    public void test3685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        builder2.indexName = "mongodb-1638820218326";
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test3686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getMongoCollection();
        boolean boolean22 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        boolean boolean23 = mongoDBRiverDefinition19.isMongoUseSSL();
        java.lang.String str24 = mongoDBRiverDefinition19.getMongoAdminUser();
        java.lang.String str25 = mongoDBRiverDefinition19.getTHROTTLE_SIZE_FIELD();
        boolean boolean26 = mongoDBRiverDefinition19.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disable_index_refresh" + "'", str24, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "throttle_size" + "'", str25, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        java.lang.String str11 = builder9.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.statisticsTypeName("_river");
        builder9.setscriptType("flush_interval");
        java.lang.String str16 = builder9.indexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        boolean boolean7 = builder2.getskipInitialImport();
        java.lang.String str8 = builder2.getincludeCollection();
        boolean boolean9 = builder2.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        java.lang.String str11 = builder9.getindexName();
        boolean boolean12 = builder9.getskipInitialImport();
        java.lang.String str13 = builder9.getincludeCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test3690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3690");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
    }

    @Test
    public void test3691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3691");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test3692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoClientOptions(mongoClientOptions5);
        boolean boolean7 = builder6.mongoSSLVerifyCertificate;
        boolean boolean8 = builder6.getmongoGridFS();
        builder6.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        builder3.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoAdminUser("admin");
        builder3.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder3.riverIndexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.mongoAdminPassword("exclude_fields");
        java.lang.String str49 = builder46.getmongoLocalUser();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test3694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl_verify_certificate" + "'", str3, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_bulk_requests" + "'", str4, "concurrent_bulk_requests");
    }

    @Test
    public void test3695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        com.mongodb.BasicDBObject basicDBObject11 = builder3.mongoCollectionFilter;
        java.lang.String str12 = builder3.gettypeName();
        java.lang.String str13 = builder3.scriptType;
        boolean boolean14 = builder3.mongoSecondaryReadPreference;
        builder3.setincludeCollection("concurrent_requests");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str8 = builder2.getriverName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter9.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter9.deserializeObjectRiverSettings1();
        builder2.serializedObjectSupporter = serializedObjectSupporter9;
        builder2.script = "local";
        builder2.includeCollection = "mongodb-1638820218408";
        builder2.setimportAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
    }

    @Test
    public void test3697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition1.getParentTypes();
        boolean boolean4 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoLocalPassword();
        java.lang.String str6 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
    }

    @Test
    public void test3698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.getIndexName();
        int int14 = mongoDBRiverDefinition10.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition10.mongoCollectionFilter;
        java.lang.String str16 = mongoDBRiverDefinition10.getTypeName();
        java.lang.String str17 = mongoDBRiverDefinition10.getTYPE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition10.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "type" + "'", str17, "type");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
    }

    @Test
    public void test3700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        builder0.setmongoAdminPassword("advanced_transformation");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test3701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = mongoDBRiverDefinition10.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition10.getMongoServers();
        builder2.mongoServers = serverAddressList12;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disable_index_refresh" + "'", str11, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test3702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        int int10 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean11 = mongoDBRiverDefinition1.disableIndexRefresh;
        boolean boolean12 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str13 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl_verify_certificate" + "'", str13, "ssl_verify_certificate");
    }

    @Test
    public void test3703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3703");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject28);
        java.lang.String str30 = builder18.includeCollection;
        java.lang.String str31 = builder18.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder18.mongoSSLVerifyCertificate(false);
        builder18.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition2.getimportAllCollections();
        boolean boolean7 = mongoDBRiverDefinition2.getdisableIndexRefresh();
        boolean boolean8 = mongoDBRiverDefinition2.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition2.getRiverName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test3705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3705");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218363" + "'", str8, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings9);
    }

    @Test
    public void test3706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3706");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
    }

    @Test
    public void test3707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str6 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.includeFields;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.parentTypes;
        boolean boolean10 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index" + "'", str7, "index");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3708");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        int int3 = builder2.getsocketTimeout();
        builder2.setmongoLocalUser("localhost");
        builder2.advancedTransformation = true;
        builder2.setmongoUseSSL(true);
        int int10 = builder2.connectTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        java.lang.String str10 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "type" + "'", str10, "type");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "port" + "'", str11, "port");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl_verify_certificate" + "'", str12, "ssl_verify_certificate");
    }

    @Test
    public void test3710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        int int20 = mongoDBRiverDefinition19.getDEFAULT_BULK_ACTIONS();
        java.lang.String str21 = mongoDBRiverDefinition19.typeName;
        boolean boolean22 = mongoDBRiverDefinition19.importAllCollections;
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.excludeFields;
        boolean boolean24 = mongoDBRiverDefinition19.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str6 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition2.riverIndexName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index" + "'", str7, "index");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test3712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getStatisticsTypeName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition4.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoOplogNamespace();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoDb();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition4.getExcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_bulk_requests.null" + "'", str9, "concurrent_bulk_requests.null");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test3714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str10 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index" + "'", str7, "index");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        builder0.scriptType = "mongodb-1638820217755";
        java.lang.String str10 = builder0.getstatisticsTypeName();
        int int11 = builder0.getconnectTimeout();
        builder0.setmongoLocalUser("mongodb-1638820218424");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3716");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.gettypeName();
        builder19.setmongoDb("concurrent_bulk_requests");
        builder19.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder19.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.mongoAdminUser("servers");
        java.lang.String str29 = builder19.riverName;
        java.lang.String str30 = builder19.getmongoCollection();
        builder19.mongoDb = "db";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        java.lang.Object obj34 = docScoreSearchScript0.unwrap((java.lang.Object) builder19);
        org.apache.lucene.search.Scorer scorer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "throttle_size" + "'", str29, "throttle_size");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test3717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString11();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter5;
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter5.deserializeObjectRiverSettings8();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString16();
        java.lang.String str11 = serializedObjectSupporter5.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        java.lang.String str13 = serializedObjectSupporter5.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter5.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter5.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter5.deserializeObjectRiverSettings9();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218387" + "'", str7, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218449" + "'", str11, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertNull(riverSettings16);
    }

    @Test
    public void test3718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3718");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.mongoUseSSL(false);
        java.lang.String str35 = builder34.getindexName();
        boolean boolean36 = builder34.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        builder34.mongoClientOptions = mongoClientOptions37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str41 = serializedObjectSupporter40.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter40.deserializeObjectRiverSettings7();
        java.lang.String str43 = serializedObjectSupporter40.deserializeObjectString15();
        mongoDBRiverDefinition39.serializedObjectSupporter = serializedObjectSupporter40;
        java.lang.String str45 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) mongoDBRiverDefinition39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.mongoAdminPassword("");
        java.lang.String[] strArray54 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder50.excludeFields = strSet55;
        builder50.disableIndexRefresh = false;
        java.lang.String str60 = builder50.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder50.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet63 = builder50.includeFields;
        java.lang.String str64 = builder50.mongoCollection;
        int int65 = builder50.getsocketTimeout();
        java.lang.String str66 = builder50.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = builder50.build();
        int int68 = builder50.getconnectTimeout();
        java.lang.Object obj69 = docScoreSearchScript0.unwrap((java.lang.Object) int68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertNull(riverSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb-1638820218424" + "'", str43, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + 0 + "'", obj69, 0);
    }

    @Test
    public void test3719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.riverName("db");
        builder14.socketTimeout = 8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str18 = mongoDBRiverDefinition17.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.getPORT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "port" + "'", str19, "port");
    }

    @Test
    public void test3720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("script");
        builder16.setthrottleSize((int) (short) 100);
        java.lang.String str19 = builder16.getriverIndexName();
        java.lang.String str20 = builder16.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test3721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3721");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        int int9 = builder8.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.importAllCollections(true);
        builder11.setskipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.indexName;
        java.lang.String str34 = builder0.mongoLocalUser;
        boolean boolean35 = builder0.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.typeName("mongodb-1638820218264");
        builder37.settypeName("disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test3723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize(0);
        builder2.statisticsIndexName = "credentials";
        builder2.script = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.typeName("bulk");
        com.mongodb.BasicDBObject basicDBObject21 = builder20.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(basicDBObject21);
    }

    @Test
    public void test3724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.mongoGridFS = true;
        boolean boolean13 = builder3.mongoSSLVerifyCertificate;
        builder3.setskipInitialImport(false);
        builder3.disableIndexRefresh = false;
        java.util.Set<java.lang.String> strSet18 = builder3.includeFields;
        builder3.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test3725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3725");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218449" + "'", str5, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
    }

    @Test
    public void test3726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3726");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        java.util.Set<java.lang.String> strSet8 = builder5.excludeFields;
        boolean boolean9 = builder5.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3727");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.importAllCollections;
        java.lang.String[] strArray22 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder3.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoCollectionFilter(basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings35 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ScriptService scriptService36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("gridfs", "initial_timestamp", riverSettings35, scriptService36);
        java.lang.String str38 = mongoDBRiverDefinition37.getTHROTTLE_SIZE_FIELD();
        java.lang.String str39 = mongoDBRiverDefinition37.getEXCLUDE_FIELDS_FIELD();
        boolean boolean40 = mongoDBRiverDefinition37.getmongoGridFS();
        java.lang.String str41 = mongoDBRiverDefinition37.script;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "throttle_size" + "'", str38, "throttle_size");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "exclude_fields" + "'", str39, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test3728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3728");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str5 = mongoDBRiverDefinition2.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str7 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getmongoUseSSL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "store_statistics" + "'", str5, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.advancedTransformation;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        builder8.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        builder13.setsocketTimeout((int) '4');
        builder13.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = builder13.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition18.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.mongoServers(serverAddressList19);
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder8.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str23 = mongoDBRiverDefinition22.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "localhost" + "'", str23, "localhost");
    }

    @Test
    public void test3731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        builder3.setmongoGridFS(false);
        builder3.setscriptType("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        boolean boolean20 = mongoDBRiverDefinition19.skipInitialImport;
        boolean boolean21 = mongoDBRiverDefinition19.importAllCollections;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        int int8 = builder0.connectTimeout;
        boolean boolean9 = builder0.dropCollection;
        java.lang.String str10 = builder0.getmongoCollection();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3733");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        docScoreSearchScript0.setNextScore((float) 100L);
        org.apache.lucene.search.Scorer scorer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
    }

    @Test
    public void test3734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3734");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("collection", "name");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?name? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        boolean boolean8 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str9 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getdropCollection();
        boolean boolean12 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "initial_timestamp" + "'", str9, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "password" + "'", str10, "password");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        builder0.connectTimeout = 'a';
        boolean boolean8 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoLocalPassword("credentials");
        builder12.importAllCollections = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        java.lang.String str5 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str8 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str9 = mongoDBRiverDefinition2.indexName;
        java.lang.String str10 = mongoDBRiverDefinition2.indexName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "secondary_read_preference" + "'", str5, "secondary_read_preference");
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize(0);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.mongoClientOptions(mongoClientOptions13);
        java.lang.String str15 = builder2.scriptType;
        boolean boolean16 = builder2.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.importAllCollections(true);
        java.lang.String str22 = builder21.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.gettypeName();
        builder23.setmongoDb("concurrent_bulk_requests");
        builder23.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder23.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        com.mongodb.ServerAddress[] serverAddressArray34 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList35 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList35, serverAddressArray34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder21.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(serverAddressArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3739");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoClientOptions(mongoClientOptions19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.script("disable_index_refresh");
        java.lang.String str23 = builder22.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.mongoCollectionFilter;
        builder22.mongoCollectionFilter = basicDBObject29;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        boolean boolean32 = builder22.advancedTransformation;
        java.lang.String str33 = builder22.getscriptType();
        java.util.Set<java.lang.String> strSet34 = builder22.includeFields;
        builder22.setskipInitialImport(true);
        boolean boolean37 = builder22.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp38 = builder22.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder22.indexName("throttle_size");
        docScoreSearchScript0.setNextVar("concurrent_bulk_requests.null", (java.lang.Object) "throttle_size");
        // The following exception was thrown during execution in test generation
        try {
            long long42 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(wildcardTimestamp38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test3740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3740");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str11 = mongoDBRiverDefinition10.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition10.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition10.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "parent_types" + "'", str11, "parent_types");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218387" + "'", str13, "mongodb-1638820218387");
    }

    @Test
    public void test3741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.getmongoServers();
        builder2.setthrottleSize((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoLocalUser("include_fields");
        boolean boolean10 = builder2.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder2.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardTimestamp11);
    }

    @Test
    public void test3742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        boolean boolean6 = builder4.getadvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject7 = builder4.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.importAllCollections(false);
        java.lang.String str10 = builder4.scriptType;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str5 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str6 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str11 = mongoDBRiverDefinition2.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "credentials" + "'", str8, "credentials");
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
    }

    @Test
    public void test3744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoLocalUser("credentials");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.typeName;
        java.lang.String str13 = mongoDBRiverDefinition10.mongoCollection;
        java.lang.String str14 = mongoDBRiverDefinition10.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
    }

    @Test
    public void test3746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3746");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218299" + "'", str9, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings10);
    }

    @Test
    public void test3747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoLocalUser("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.script("include_fields");
        builder7.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        builder7.setincludeCollection("concurrent_requests");
        builder7.scriptType = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        builder2.throttleSize = (byte) 100;
        java.lang.String str9 = builder2.mongoDb;
        int int10 = builder2.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.script("flush_interval");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getPORT_FIELD();
        boolean boolean24 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean25 = mongoDBRiverDefinition19.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "port" + "'", str23, "port");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        builder2.importAllCollections = false;
        builder2.indexName = "";
        org.bson.types.BSONTimestamp bSONTimestamp7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.initialTimestamp(bSONTimestamp7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test3752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str8 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "socket_timeout" + "'", str8, "socket_timeout");
    }

    @Test
    public void test3753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3753");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test3754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str44 = mongoDBRiverDefinition39.statisticsIndexName;
        boolean boolean45 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.Class<?> wildcardClass46 = mongoDBRiverDefinition39.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test3755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        builder2.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.socketTimeout((int) (short) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str10 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str12 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoOplogFilter(basicDBObject13);
        java.lang.String str15 = builder14.gettypeName();
        builder14.disableIndexRefresh = false;
        boolean boolean18 = builder14.getmongoSecondaryReadPreference();
        builder14.setadvancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disable_index_refresh" + "'", str10, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "store_statistics" + "'", str12, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("include_collection");
        builder0.setmongoUseSSL(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter6.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter6.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter6.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter6.deserializeObjectRiverSettings9();
        mongoDBRiverDefinition2.serializedObjectSupporter = serializedObjectSupporter6;
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter6.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter6.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter6.deserializeObjectRiverSettings4();
        java.lang.String str18 = serializedObjectSupporter6.deserializeObjectString13();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218408" + "'", str18, "mongodb-1638820218408");
    }

    @Test
    public void test3758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3758");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder15.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean23 = mongoDBRiverDefinition22.storeStatistics;
        boolean boolean24 = mongoDBRiverDefinition22.isDisableIndexRefresh();
        java.lang.String str25 = mongoDBRiverDefinition22.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet26 = mongoDBRiverDefinition22.getIncludeFields();
        java.lang.String str27 = mongoDBRiverDefinition22.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition22.includeCollection;
        java.lang.String str29 = mongoDBRiverDefinition22.getMongoAdminPassword();
        java.lang.String str30 = mongoDBRiverDefinition22.getDROP_COLLECTION_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition22.mongoAdminPassword;
        java.lang.String str32 = mongoDBRiverDefinition22.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition22.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder15.mongoOplogFilter(basicDBObject33);
        builder5.mongoOplogFilter = basicDBObject33;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder5.storeStatistics(false);
        builder37.scriptType = "host";
        boolean boolean40 = builder37.getimportAllCollections();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "script" + "'", str27, "script");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "drop_collection" + "'", str30, "drop_collection");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3759");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("socket_timeout", "secondary_read_preference");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?secondary_read_preference?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3760");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.Class<?> wildcardClass6 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218449" + "'", str1, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218299" + "'", str3, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test3761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = builder18.build();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder18.mongoClientOptions(mongoClientOptions31);
        java.lang.String str33 = builder32.getscript();
        boolean boolean34 = builder32.getdropCollection();
        java.lang.String str35 = builder32.includeCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test3762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getDEFAULT_DB_HOST();
        java.lang.String str22 = mongoDBRiverDefinition19.getDB_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition19.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "localhost" + "'", str21, "localhost");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "db" + "'", str22, "db");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test3763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.excludeFields;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test3764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getPORT_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.isSkipInitialImport();
        int int26 = mongoDBRiverDefinition19.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "port" + "'", str23, "port");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "initial_timestamp" + "'", str24, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test3765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        builder3.storeStatistics = false;
        boolean boolean15 = builder3.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3766");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.importAllCollections;
        java.lang.String[] strArray22 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder3.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder33.riverIndexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.mongoAdminPassword("");
        java.lang.String[] strArray50 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder46.excludeFields = strSet51;
        com.mongodb.BasicDBObject basicDBObject54 = builder46.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder38.mongoOplogFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder37.mongoCollectionFilter(basicDBObject54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder3.mongoOplogFilter(basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings58 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.script.ScriptService scriptService59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("filter", "mongodb-1638820218387", riverSettings58, scriptService59);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition60);
    }

    @Test
    public void test3767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        boolean boolean7 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getScript();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoCollectionFilter;
        java.lang.String str10 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3768");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
    }

    @Test
    public void test3769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoAdminPassword("");
        java.lang.String[] strArray14 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder10.excludeFields = strSet15;
        builder4.setexcludeFields((java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder4.mongoSecondaryReadPreference(false);
        boolean boolean21 = builder20.storeStatistics;
        builder20.setmongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.importAllCollections(true);
        builder24.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray56 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder35.excludeFields = strSet57;
        builder24.includeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder0.riverIndexName("password");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript65 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.mongoAdminPassword("");
        java.lang.String[] strArray74 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder70.excludeFields = strSet75;
        java.lang.String str78 = builder70.indexName;
        docScoreSearchScript65.setNextVar("actions", (java.lang.Object) builder70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder83.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition87 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder86.mongoAdminPassword("");
        java.lang.String[] strArray93 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet94 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet94, strArray93);
        builder89.excludeFields = strSet94;
        builder83.setexcludeFields((java.util.Set<java.lang.String>) strSet94);
        docScoreSearchScript65.setNextVar("type", (java.lang.Object) strSet94);
        builder64.setincludeFields((java.util.Set<java.lang.String>) strSet94);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test3770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        boolean boolean7 = builder2.getskipInitialImport();
        builder2.setstatisticsIndexName("bulk_size");
        java.lang.String str10 = builder2.mongoLocalPassword;
        builder2.mongoLocalUser = "";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test3771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getskipInitialImport();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isDropCollection();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "skip_initial_import" + "'", str4, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        boolean boolean7 = builder4.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder4.dropCollection(true);
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        builder9.setmongoClientOptions(mongoClientOptions10);
        java.lang.String str12 = builder9.getmongoAdminUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder9.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoCollectionFilter(basicDBObject19);
        builder18.setstoreStatistics(false);
        builder18.riverName = "secondary_read_preference";
        boolean boolean25 = builder18.mongoUseSSL;
        java.lang.String str26 = builder18.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.riverName("exclude_fields");
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = builder28.mongoServers;
        builder9.mongoServers = serverAddressList31;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(serverAddressList31);
    }

    @Test
    public void test3773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition2.getlogger();
        boolean boolean7 = mongoDBRiverDefinition2.mongoUseSSL;
        int int8 = mongoDBRiverDefinition2.throttleSize;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSSLVerifyCertificate(false);
        builder0.setincludeCollection("ssl_verify_certificate");
        builder0.mongoAdminPassword = "credentials";
        java.lang.String str16 = builder0.includeCollection;
        builder0.setmongoLocalPassword("mongodb-1638820218424");
        boolean boolean19 = builder0.mongoUseSSL;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl_verify_certificate" + "'", str16, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3775");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean12 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str13 = mongoDBRiverDefinition1.indexName;
        java.lang.String str14 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "connect_timeout" + "'", str14, "connect_timeout");
    }

    @Test
    public void test3776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder2.getmongoServers();
        java.lang.String str4 = builder2.typeName;
        builder2.script = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.disableIndexRefresh(true);
        builder8.indexName = "options";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        builder2.storeStatistics = false;
        boolean boolean21 = builder2.importAllCollections;
        builder2.settypeName("local");
        java.lang.String str24 = builder2.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder2.skipInitialImport(false);
        builder26.setstatisticsTypeName("size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setmongoLocalUser("servers");
        builder6.riverIndexName = "parent_types";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.mongoSecondaryReadPreference(false);
        builder2.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3780");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.getmongoServers();
        builder2.setthrottleSize((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoLocalUser("include_fields");
        java.util.Set<java.lang.String> strSet10 = builder9.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder9.build();
        builder9.setmongoAdminUser("script_type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
    }

    @Test
    public void test3781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str7 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str10 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "advanced_transformation" + "'", str10, "advanced_transformation");
    }

    @Test
    public void test3782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        java.util.Set<java.lang.String> strSet15 = builder14.includeFields;
        java.lang.String str16 = builder14.getmongoAdminPassword();
        java.lang.String str17 = builder14.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoGridFS(false);
        builder14.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder14.riverIndexName("parent_types");
        java.lang.String str25 = builder14.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "throttle_size" + "'", str25, "throttle_size");
    }

    @Test
    public void test3783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        boolean boolean19 = builder18.storeStatistics;
        builder18.setmongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        builder22.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.importAllCollections(true);
        builder22.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray54 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder33.excludeFields = strSet55;
        builder22.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder18.setmongoGridFS(false);
        builder18.mongoLocalPassword = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        builder64.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        com.mongodb.BasicDBObject basicDBObject72 = null;
        builder69.setmongoOplogFilter(basicDBObject72);
        boolean boolean74 = builder69.importAllCollections;
        java.lang.String[] strArray88 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder69.parentTypes = strSet89;
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        builder18.parentTypes = strSet89;
        java.lang.String str94 = builder18.getincludeCollection();
        builder18.setdropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test3784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3784");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(true);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoAdminPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder39.excludeFields = strSet44;
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder30.parentTypes = strSet44;
        int int49 = builder30.getconnectTimeout();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) int49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder51.setmongoOplogFilter(basicDBObject54);
        java.lang.String str56 = builder51.getmongoLocalPassword();
        boolean boolean57 = builder51.mongoSSLVerifyCertificate;
        builder51.setadvancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder51.getmongoClientOptions();
        java.lang.Object obj61 = docScoreSearchScript0.unwrap((java.lang.Object) mongoClientOptions60);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + 0 + "'", obj50, 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(mongoClientOptions60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test3785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str20 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition19.getIncludeFields();
        int int22 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        java.lang.String str23 = mongoDBRiverDefinition19.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 27017 + "'", int22 == 27017);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "connect_timeout" + "'", str23, "connect_timeout");
    }

    @Test
    public void test3786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        builder0.setadvancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder0.mongoClientOptions;
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.statisticsTypeName("concurrent_requests");
        boolean boolean17 = builder0.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.riverIndexName("concurrent_bulk_requests");
        builder19.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str10 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str12 = mongoDBRiverDefinition1.statisticsTypeName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "store_statistics" + "'", str10, "store_statistics");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3788");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.mongoAdminPassword("");
        java.lang.String[] strArray46 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        builder42.excludeFields = strSet47;
        com.mongodb.BasicDBObject basicDBObject50 = builder42.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder34.mongoOplogFilter(basicDBObject50);
        java.lang.Object obj52 = docScoreSearchScript0.unwrap((java.lang.Object) builder34);
        docScoreSearchScript0.setNextScore((float) 1);
        org.apache.lucene.search.Scorer scorer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(obj52);
    }

    @Test
    public void test3789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder3.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.script("throttle_size");
        int int8 = builder7.getconnectTimeout();
        com.mongodb.BasicDBObject basicDBObject9 = builder7.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str11 = mongoDBRiverDefinition10.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3790");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.importAllCollections(true);
        java.lang.String str16 = builder15.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.statisticsIndexName("_river");
        builder18.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder23.setmongoOplogFilter(basicDBObject26);
        boolean boolean28 = builder23.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        boolean boolean31 = mongoDBRiverDefinition30.storeStatistics;
        boolean boolean32 = mongoDBRiverDefinition30.isDisableIndexRefresh();
        java.lang.String str33 = mongoDBRiverDefinition30.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet34 = mongoDBRiverDefinition30.getIncludeFields();
        java.lang.String str35 = mongoDBRiverDefinition30.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str36 = mongoDBRiverDefinition30.includeCollection;
        java.lang.String str37 = mongoDBRiverDefinition30.getMongoAdminPassword();
        java.lang.String str38 = mongoDBRiverDefinition30.getDROP_COLLECTION_FIELD();
        java.lang.String str39 = mongoDBRiverDefinition30.mongoAdminPassword;
        java.lang.String str40 = mongoDBRiverDefinition30.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition30.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder23.mongoOplogFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder22.mongoOplogFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.gettypeName();
        builder44.setmongoDb("concurrent_bulk_requests");
        builder44.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder44.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder44.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        boolean boolean56 = mongoDBRiverDefinition55.storeStatistics;
        boolean boolean57 = mongoDBRiverDefinition55.isDisableIndexRefresh();
        java.lang.String str58 = mongoDBRiverDefinition55.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet59 = mongoDBRiverDefinition55.getIncludeFields();
        java.lang.String str60 = mongoDBRiverDefinition55.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition55.includeCollection;
        java.lang.String str62 = mongoDBRiverDefinition55.getMongoAdminPassword();
        java.lang.String str63 = mongoDBRiverDefinition55.getDROP_COLLECTION_FIELD();
        java.lang.String str64 = mongoDBRiverDefinition55.mongoAdminPassword;
        java.lang.String str65 = mongoDBRiverDefinition55.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject66 = mongoDBRiverDefinition55.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder53.mongoOplogFilter(basicDBObject66);
        builder43.mongoCollectionFilter = basicDBObject66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder69.mongoAdminPassword("");
        java.lang.String[] strArray76 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        builder72.excludeFields = strSet77;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder43.excludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet77);
        builder0.setthrottleSize((int) (short) -1);
        com.mongodb.MongoClientOptions mongoClientOptions84 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.mongoClientOptions(mongoClientOptions84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder0.statisticsIndexName("mongodb-1638820218424");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "script" + "'", str35, "script");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "drop_collection" + "'", str38, "drop_collection");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "script" + "'", str60, "script");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "drop_collection" + "'", str63, "drop_collection");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition3.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition3.getCOLLECTION_FIELD();
        boolean boolean6 = mongoDBRiverDefinition3.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str9 = mongoDBRiverDefinition1.getSIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "size" + "'", str9, "size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3793");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        java.lang.String str14 = builder13.mongoDb;
        builder13.setmongoLocalUser("");
        java.lang.String str17 = builder13.mongoAdminUser;
        java.util.Set<java.lang.String> strSet18 = builder13.parentTypes;
        boolean boolean19 = builder13.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "port" + "'", str14, "port");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.importAllCollections(false);
        builder6.setstoreStatistics(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3796");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test3797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        java.lang.String str12 = builder7.scriptType;
        java.lang.String str13 = builder7.riverName;
        builder7.statisticsIndexName = "credentials";
        builder7.riverIndexName = "parent_types";
        java.util.Set<java.lang.String> strSet18 = builder7.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder7.connectTimeout(97);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test3798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter6.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter6.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter6.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter6.deserializeObjectRiverSettings9();
        mongoDBRiverDefinition2.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str15 = serializedObjectSupporter6.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter6.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings16);
    }

    @Test
    public void test3799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder4.includeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.setadvancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder2.getmongoServers();
        builder2.mongoAdminUser = "throttle_size";
        boolean boolean6 = builder2.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.statisticsIndexName("collection");
        builder8.indexName = "password";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3801");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str18 = serializedObjectSupporter13.deserializeObjectString12();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_river" + "'", str18, "_river");
    }

    @Test
    public void test3802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3802");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str7 = mongoDBRiverDefinition6.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition6.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition6.getMongoServers();
        boolean boolean10 = mongoDBRiverDefinition6.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = riverSettings13.settings();
        org.elasticsearch.script.ScriptService scriptService15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("secondary_read_preference", "disable_index_refresh", riverSettings13, scriptService15);
        boolean boolean17 = mongoDBRiverDefinition16.importAllCollections;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3803");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820217755" + "'", str8, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218408" + "'", str9, "mongodb-1638820218408");
    }

    @Test
    public void test3804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3804");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.gettypeName();
        builder1.setmongoDb("concurrent_bulk_requests");
        builder1.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder1.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder1.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        boolean boolean13 = mongoDBRiverDefinition12.storeStatistics;
        boolean boolean14 = mongoDBRiverDefinition12.isDisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition12.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition12.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition12.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition12.getMongoAdminPassword();
        java.lang.String str20 = mongoDBRiverDefinition12.getDROP_COLLECTION_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition12.mongoAdminPassword;
        java.lang.String str22 = mongoDBRiverDefinition12.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition12.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder10.mongoOplogFilter(basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.common.settings.Settings settings26 = riverSettings25.globalSettings();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script" + "'", str17, "script");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "drop_collection" + "'", str20, "drop_collection");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(settings26);
    }

    @Test
    public void test3805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3805");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.mongoClientOptions;
        java.lang.String str10 = mongoDBRiverDefinition1.getRiverIndexName();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.mongoGridFS = true;
        boolean boolean13 = builder3.mongoSSLVerifyCertificate;
        builder3.setskipInitialImport(false);
        builder3.disableIndexRefresh = false;
        java.lang.String str18 = builder3.getmongoCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = null;
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory7.newScript(strMap8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.gettypeName();
        builder10.setriverName("hi!");
        java.lang.String str14 = builder10.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean19 = mongoDBRiverDefinition18.storeStatistics;
        boolean boolean20 = mongoDBRiverDefinition18.isDisableIndexRefresh();
        java.lang.String str21 = mongoDBRiverDefinition18.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition18.getIncludeFields();
        java.lang.String str23 = mongoDBRiverDefinition18.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition18.includeCollection;
        java.lang.String str25 = mongoDBRiverDefinition18.getMongoAdminPassword();
        java.lang.String str26 = mongoDBRiverDefinition18.getDROP_COLLECTION_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition18.mongoAdminPassword;
        java.lang.String str28 = mongoDBRiverDefinition18.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject29 = mongoDBRiverDefinition18.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder16.mongoCollectionFilter(basicDBObject29);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.gettypeName();
        builder32.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str37 = mongoDBRiverDefinition36.getFILTER_FIELD();
        java.lang.String str38 = mongoDBRiverDefinition36.getMongoCollection();
        boolean boolean39 = mongoDBRiverDefinition36.isMongoSSLVerifyCertificate();
        java.lang.String str40 = mongoDBRiverDefinition36.getSIZE_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition36.getIncludeCollection();
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition36.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript43 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        builder2.mongoOplogFilter = basicDBObject42;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter45 = builder2.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "script" + "'", str23, "script");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "drop_collection" + "'", str26, "drop_collection");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "filter" + "'", str37, "filter");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "size" + "'", str40, "size");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(executableScript43);
        org.junit.Assert.assertNull(serializedObjectSupporter45);
    }

    @Test
    public void test3808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3808");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        int int22 = builder3.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        boolean boolean24 = mongoDBRiverDefinition23.isDropCollection();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3809");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test3810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        builder39.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        com.mongodb.BasicDBObject basicDBObject47 = null;
        builder44.setmongoOplogFilter(basicDBObject47);
        boolean boolean49 = builder44.importAllCollections;
        java.lang.String[] strArray63 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        builder44.parentTypes = strSet64;
        builder39.setparentTypes((java.util.Set<java.lang.String>) strSet64);
        builder39.disableIndexRefresh = false;
        builder39.setconnectTimeout((int) (byte) -1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList72 = builder39.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder38.mongoServers(serverAddressList72);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serverAddressList72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test3811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3811");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.getACTIONS_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition19.getPORT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "actions" + "'", str22, "actions");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "port" + "'", str23, "port");
    }

    @Test
    public void test3812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        int int8 = mongoDBRiverDefinition2.getSocketTimeout();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test3813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str5 = mongoDBRiverDefinition2.getNAME_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
    }

    @Test
    public void test3814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        com.mongodb.BasicDBObject basicDBObject11 = builder3.mongoCollectionFilter;
        java.lang.String str12 = builder3.indexName;
        builder3.setmongoSecondaryReadPreference(false);
        builder3.setstatisticsIndexName("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3815");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean12 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean13 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "import_all_collections" + "'", str14, "import_all_collections");
    }

    @Test
    public void test3816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.typeName;
        java.lang.String str13 = mongoDBRiverDefinition10.getMongoAdminUser();
        java.lang.String str14 = mongoDBRiverDefinition10.getSCRIPT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition10.getRiverIndexName();
        java.lang.String str16 = mongoDBRiverDefinition10.script;
        java.lang.String str17 = mongoDBRiverDefinition10.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean18 = mongoDBRiverDefinition10.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3817");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        builder2.setscript("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.gettypeName();
        builder5.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str10 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.mongoServers(serverAddressList14);
        builder15.mongoAdminPassword = "filter";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.includeCollection("type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_requests" + "'", str12, "concurrent_requests");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        boolean boolean19 = builder18.storeStatistics;
        java.lang.String str20 = builder18.mongoDb;
        builder18.connectTimeout = (byte) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.riverIndexName("secondary_read_preference");
        boolean boolean25 = builder18.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.Set<java.lang.String> strSet9 = builder2.includeFields;
        builder2.settypeName("null.null");
        java.lang.String str12 = builder2.mongoLocalUser;
        com.mongodb.BasicDBObject basicDBObject13 = builder2.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean21 = builder18.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoLocalUser = "store_statistics";
        int int31 = builder27.connectTimeout;
        java.util.Set<java.lang.String> strSet32 = builder27.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.riverName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.mongoAdminPassword("");
        java.lang.String[] strArray47 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder43.excludeFields = strSet48;
        builder37.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder37.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        boolean boolean55 = builder53.dropCollection;
        boolean boolean56 = builder53.storeStatistics;
        java.util.Set<java.lang.String> strSet57 = builder53.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder27.includeFields(strSet57);
        builder24.setparentTypes(strSet57);
        builder18.parentTypes = strSet57;
        builder2.setexcludeFields(strSet57);
        com.mongodb.BasicDBObject basicDBObject62 = builder2.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(basicDBObject62);
    }

    @Test
    public void test3820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.String str10 = builder6.indexName;
        com.mongodb.BasicDBObject basicDBObject11 = builder6.mongoOplogFilter;
        builder6.setdisableIndexRefresh(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test3821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str22 = mongoDBRiverDefinition21.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition21.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition21.mongoServers;
        boolean boolean25 = mongoDBRiverDefinition21.mongoUseSSL;
        java.lang.String str26 = mongoDBRiverDefinition21.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test3822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3822");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("mongodb-1638820217755", "collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder3.setsocketTimeout((int) (short) 10);
        boolean boolean6 = builder3.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        boolean boolean9 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean10 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.includeCollection;
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.mongoAdminPassword;
        java.lang.String str18 = mongoDBRiverDefinition8.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        builder3.setmongoCollectionFilter(basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder3.mongoDb("parent_types");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "drop_collection" + "'", str16, "drop_collection");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String str5 = builder2.mongoDb;
        builder2.skipInitialImport = false;
        builder2.script = "actions";
        java.lang.String str10 = builder2.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoAdminPassword("concurrent_bulk_requests.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "throttle_size" + "'", str14, "throttle_size");
    }

    @Test
    public void test3825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder5.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder5.importAllCollections;
        java.lang.String[] strArray24 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder5.parentTypes = strSet25;
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet25);
        java.lang.String str29 = builder0.getscript();
        java.lang.String str30 = builder0.getindexName();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test3826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean22 = mongoDBRiverDefinition19.mongoSecondaryReadPreference;
        java.lang.String str23 = mongoDBRiverDefinition19.riverName;
        java.lang.String str24 = mongoDBRiverDefinition19.getCONNECTION_TIMEOUT();
        java.lang.String str25 = mongoDBRiverDefinition19.mongoCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getSTORE_STATISTICS_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition19.getRiverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "connect_timeout" + "'", str24, "connect_timeout");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "store_statistics" + "'", str26, "store_statistics");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test3827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str6 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test3828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3828");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("flush_interval");
        boolean boolean10 = builder5.mongoUseSSL;
        boolean boolean11 = builder5.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.storeStatistics(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3829");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoAdminUser;
        int int9 = mongoDBRiverDefinition1.getSocketTimeout();
        boolean boolean10 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str11 = mongoDBRiverDefinition1.mongoAdminUser;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3830");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsTypeName;
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str7 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "import_all_collections" + "'", str7, "import_all_collections");
    }

    @Test
    public void test3831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder3.setsocketTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.importAllCollections(false);
        builder3.setriverName("parent_types");
        builder3.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = builder3.build();
        builder3.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition12);
    }

    @Test
    public void test3832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.mongoDb("script");
        java.util.Set<java.lang.String> strSet36 = builder35.excludeFields;
        builder35.setimportAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder35.mongoCollectionFilter = basicDBObject39;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet36);
    }

    @Test
    public void test3833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3833");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        builder7.setconnectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder22.getmongoServers();
        builder7.setmongoServers(serverAddressList23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        boolean boolean26 = mongoDBRiverDefinition25.storeStatistics;
        java.lang.String str27 = mongoDBRiverDefinition25.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test3834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int5 = mongoDBRiverDefinition2.getThrottleSize();
        java.lang.String str6 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "import_all_collections" + "'", str4, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
    }

    @Test
    public void test3835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3835");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test3836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.gettypeName();
        builder14.setmongoDb("concurrent_bulk_requests");
        builder14.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet22 = builder21.getparentTypes();
        java.lang.String str23 = builder21.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str28 = mongoDBRiverDefinition27.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition27.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition27.getMongoServers();
        boolean boolean31 = mongoDBRiverDefinition27.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder21.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder4.mongoOplogFilter(basicDBObject32);
        boolean boolean36 = builder4.getadvancedTransformation();
        java.lang.String str37 = builder4.getmongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disable_index_refresh" + "'", str28, "disable_index_refresh");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test3837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.Set<java.lang.String> strSet9 = builder2.includeFields;
        java.lang.String str10 = builder2.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoCollection("size");
        java.lang.String str13 = builder2.getindexName();
        builder2.dropCollection = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disable_index_refresh" + "'", str10, "disable_index_refresh");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3838");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        boolean boolean6 = builder4.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.includeCollection("drop_collection");
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.includeCollection = "index";
        java.lang.String str13 = builder4.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test3839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder2.mongoDb("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test3840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3840");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.lang.String str12 = builder11.getmongoLocalPassword();
        boolean boolean13 = builder11.mongoSecondaryReadPreference;
        int int14 = builder11.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
    }

    @Test
    public void test3841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition2.advancedTransformation;
        boolean boolean7 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str8 = mongoDBRiverDefinition2.getScript();
        java.lang.String str9 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
    }

    @Test
    public void test3842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        int int11 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str12 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.mongoCollection;
        boolean boolean15 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl" + "'", str12, "ssl");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3843");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        boolean boolean11 = builder4.mongoUseSSL;
        java.lang.String str12 = builder4.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.dropCollection(false);
        int int15 = builder14.throttleSize;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("ssl");
        builder6.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject18 = builder17.mongoCollectionFilter;
        boolean boolean19 = builder17.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.includeCollection("drop_collection");
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = builder17.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.mongoServers(serverAddressList22);
        builder23.setdropCollection(true);
        org.bson.types.BSONTimestamp bSONTimestamp26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.initialTimestamp(bSONTimestamp26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.getIndexName();
        boolean boolean14 = mongoDBRiverDefinition10.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition10.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
    }

    @Test
    public void test3846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet8 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        builder2.setsocketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str13 = mongoDBRiverDefinition12.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
    }

    @Test
    public void test3847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize(0);
        builder2.statisticsIndexName = "credentials";
        builder2.script = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(true);
        builder2.setmongoLocalPassword("mongodb-1638820218424");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = builder2.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str19 = builder2.getmongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3849");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        boolean boolean7 = builder0.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet8 = builder0.includeFields;
        builder0.setmongoUseSSL(false);
        builder0.advancedTransformation = true;
        builder0.setmongoLocalPassword("local");
        java.lang.String str15 = builder0.getriverName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3850");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("mongodb-1638820218363", "admin", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?admin?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSSLVerifyCertificate(false);
        builder0.setincludeCollection("ssl_verify_certificate");
        builder0.mongoAdminPassword = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean17 = mongoDBRiverDefinition16.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition16.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition16.indexName;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "import_all_collections" + "'", str18, "import_all_collections");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test3852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3852");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.util.Set<java.lang.String> strSet19 = builder18.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter25 = builder22.serializedObjectSupporter;
        builder22.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str28 = builder22.getriverName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter29 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings30 = serializedObjectSupporter29.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter29.deserializeObjectRiverSettings1();
        builder22.serializedObjectSupporter = serializedObjectSupporter29;
        java.util.List<com.mongodb.ServerAddress> serverAddressList33 = builder22.getmongoServers();
        builder18.setmongoServers(serverAddressList33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.socketTimeout((int) ' ');
        boolean boolean38 = builder35.getimportAllCollections();
        java.lang.String str39 = builder35.gettypeName();
        boolean boolean40 = builder35.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder46.setmongoOplogFilter(basicDBObject49);
        boolean boolean51 = builder46.importAllCollections;
        java.lang.String[] strArray65 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder46.parentTypes = strSet66;
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder18.includeFields((java.util.Set<java.lang.String>) strSet66);
        builder18.riverName = "bulk";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(riverSettings30);
        org.junit.Assert.assertNull(riverSettings31);
        org.junit.Assert.assertNotNull(serverAddressList33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test3853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3853");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str41 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean43 = mongoDBRiverDefinition39.isMongoUseSSL();
        int int44 = mongoDBRiverDefinition39.getThrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = mongoDBRiverDefinition39.getInitialTimestamp();
        java.lang.String str46 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition39.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "script" + "'", str46, "script");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "store_statistics" + "'", str47, "store_statistics");
    }

    @Test
    public void test3854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        builder2.throttleSize = (byte) 100;
        java.lang.String str9 = builder2.mongoDb;
        boolean boolean10 = builder2.getstoreStatistics();
        boolean boolean11 = builder2.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter17 = builder14.serializedObjectSupporter;
        builder14.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str20 = builder14.getriverName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter21.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter21.deserializeObjectRiverSettings1();
        builder14.serializedObjectSupporter = serializedObjectSupporter21;
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString8();
        builder2.serializedObjectSupporter = serializedObjectSupporter21;
        org.elasticsearch.river.RiverSettings riverSettings27 = serializedObjectSupporter21.deserializeObjectRiverSettings3();
        java.lang.String str28 = serializedObjectSupporter21.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter21.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(riverSettings22);
        org.junit.Assert.assertNull(riverSettings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_river" + "'", str25, "_river");
        org.junit.Assert.assertNull(riverSettings27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb-1638820218387" + "'", str28, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings29);
    }

    @Test
    public void test3855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setriverName("hi!");
        java.lang.String str4 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        int int7 = builder6.connectTimeout;
        builder6.mongoGridFS = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3856");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.getmongoServers();
        builder2.setthrottleSize((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoLocalPassword("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder18.excludeFields = strSet23;
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder12.mongoUseSSL(false);
        java.lang.String str29 = builder28.getindexName();
        boolean boolean30 = builder28.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        builder28.mongoClientOptions = mongoClientOptions31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoClientOptions(mongoClientOptions35);
        java.util.Set<java.lang.String> strSet37 = builder36.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.typeName("port");
        builder36.mongoSSLVerifyCertificate = true;
        com.mongodb.BasicDBObject basicDBObject42 = builder36.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder28.mongoCollectionFilter(basicDBObject42);
        builder9.setmongoOplogFilter(basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder9.includeCollection("actions");
        builder46.dropCollection = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3857");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        int int20 = mongoDBRiverDefinition19.getDEFAULT_BULK_ACTIONS();
        java.lang.String str21 = mongoDBRiverDefinition19.mongoLocalPassword;
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null.null" + "'", str22, "null.null");
    }

    @Test
    public void test3858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean14 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str16 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
    }

    @Test
    public void test3859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str7 = mongoDBRiverDefinition2.getIncludeCollection();
        boolean boolean8 = mongoDBRiverDefinition2.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str10 = mongoDBRiverDefinition2.getScriptType();
        int int11 = mongoDBRiverDefinition2.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3860");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoAdminPassword;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test3861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        java.lang.String str5 = mongoDBRiverDefinition2.scriptType;
        java.lang.String str6 = mongoDBRiverDefinition2.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
    }

    @Test
    public void test3862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        java.lang.String str2 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsIndexName("filter");
        builder0.disableIndexRefresh = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.getIndexName();
        int int14 = mongoDBRiverDefinition10.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition10.mongoCollectionFilter;
        java.lang.String str16 = mongoDBRiverDefinition10.getTypeName();
        int int17 = mongoDBRiverDefinition10.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        java.lang.String str5 = builder0.getmongoLocalPassword();
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("flush_interval");
        builder0.throttleSize = (short) 0;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        java.lang.String str4 = builder0.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.riverIndexName("secondary_read_preference");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        builder2.throttleSize = (byte) 100;
        boolean boolean9 = builder2.storeStatistics;
        builder2.setconnectTimeout((int) '4');
        builder2.mongoAdminUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.mongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_timeout" + "'", str10, "bulk_timeout");
        org.junit.Assert.assertNotNull(basicDBObject11);
    }

    @Test
    public void test3868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3868");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        builder0.setmongoDb("_river");
        java.lang.String str5 = builder0.includeCollection;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test3869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.statisticsIndexName;
        boolean boolean4 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.typeName("local");
        boolean boolean13 = builder9.getdisableIndexRefresh();
        builder9.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.setmongoDb("admin");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3871");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("", "hi!", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?hi!?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3872");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter3 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter3.deserializeObjectRiverSettings4();
        java.lang.String str5 = serializedObjectSupporter3.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter3.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter3.deserializeObjectRiverSettings3();
        builder0.serializedObjectSupporter = serializedObjectSupporter3;
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter3.deserializeObjectRiverSettings7();
        java.lang.String str10 = serializedObjectSupporter3.deserializeObjectString8();
        java.lang.String str11 = serializedObjectSupporter3.deserializeObjectString2();
        java.lang.String str12 = serializedObjectSupporter3.deserializeObjectString12();
        java.lang.String str13 = serializedObjectSupporter3.deserializeObjectString8();
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
    }

    @Test
    public void test3873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.mongoDb("script");
        java.lang.String str36 = builder35.typeName;
        builder35.setstatisticsTypeName("admin");
        builder35.script = "mongodb-1638820218408";
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test3874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str8 = mongoDBRiverDefinition1.getSERVERS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        java.lang.String str22 = mongoDBRiverDefinition19.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int23 = mongoDBRiverDefinition19.getConnectTimeout();
        java.lang.String str24 = mongoDBRiverDefinition19.getINCLUDE_COLLECTION_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "concurrent_bulk_requests" + "'", str22, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "include_collection" + "'", str24, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.mongoDb;
        java.lang.String str8 = mongoDBRiverDefinition6.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int9 = mongoDBRiverDefinition6.getDEFAULT_DB_PORT();
        java.lang.String str10 = mongoDBRiverDefinition6.getIncludeCollection();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test3877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3877");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("null.null", "bulk");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?bulk?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3878");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str11 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str12 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218408" + "'", str7, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820217755" + "'", str9, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertNull(riverSettings13);
    }

    @Test
    public void test3879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3879");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
    }

    @Test
    public void test3880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        boolean boolean9 = builder8.mongoSSLVerifyCertificate;
        boolean boolean10 = builder8.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings17);
    }

    @Test
    public void test3882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("flush_interval");
        builder9.setmongoDb("index");
        boolean boolean12 = builder9.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoAdminPassword("");
        java.lang.String[] strArray20 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        builder16.excludeFields = strSet21;
        builder9.setincludeFields((java.util.Set<java.lang.String>) strSet21);
        java.lang.String str25 = builder9.getmongoCollection();
        builder9.setscriptType("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        builder28.mongoLocalUser = "store_statistics";
        int int32 = builder28.connectTimeout;
        java.util.Set<java.lang.String> strSet33 = builder28.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str35 = builder34.gettypeName();
        builder34.setmongoDb("concurrent_bulk_requests");
        builder34.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet42 = builder41.getparentTypes();
        builder41.setconnectTimeout(0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder47.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder52.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList57 = builder56.getmongoServers();
        builder41.setmongoServers(serverAddressList57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder28.mongoServers(serverAddressList57);
        builder9.setmongoServers(serverAddressList57);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "index" + "'", str25, "index");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(serverAddressList57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test3883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3883");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder15.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        boolean boolean23 = mongoDBRiverDefinition22.storeStatistics;
        boolean boolean24 = mongoDBRiverDefinition22.isDisableIndexRefresh();
        java.lang.String str25 = mongoDBRiverDefinition22.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet26 = mongoDBRiverDefinition22.getIncludeFields();
        java.lang.String str27 = mongoDBRiverDefinition22.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition22.includeCollection;
        java.lang.String str29 = mongoDBRiverDefinition22.getMongoAdminPassword();
        java.lang.String str30 = mongoDBRiverDefinition22.getDROP_COLLECTION_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition22.mongoAdminPassword;
        java.lang.String str32 = mongoDBRiverDefinition22.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject33 = mongoDBRiverDefinition22.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder15.mongoOplogFilter(basicDBObject33);
        builder5.mongoOplogFilter = basicDBObject33;
        java.lang.String str36 = builder5.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.socketTimeout((int) ' ');
        builder40.importAllCollections = false;
        builder40.throttleSize = (byte) 10;
        java.lang.String str45 = builder40.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder40.mongoCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder48.setmongoOplogFilter(basicDBObject51);
        boolean boolean53 = builder48.importAllCollections;
        builder48.setmongoGridFS(false);
        builder48.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder63.mongoAdminPassword("");
        java.lang.String[] strArray70 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder66.excludeFields = strSet71;
        builder60.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder48.parentTypes((java.util.Set<java.lang.String>) strSet71);
        builder40.includeFields = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder5.excludeFields((java.util.Set<java.lang.String>) strSet71);
        java.lang.String str78 = builder77.mongoCollection;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "script" + "'", str27, "script");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "drop_collection" + "'", str30, "drop_collection");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test3884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.importAllCollections(true);
        java.lang.String str13 = builder8.mongoLocalPassword;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript14 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoAdminPassword("");
        java.lang.String[] strArray23 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder19.excludeFields = strSet24;
        java.lang.String str27 = builder19.indexName;
        docScoreSearchScript14.setNextVar("actions", (java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder38.excludeFields = strSet43;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet43);
        docScoreSearchScript14.setNextVar("type", (java.lang.Object) strSet43);
        builder8.parentTypes = strSet43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet43);
        java.lang.String[] strArray86 = new java.lang.String[] { "script", "socket_timeout", "mongodb-1638820218449", "ssl", "socket_timeout", "actions", "gridfs", "socket_timeout", "mongodb-1638820218363", "secondary_read_preference", "gridfs", "mongodb-1638820218299", "_river", "mongodb-1638820218363", "skip_initial_import", "concurrent_requests", "mongodb-1638820218387", "parent_types", "initial_timestamp", "password", "concurrent_requests", "include_fields", "initial_timestamp", "type", "name", "mongodb-1638820218424", "script", "mongodb-1638820218363", "db", "filter", "gridfs", "initial_timestamp", "_river", "mongodb-1638820218326", "user", "concurrent_bulk_requests.null" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        builder2.excludeFields = strSet87;
        builder2.connectTimeout = 100;
        java.lang.String str92 = builder2.mongoAdminPassword;
        java.lang.String str93 = builder2.getindexName();
        boolean boolean94 = builder2.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test3885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int5 = mongoDBRiverDefinition2.getThrottleSize();
        boolean boolean6 = mongoDBRiverDefinition2.storeStatistics;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_TIMEOUT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverIndexName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "import_all_collections" + "'", str4, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3886");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218387" + "'", str7, "mongodb-1638820218387");
    }

    @Test
    public void test3887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        int int3 = builder2.getsocketTimeout();
        builder2.includeCollection = "mongodb-1638820218299";
        java.util.Set<java.lang.String> strSet6 = builder2.excludeFields;
        boolean boolean7 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoAdminPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.mongoLocalUser = "store_statistics";
        int int19 = builder15.connectTimeout;
        java.util.Set<java.lang.String> strSet20 = builder15.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.riverName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoAdminPassword("");
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder31.excludeFields = strSet36;
        builder25.setexcludeFields((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder25.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        boolean boolean43 = builder41.dropCollection;
        boolean boolean44 = builder41.storeStatistics;
        java.util.Set<java.lang.String> strSet45 = builder41.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder15.includeFields(strSet45);
        builder12.setparentTypes(strSet45);
        builder2.setparentTypes(strSet45);
        builder2.socketTimeout = (short) 10;
        java.lang.String str51 = builder2.getscriptType();
        builder2.mongoSecondaryReadPreference = true;
        builder2.setincludeCollection("actions");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test3888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        int int8 = builder0.connectTimeout;
        java.lang.String str9 = builder0.scriptType;
        java.lang.String str10 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder0.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.riverIndexName = "size";
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardTimestamp11);
    }

    @Test
    public void test3889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        builder0.setconnectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.mongoClientOptions(mongoClientOptions6);
        com.mongodb.BasicDBObject basicDBObject8 = builder7.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.gettypeName();
        builder11.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.mongoAdminPassword("");
        java.lang.String[] strArray37 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder33.excludeFields = strSet38;
        builder27.setexcludeFields((java.util.Set<java.lang.String>) strSet38);
        builder24.parentTypes = strSet38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.mongoAdminPassword("");
        java.lang.String[] strArray55 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder51.excludeFields = strSet56;
        builder45.setexcludeFields((java.util.Set<java.lang.String>) strSet56);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder18.includeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder17.includeFields((java.util.Set<java.lang.String>) strSet56);
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder0.includeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder0.typeName("type");
        java.lang.String str67 = builder0.getindexName();
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test3890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        builder9.setmongoLocalPassword("host");
        boolean boolean17 = builder9.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str19 = mongoDBRiverDefinition18.getSIZE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition18.getIndexName();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition18.getIncludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strSet21);
    }

    @Test
    public void test3891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.statisticsIndexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoLocalPassword("advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.mongoAdminPassword("");
        java.lang.String[] strArray36 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder32.excludeFields = strSet37;
        builder26.setexcludeFields((java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder26.mongoSecondaryReadPreference(false);
        boolean boolean43 = builder42.storeStatistics;
        builder42.mongoSecondaryReadPreference = true;
        builder42.setmongoLocalPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder48.setmongoOplogFilter(basicDBObject51);
        java.lang.String str53 = builder48.getmongoLocalPassword();
        builder48.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        builder56.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        com.mongodb.BasicDBObject basicDBObject64 = null;
        builder61.setmongoOplogFilter(basicDBObject64);
        boolean boolean66 = builder61.importAllCollections;
        java.lang.String[] strArray80 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        builder61.parentTypes = strSet81;
        builder56.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder48.includeFields((java.util.Set<java.lang.String>) strSet81);
        builder42.excludeFields = strSet81;
        builder19.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        builder18.excludeFields = strSet81;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder18.script("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test3893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        boolean boolean19 = builder18.storeStatistics;
        builder18.setmongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        builder22.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.importAllCollections(true);
        builder22.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray54 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder33.excludeFields = strSet55;
        builder22.includeFields = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder18.setmongoGridFS(false);
        builder18.mongoLocalPassword = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        builder64.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        com.mongodb.BasicDBObject basicDBObject72 = null;
        builder69.setmongoOplogFilter(basicDBObject72);
        boolean boolean74 = builder69.importAllCollections;
        java.lang.String[] strArray88 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder69.parentTypes = strSet89;
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        builder18.parentTypes = strSet89;
        builder18.mongoSSLVerifyCertificate = false;
        builder18.setmongoAdminPassword("socket_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test3894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3894");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean6 = mongoDBRiverDefinition1.mongoGridFS;
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str8 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_bulk_requests" + "'", str8, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
    }

    @Test
    public void test3895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3895");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str7 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gridfs" + "'", str7, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3896");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218408" + "'", str5, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test3897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str12 = mongoDBRiverDefinition1.script;
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3898");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        java.lang.String str8 = builder5.mongoLocalPassword;
        builder5.mongoDb = "mongodb-1638820218264";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test3899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean6 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test3900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getSocketTimeout();
        int int6 = mongoDBRiverDefinition2.getThrottleSize();
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str8 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(eSLogger7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
    }

    @Test
    public void test3901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean12 = mongoDBRiverDefinition11.storeStatistics;
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition11.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition11.includeCollection;
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str19 = mongoDBRiverDefinition11.getDROP_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition11.mongoAdminPassword;
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder9.mongoOplogFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.statisticsTypeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder23.mongoLocalPassword("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoAdminUser("disable_index_refresh");
        boolean boolean33 = builder30.getimportAllCollections();
        builder30.setmongoCollection("mongodb-1638820218387");
        builder30.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder30.mongoLocalUser("null.null");
        builder39.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        builder39.mongoCollectionFilter = basicDBObject45;
        builder27.setmongoCollectionFilter(basicDBObject45);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "drop_collection" + "'", str19, "drop_collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
    }

    @Test
    public void test3902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3902");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition19.mongoOplogFilter;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = mongoDBRiverDefinition19.initialTimestamp;
        java.lang.String str26 = mongoDBRiverDefinition19.getSECONDARY_READ_PREFERENCE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter27 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str28 = serializedObjectSupporter27.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter27.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings30 = serializedObjectSupporter27.deserializeObjectRiverSettings5();
        java.lang.String str31 = serializedObjectSupporter27.deserializeObjectString3();
        java.lang.String str32 = serializedObjectSupporter27.deserializeObjectString12();
        java.lang.String str33 = serializedObjectSupporter27.deserializeObjectString16();
        mongoDBRiverDefinition19.serializedObjectSupporter = serializedObjectSupporter27;
        int int35 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "initial_timestamp" + "'", str23, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "secondary_read_preference" + "'", str26, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertNull(riverSettings29);
        org.junit.Assert.assertNull(riverSettings30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb-1638820218264" + "'", str31, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_river" + "'", str32, "_river");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27017 + "'", int35 == 27017);
    }

    @Test
    public void test3903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.typeName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter22 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter22.deserializeObjectRiverSettings4();
        java.lang.String str24 = serializedObjectSupporter22.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter22.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings26 = serializedObjectSupporter22.deserializeObjectRiverSettings9();
        java.lang.String str27 = serializedObjectSupporter22.deserializeObjectString1();
        mongoDBRiverDefinition19.serializedObjectSupporter = serializedObjectSupporter22;
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter22.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(riverSettings23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb-1638820218387" + "'", str24, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings25);
        org.junit.Assert.assertNull(riverSettings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820217755" + "'", str27, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings29);
    }

    @Test
    public void test3904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.dropCollection(false);
        builder11.setmongoGridFS(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.getmongoServers();
        builder2.setthrottleSize((int) (byte) 10);
        java.util.Set<java.lang.String> strSet8 = builder2.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoClientOptions(mongoClientOptions9);
        int int11 = builder10.getconnectTimeout();
        builder10.setmongoLocalUser("mongodb-1638820218363");
        builder10.mongoAdminUser = "exclude_fields";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3906");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.getIncludeFields();
        boolean boolean5 = mongoDBRiverDefinition2.getstoreStatistics();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.excludeFields;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test3907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str5 = mongoDBRiverDefinition2.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str8 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        int int9 = mongoDBRiverDefinition2.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "store_statistics" + "'", str5, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "parent_types" + "'", str8, "parent_types");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoAdminPassword("");
        java.lang.String[] strArray14 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder10.excludeFields = strSet15;
        builder4.setexcludeFields((java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder4.mongoSecondaryReadPreference(false);
        boolean boolean21 = builder20.storeStatistics;
        builder20.setmongoLocalUser("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        builder24.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.importAllCollections(true);
        builder24.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray56 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder35.excludeFields = strSet57;
        builder24.includeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet57);
        boolean boolean63 = builder0.getdisableIndexRefresh();
        builder0.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder0.mongoAdminUser("mongodb-1638820218363");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test3909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.riverIndexName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test3910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        builder2.setscript("throttle_size");
        boolean boolean5 = builder2.disableIndexRefresh;
        boolean boolean6 = builder2.storeStatistics;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str8 = builder2.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.indexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.advancedTransformation(true);
        builder12.mongoLocalPassword = "mongodb-1638820218299";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3912");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isSkipInitialImport();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition2.initialTimestamp;
        int int6 = mongoDBRiverDefinition2.getThrottleSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        int int8 = mongoDBRiverDefinition2.getSocketTimeout();
        boolean boolean9 = mongoDBRiverDefinition2.isSkipInitialImport();
        boolean boolean10 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str11 = mongoDBRiverDefinition2.getIndexName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean10 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test3914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3914");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.mongoAdminPassword("");
        java.lang.String[] strArray8 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        builder4.excludeFields = strSet9;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder4.initialTimestamp;
        boolean boolean13 = builder4.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter14.deserializeObjectRiverSettings4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString16();
        builder4.serializedObjectSupporter = serializedObjectSupporter14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder4.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoClientOptions(mongoClientOptions21);
        int int23 = builder20.getsocketTimeout();
        boolean boolean24 = builder20.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoDb("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet36 = builder33.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder33.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder38.riverIndexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        builder43.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder48.mongoAdminPassword("");
        java.lang.String[] strArray55 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder51.excludeFields = strSet56;
        com.mongodb.BasicDBObject basicDBObject59 = builder51.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder43.mongoOplogFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder42.mongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder42.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        boolean boolean66 = mongoDBRiverDefinition65.storeStatistics;
        boolean boolean67 = mongoDBRiverDefinition65.isDisableIndexRefresh();
        java.lang.String str68 = mongoDBRiverDefinition65.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet69 = mongoDBRiverDefinition65.getIncludeFields();
        java.lang.String str70 = mongoDBRiverDefinition65.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str71 = mongoDBRiverDefinition65.includeCollection;
        java.lang.String str72 = mongoDBRiverDefinition65.getMongoAdminPassword();
        boolean boolean73 = mongoDBRiverDefinition65.getmongoUseSSL();
        boolean boolean74 = mongoDBRiverDefinition65.isStoreStatistics();
        java.util.Set<java.lang.String> strSet75 = mongoDBRiverDefinition65.excludeFields;
        java.lang.String str76 = mongoDBRiverDefinition65.getRiverIndexName();
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        builder42.mongoOplogFilter = basicDBObject77;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder28.mongoOplogFilter(basicDBObject77);
        builder19.setmongoOplogFilter(basicDBObject77);
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "script" + "'", str70, "script");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test3915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        builder0.setconnectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.getDB_FIELD();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getParentTypes();
        boolean boolean24 = mongoDBRiverDefinition19.mongoSSLVerifyCertificate;
        java.lang.String str25 = mongoDBRiverDefinition19.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "db" + "'", str22, "db");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test3917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet7 = builder6.getparentTypes();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder6.initialTimestamp;
        boolean boolean9 = builder6.getimportAllCollections();
        builder6.scriptType = "local";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3918");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218264" + "'", str6, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test3919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition19.getPARENT_TYPES_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition19.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "flush_interval" + "'", str21, "flush_interval");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "parent_types" + "'", str22, "parent_types");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bulk_size" + "'", str23, "bulk_size");
    }

    @Test
    public void test3920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3920");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        boolean boolean23 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.riverName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        builder26.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.importAllCollections(true);
        java.lang.String str33 = builder32.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.statisticsIndexName("_river");
        builder35.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder35.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder40.setmongoOplogFilter(basicDBObject43);
        boolean boolean45 = builder40.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        boolean boolean48 = mongoDBRiverDefinition47.storeStatistics;
        boolean boolean49 = mongoDBRiverDefinition47.isDisableIndexRefresh();
        java.lang.String str50 = mongoDBRiverDefinition47.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition47.getIncludeFields();
        java.lang.String str52 = mongoDBRiverDefinition47.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition47.includeCollection;
        java.lang.String str54 = mongoDBRiverDefinition47.getMongoAdminPassword();
        java.lang.String str55 = mongoDBRiverDefinition47.getDROP_COLLECTION_FIELD();
        java.lang.String str56 = mongoDBRiverDefinition47.mongoAdminPassword;
        java.lang.String str57 = mongoDBRiverDefinition47.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject58 = mongoDBRiverDefinition47.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder40.mongoOplogFilter(basicDBObject58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder39.mongoOplogFilter(basicDBObject58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str62 = builder61.gettypeName();
        builder61.setmongoDb("concurrent_bulk_requests");
        builder61.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder61.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder61.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        boolean boolean73 = mongoDBRiverDefinition72.storeStatistics;
        boolean boolean74 = mongoDBRiverDefinition72.isDisableIndexRefresh();
        java.lang.String str75 = mongoDBRiverDefinition72.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet76 = mongoDBRiverDefinition72.getIncludeFields();
        java.lang.String str77 = mongoDBRiverDefinition72.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str78 = mongoDBRiverDefinition72.includeCollection;
        java.lang.String str79 = mongoDBRiverDefinition72.getMongoAdminPassword();
        java.lang.String str80 = mongoDBRiverDefinition72.getDROP_COLLECTION_FIELD();
        java.lang.String str81 = mongoDBRiverDefinition72.mongoAdminPassword;
        java.lang.String str82 = mongoDBRiverDefinition72.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition72.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder70.mongoOplogFilter(basicDBObject83);
        builder60.mongoCollectionFilter = basicDBObject83;
        builder25.setmongoOplogFilter(basicDBObject83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "script" + "'", str52, "script");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "drop_collection" + "'", str55, "drop_collection");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "script" + "'", str77, "script");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "drop_collection" + "'", str80, "drop_collection");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test3921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        builder13.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.statisticsIndexName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder13.script("local");
        java.lang.String str21 = builder13.script;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "local" + "'", str21, "local");
    }

    @Test
    public void test3922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder2.getmongoServers();
        builder2.setthrottleSize((int) (byte) 10);
        java.util.Set<java.lang.String> strSet8 = builder2.parentTypes;
        builder2.storeStatistics = false;
        builder2.mongoSSLVerifyCertificate = true;
        builder2.setincludeCollection("size");
        builder2.disableIndexRefresh = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test3923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3923");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218449" + "'", str1, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
    }

    @Test
    public void test3924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3924");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getDEFAULT_DB_HOST();
        java.lang.String str22 = mongoDBRiverDefinition19.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean23 = mongoDBRiverDefinition19.dropCollection;
        java.lang.String str24 = mongoDBRiverDefinition19.indexName;
        boolean boolean25 = mongoDBRiverDefinition19.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "localhost" + "'", str21, "localhost");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "secondary_read_preference" + "'", str22, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test3925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition4.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoOplogNamespace();
        java.lang.String str10 = mongoDBRiverDefinition4.getUSER_FIELD();
        boolean boolean11 = mongoDBRiverDefinition4.disableIndexRefresh;
        boolean boolean12 = mongoDBRiverDefinition4.getskipInitialImport();
        java.lang.String str13 = mongoDBRiverDefinition4.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_bulk_requests.null" + "'", str9, "concurrent_bulk_requests.null");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "user" + "'", str10, "user");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3926");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.skipInitialImport;
        boolean boolean6 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        boolean boolean13 = builder8.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoCollectionFilter(basicDBObject21);
        builder22.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.riverIndexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder30.mongoGridFS = true;
        boolean boolean40 = builder30.mongoSSLVerifyCertificate;
        int int41 = builder30.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder42.setmongoOplogFilter(basicDBObject45);
        java.lang.String str47 = builder42.getmongoLocalPassword();
        builder42.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder55.setmongoOplogFilter(basicDBObject58);
        boolean boolean60 = builder55.importAllCollections;
        java.lang.String[] strArray74 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder55.parentTypes = strSet75;
        builder50.setparentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder42.includeFields((java.util.Set<java.lang.String>) strSet75);
        builder30.parentTypes = strSet75;
        builder22.excludeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder8.includeFields((java.util.Set<java.lang.String>) strSet75);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet75);
        java.lang.String str84 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean86 = builder0.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test3927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int4 = mongoDBRiverDefinition3.socketTimeout;
        boolean boolean5 = mongoDBRiverDefinition3.advancedTransformation;
        boolean boolean6 = mongoDBRiverDefinition3.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3928");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSecondaryReadPreference(true);
        java.lang.String str8 = builder7.getstatisticsTypeName();
        builder7.skipInitialImport = true;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test3929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.mongoAdminUser;
        java.lang.String str23 = mongoDBRiverDefinition19.script;
        java.lang.String str24 = mongoDBRiverDefinition19.scriptType;
        java.lang.String str25 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disable_index_refresh" + "'", str22, "disable_index_refresh");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "script_type" + "'", str25, "script_type");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
    }

    @Test
    public void test3931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder6.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        boolean boolean24 = builder22.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject32 = builder31.getmongoCollectionFilter();
        builder22.setmongoCollectionFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder3.mongoCollectionFilter(basicDBObject32);
        boolean boolean35 = builder3.getdisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions36 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder3.mongoClientOptions(mongoClientOptions36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder3.mongoSSLVerifyCertificate(true);
        java.lang.String str40 = builder39.getindexName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test3932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3932");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        java.lang.String str2 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.script("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoLocalPassword("user");
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.getmongoClientOptions();
        builder22.disableIndexRefresh = true;
        builder22.throttleSize = 97;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mongoClientOptions23);
    }

    @Test
    public void test3934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        boolean boolean6 = builder5.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoDb("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.socketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3935");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        builder3.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoAdminUser("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.setthrottleSize((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder45.setmongoOplogFilter(basicDBObject48);
        builder45.setmongoCollection("name");
        boolean boolean52 = builder45.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        builder45.script = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        java.util.Set<java.lang.String> strSet59 = builder58.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder58.typeName("port");
        builder61.mongoCollection = "index";
        boolean boolean64 = builder61.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet65 = builder61.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        com.mongodb.BasicDBObject basicDBObject69 = null;
        builder66.setmongoOplogFilter(basicDBObject69);
        boolean boolean71 = builder66.importAllCollections;
        builder66.setmongoGridFS(false);
        builder66.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder81.mongoAdminPassword("");
        java.lang.String[] strArray88 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder84.excludeFields = strSet89;
        builder78.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder66.parentTypes((java.util.Set<java.lang.String>) strSet89);
        builder61.excludeFields = strSet89;
        builder45.setincludeFields((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder41.includeFields((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder96.mongoSSLVerifyCertificate(false);
        java.lang.String str99 = builder98.getriverIndexName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test3936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = builder0.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoClientOptions(mongoClientOptions39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("disable_index_refresh");
        java.lang.String str43 = builder42.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoClientOptions(mongoClientOptions45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject49 = builder48.mongoCollectionFilter;
        builder42.mongoCollectionFilter = basicDBObject49;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.gettypeName();
        builder52.setmongoDb("concurrent_bulk_requests");
        builder52.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder52.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet60 = builder59.getparentTypes();
        java.lang.String str61 = builder59.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory62 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.lang.String str66 = mongoDBRiverDefinition65.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str67 = mongoDBRiverDefinition65.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList68 = mongoDBRiverDefinition65.getMongoServers();
        boolean boolean69 = mongoDBRiverDefinition65.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition65.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript71 = docScoreNativeScriptFactory62.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject70);
        builder59.mongoCollectionFilter = basicDBObject70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder42.mongoOplogFilter(basicDBObject70);
        builder42.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        java.lang.String str79 = mongoDBRiverDefinition78.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str80 = mongoDBRiverDefinition78.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList81 = mongoDBRiverDefinition78.getMongoServers();
        boolean boolean82 = mongoDBRiverDefinition78.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition78.getMongoCollectionFilter();
        builder42.mongoCollectionFilter = basicDBObject83;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder0.mongoOplogFilter(basicDBObject83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder0.indexName("advanced_transformation");
        builder0.setriverName("script");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(serializedObjectSupporter37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disable_index_refresh" + "'", str66, "disable_index_refresh");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(serverAddressList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(executableScript71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "disable_index_refresh" + "'", str79, "disable_index_refresh");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(serverAddressList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test3937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        boolean boolean8 = builder0.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder0.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(serverAddressList9);
    }

    @Test
    public void test3938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        int int8 = builder0.connectTimeout;
        boolean boolean9 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.socketTimeout((int) '#');
        boolean boolean12 = builder0.dropCollection;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.statisticsTypeName("skip_initial_import");
        builder11.storeStatistics = true;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        boolean boolean4 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.storeStatistics(false);
        com.mongodb.BasicDBObject basicDBObject7 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
    }

    @Test
    public void test3941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str21 = mongoDBRiverDefinition20.getMongoDb();
        boolean boolean22 = mongoDBRiverDefinition20.mongoSSLVerifyCertificate;
        java.lang.String str23 = mongoDBRiverDefinition20.mongoLocalUser;
        java.lang.String str24 = mongoDBRiverDefinition20.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bulk_timeout" + "'", str24, "bulk_timeout");
    }

    @Test
    public void test3942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        builder0.mongoLocalUser = "mongodb-1638820218387";
        java.util.Set<java.lang.String> strSet22 = builder0.excludeFields;
        boolean boolean23 = builder0.advancedTransformation;
        boolean boolean24 = builder0.getdisableIndexRefresh();
        builder0.mongoGridFS = false;
        builder0.mongoAdminUser = "connect_timeout";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test3943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder2.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        boolean boolean24 = builder2.mongoUseSSL;
        java.util.Set<java.lang.String> strSet25 = builder2.parentTypes;
        java.lang.String str26 = builder2.script;
        boolean boolean27 = builder2.getmongoGridFS();
        java.util.Set<java.lang.String> strSet28 = builder2.includeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "flush_interval" + "'", str26, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
    }

    @Test
    public void test3944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.gettypeName();
        builder9.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str14 = mongoDBRiverDefinition13.getFILTER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition13.mongoCollectionFilter;
        java.lang.String str17 = mongoDBRiverDefinition13.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder7.mongoServers = serverAddressList18;
        java.lang.String str20 = builder7.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "filter" + "'", str14, "filter");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script" + "'", str17, "script");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test3945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3945");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.dropCollection(true);
        builder20.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.connectTimeout((int) (byte) 1);
        java.lang.String str26 = builder25.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3946");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean4 = mongoDBRiverDefinition3.mongoGridFS;
        java.lang.String str5 = mongoDBRiverDefinition3.riverIndexName;
        java.lang.String str6 = mongoDBRiverDefinition3.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
    }

    @Test
    public void test3947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        boolean boolean6 = builder4.disableIndexRefresh;
        java.lang.String str7 = builder4.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        com.mongodb.BasicDBObject basicDBObject9 = builder4.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(basicDBObject9);
    }

    @Test
    public void test3948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        java.lang.String str5 = mongoDBRiverDefinition2.scriptType;
        java.lang.String str6 = mongoDBRiverDefinition2.getBULK_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.scriptType;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk" + "'", str6, "bulk");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test3949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder8.initialTimestamp;
        boolean boolean17 = builder8.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter18 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter18.deserializeObjectRiverSettings4();
        java.lang.String str20 = serializedObjectSupporter18.deserializeObjectString16();
        builder8.serializedObjectSupporter = serializedObjectSupporter18;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder8.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        int int27 = builder24.getsocketTimeout();
        boolean boolean28 = builder24.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder24.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoDb("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet40 = builder37.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder37.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder42.riverIndexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        builder47.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.mongoAdminPassword("");
        java.lang.String[] strArray59 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder55.excludeFields = strSet60;
        com.mongodb.BasicDBObject basicDBObject63 = builder55.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder47.mongoOplogFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder46.mongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder46.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        boolean boolean70 = mongoDBRiverDefinition69.storeStatistics;
        boolean boolean71 = mongoDBRiverDefinition69.isDisableIndexRefresh();
        java.lang.String str72 = mongoDBRiverDefinition69.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet73 = mongoDBRiverDefinition69.getIncludeFields();
        java.lang.String str74 = mongoDBRiverDefinition69.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str75 = mongoDBRiverDefinition69.includeCollection;
        java.lang.String str76 = mongoDBRiverDefinition69.getMongoAdminPassword();
        boolean boolean77 = mongoDBRiverDefinition69.getmongoUseSSL();
        boolean boolean78 = mongoDBRiverDefinition69.isStoreStatistics();
        java.util.Set<java.lang.String> strSet79 = mongoDBRiverDefinition69.excludeFields;
        java.lang.String str80 = mongoDBRiverDefinition69.getRiverIndexName();
        com.mongodb.BasicDBObject basicDBObject81 = mongoDBRiverDefinition69.getMongoCollectionFilter();
        builder46.mongoOplogFilter = basicDBObject81;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder32.mongoOplogFilter(basicDBObject81);
        builder23.setmongoOplogFilter(basicDBObject81);
        builder2.setmongoOplogFilter(basicDBObject81);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(riverSettings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_river" + "'", str20, "_river");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "script" + "'", str74, "script");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test3950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        boolean boolean19 = builder18.storeStatistics;
        builder18.mongoSecondaryReadPreference = true;
        builder18.setmongoLocalPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder24.setmongoOplogFilter(basicDBObject27);
        java.lang.String str29 = builder24.getmongoLocalPassword();
        builder24.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        builder32.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder37.setmongoOplogFilter(basicDBObject40);
        boolean boolean42 = builder37.importAllCollections;
        java.lang.String[] strArray56 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder37.parentTypes = strSet57;
        builder32.setparentTypes((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder24.includeFields((java.util.Set<java.lang.String>) strSet57);
        builder18.excludeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder18.mongoLocalPassword("password");
        builder18.script = "bulk_size";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test3951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str9 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "credentials" + "'", str11, "credentials");
    }

    @Test
    public void test3952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        builder0.mongoLocalPassword = "concurrent_bulk_requests";
        builder0.setscriptType("flush_interval");
        builder0.setdropCollection(true);
        builder0.scriptType = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.statisticsIndexName("skip_initial_import");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder0.getmongoClientOptions();
        builder0.mongoLocalUser = "concurrent_requests";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mongoClientOptions18);
    }

    @Test
    public void test3953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        builder11.setstatisticsIndexName("password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        boolean boolean7 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.script = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.typeName("port");
        builder16.mongoCollection = "index";
        boolean boolean19 = builder16.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet20 = builder16.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        boolean boolean26 = builder21.importAllCollections;
        builder21.setmongoGridFS(false);
        builder21.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoAdminPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder39.excludeFields = strSet44;
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet44);
        builder16.excludeFields = strSet44;
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet44);
        java.lang.String str51 = builder0.getincludeCollection();
        builder0.advancedTransformation = false;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test3955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        builder0.mongoAdminPassword = "disable_index_refresh";
        builder0.setmongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet28 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter29 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str30 = serializedObjectSupporter29.deserializeObjectString11();
        java.lang.String str31 = serializedObjectSupporter29.deserializeObjectString17();
        java.lang.String str32 = serializedObjectSupporter29.deserializeObjectString9();
        java.lang.String str33 = serializedObjectSupporter29.deserializeObjectString12();
        builder0.serializedObjectSupporter = serializedObjectSupporter29;
        org.elasticsearch.river.RiverSettings riverSettings35 = serializedObjectSupporter29.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings36 = serializedObjectSupporter29.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings37 = serializedObjectSupporter29.deserializeObjectRiverSettings4();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218387" + "'", str30, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb-1638820218449" + "'", str31, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218363" + "'", str32, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertNull(riverSettings35);
        org.junit.Assert.assertNull(riverSettings36);
        org.junit.Assert.assertNull(riverSettings37);
    }

    @Test
    public void test3956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        builder0.mongoAdminPassword = "disable_index_refresh";
        builder0.setmongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet28 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter29 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str30 = serializedObjectSupporter29.deserializeObjectString11();
        java.lang.String str31 = serializedObjectSupporter29.deserializeObjectString17();
        java.lang.String str32 = serializedObjectSupporter29.deserializeObjectString9();
        java.lang.String str33 = serializedObjectSupporter29.deserializeObjectString12();
        builder0.serializedObjectSupporter = serializedObjectSupporter29;
        java.util.Set<java.lang.String> strSet35 = builder0.getexcludeFields();
        boolean boolean36 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218387" + "'", str30, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "mongodb-1638820218449" + "'", str31, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218363" + "'", str32, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3957");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter13.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertNull(riverSettings18);
    }

    @Test
    public void test3958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.scriptType("mongodb-1638820218387");
        java.lang.String str9 = builder6.getriverName();
        java.util.Set<java.lang.String> strSet10 = builder6.includeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test3959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean6 = mongoDBRiverDefinition1.getmongoGridFS();
        boolean boolean7 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "collection" + "'", str9, "collection");
    }

    @Test
    public void test3960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getPORT_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition19.mongoOplogFilter;
        java.lang.String str27 = mongoDBRiverDefinition19.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "port" + "'", str23, "port");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "initial_timestamp" + "'", str24, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "advanced_transformation" + "'", str27, "advanced_transformation");
    }

    @Test
    public void test3961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.mongoLocalUser;
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition2.getlogger();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition2.includeFields;
        boolean boolean14 = mongoDBRiverDefinition2.isMongoUseSSL();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.riverIndexName;
        boolean boolean9 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str10 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondary_read_preference" + "'", str10, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "connect_timeout" + "'", str12, "connect_timeout");
    }

    @Test
    public void test3963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.getmongoServers();
        builder11.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test3964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3964");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder3.setsocketTimeout((int) (short) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.importAllCollections(false);
        builder3.setriverName("parent_types");
        builder3.typeName = "socket_timeout";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = builder3.serializedObjectSupporter;
        java.lang.String str13 = builder3.typeName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = builder3.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
        org.junit.Assert.assertNull(serializedObjectSupporter14);
    }

    @Test
    public void test3965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition4.getInitialTimestamp();
        java.lang.String str8 = mongoDBRiverDefinition4.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition4.getdropCollection();
        java.lang.String str10 = mongoDBRiverDefinition4.getCOLLECTION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition4.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isImportAllCollections();
        java.lang.String str4 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.mongoCollectionFilter;
        boolean boolean7 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "advanced_transformation" + "'", str5, "advanced_transformation");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3967");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition2.getlogger();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertNotNull(eSLogger8);
    }

    @Test
    public void test3968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        int int3 = builder2.getsocketTimeout();
        builder2.includeCollection = "mongodb-1638820218299";
        java.util.Set<java.lang.String> strSet6 = builder2.excludeFields;
        boolean boolean7 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoAdminPassword("port");
        builder9.socketTimeout = (-1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoAdminUser();
        java.lang.String str10 = mongoDBRiverDefinition2.indexName;
        java.lang.String str11 = mongoDBRiverDefinition2.mongoDb;
        java.lang.String str12 = mongoDBRiverDefinition2.getUSER_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
    }

    @Test
    public void test3970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3970");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        boolean boolean11 = builder4.mongoUseSSL;
        java.lang.String str12 = builder4.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.mongoAdminPassword("");
        java.lang.String[] strArray25 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder21.excludeFields = strSet26;
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder15.mongoUseSSL(false);
        java.util.Set<java.lang.String> strSet32 = builder31.excludeFields;
        builder4.parentTypes = strSet32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.mongoLocalUser = "localhost";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder4.riverName("script_type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        boolean boolean9 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.dropCollection(true);
        java.lang.String str12 = builder11.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.indexName("include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        java.lang.String str5 = builder0.getmongoLocalPassword();
        builder0.mongoSSLVerifyCertificate = false;
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter10.deserializeObjectRiverSettings4();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter10.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter10.deserializeObjectRiverSettings9();
        java.lang.String str15 = serializedObjectSupporter10.deserializeObjectString1();
        java.lang.String str16 = serializedObjectSupporter10.deserializeObjectString16();
        java.lang.String str17 = serializedObjectSupporter10.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter10.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter10.deserializeObjectRiverSettings6();
        builder0.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str21 = builder0.gettypeName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218387" + "'", str12, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820217755" + "'", str15, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218408" + "'", str17, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings18);
        org.junit.Assert.assertNull(riverSettings19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test3973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str10 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_timeout" + "'", str10, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet17 = builder13.getexcludeFields();
        java.lang.String str18 = builder13.getriverName();
        java.lang.String str19 = builder13.includeCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        builder0.setconnectTimeout((int) '#');
        java.lang.String str25 = builder0.statisticsTypeName;
        builder0.indexName = "script";
        builder0.socketTimeout = (short) 10;
        builder0.mongoAdminPassword = "ssl";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("disable_index_refresh");
        java.lang.String str37 = builder36.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList38 = builder36.mongoServers;
        java.util.List<com.mongodb.ServerAddress> serverAddressList39 = builder36.getmongoServers();
        builder0.setmongoServers(serverAddressList39);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "disable_index_refresh" + "'", str37, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList38);
        org.junit.Assert.assertNotNull(serverAddressList39);
    }

    @Test
    public void test3976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition4.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition4.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoOplogNamespace();
        java.lang.String str10 = mongoDBRiverDefinition4.getUSER_FIELD();
        int int11 = mongoDBRiverDefinition4.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_bulk_requests.null" + "'", str9, "concurrent_bulk_requests.null");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "user" + "'", str10, "user");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test3977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "skip_initial_import" + "'", str4, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_collection" + "'", str6, "include_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "password" + "'", str7, "password");
    }

    @Test
    public void test3978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3978");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.script;
        boolean boolean14 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str15 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str16 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "name" + "'", str16, "name");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder2.mongoSSLVerifyCertificate = true;
        org.bson.types.Binary binary8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.initialTimestamp(binary8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder6.setadvancedTransformation(false);
        builder6.setmongoLocalPassword("skip_initial_import");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter11.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter11.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings9();
        builder6.serializedObjectSupporter = serializedObjectSupporter11;
        builder6.indexName = "filter";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertNull(riverSettings15);
    }

    @Test
    public void test3981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder2.mongoClientOptions = mongoClientOptions8;
        builder2.skipInitialImport = true;
        builder2.socketTimeout = 27017;
        builder2.setmongoDb("script_type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
    }

    @Test
    public void test3982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3982");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.mongoAdminUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSecondaryReadPreference(true);
        builder2.setindexName("type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str19 = builder17.mongoAdminPassword;
        java.lang.String str20 = builder17.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript21 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoAdminPassword("");
        java.lang.String[] strArray30 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder26.excludeFields = strSet31;
        java.lang.String str34 = builder26.indexName;
        docScoreSearchScript21.setNextVar("actions", (java.lang.Object) builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.mongoAdminPassword("");
        java.lang.String[] strArray49 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder45.excludeFields = strSet50;
        builder39.setexcludeFields((java.util.Set<java.lang.String>) strSet50);
        docScoreSearchScript21.setNextVar("type", (java.lang.Object) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder17.parentTypes((java.util.Set<java.lang.String>) strSet50);
        builder14.setincludeFields((java.util.Set<java.lang.String>) strSet50);
        boolean boolean57 = builder14.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test3984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getSERVERS_FIELD();
        int int21 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        int int22 = mongoDBRiverDefinition19.getThrottleSize();
        java.lang.String str23 = mongoDBRiverDefinition19.getMongoDb();
        java.lang.String str24 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.getskipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition19.getMongoServers();
        int int27 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "servers" + "'", str20, "servers");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "flush_interval" + "'", str24, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 27017 + "'", int27 == 27017);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disable_index_refresh" + "'", str28, "disable_index_refresh");
    }

    @Test
    public void test3985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = builder0.serializedObjectSupporter;
        builder0.mongoLocalPassword = "exclude_fields";
        int int40 = builder0.throttleSize;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(serializedObjectSupporter37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        int int3 = builder0.getsocketTimeout();
        boolean boolean4 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder0.serializedObjectSupporter;
        java.lang.String str6 = builder0.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test3987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        java.lang.String str8 = builder6.getmongoCollection();
        builder6.statisticsIndexName = "_river";
        java.lang.String str11 = builder6.riverName;
        java.lang.String str12 = builder6.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getHOST_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.statisticsTypeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.getMongoServers();
        boolean boolean11 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "host" + "'", str8, "host");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        builder3.setsocketTimeout((int) 'a');
        builder3.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
    }

    @Test
    public void test3990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.getTYPE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
    }

    @Test
    public void test3991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        boolean boolean8 = builder0.importAllCollections;
        builder0.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoAdminPassword("");
        java.lang.String[] strArray18 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        builder14.excludeFields = strSet19;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder14.initialTimestamp;
        boolean boolean23 = builder14.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter24.deserializeObjectRiverSettings4();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString16();
        builder14.serializedObjectSupporter = serializedObjectSupporter24;
        org.elasticsearch.river.RiverSettings riverSettings28 = serializedObjectSupporter24.deserializeObjectRiverSettings4();
        builder0.serializedObjectSupporter = serializedObjectSupporter24;
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoClientOptions(mongoClientOptions30);
        builder0.setmongoDb("mongodb-1638820218264");
        java.util.Set<java.lang.String> strSet34 = builder0.getexcludeFields();
        boolean boolean35 = builder0.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(riverSettings25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_river" + "'", str26, "_river");
        org.junit.Assert.assertNull(riverSettings28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test3992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.mongoOplogFilter;
        builder6.setindexName("script");
        builder6.mongoAdminPassword = "size";
        java.util.Set<java.lang.String> strSet12 = builder6.parentTypes;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str16 = serializedObjectSupporter13.deserializeObjectString17();
        builder6.serializedObjectSupporter = serializedObjectSupporter13;
        java.lang.String str18 = serializedObjectSupporter13.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter13.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter13.deserializeObjectRiverSettings1();
        java.lang.String str21 = serializedObjectSupporter13.deserializeObjectString1();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218387" + "'", str15, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218449" + "'", str16, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218408" + "'", str18, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings19);
        org.junit.Assert.assertNull(riverSettings20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820217755" + "'", str21, "mongodb-1638820217755");
    }

    @Test
    public void test3993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder2.mongoClientOptions(mongoClientOptions29);
        java.lang.String str31 = builder30.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test3994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3994");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(true);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoAdminPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder39.excludeFields = strSet44;
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder30.parentTypes = strSet44;
        int int49 = builder30.getconnectTimeout();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) int49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject57 = builder56.mongoCollectionFilter;
        boolean boolean58 = builder56.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.includeCollection("drop_collection");
        docScoreSearchScript0.setNextVar("store_statistics", (java.lang.Object) builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder56.mongoAdminPassword("advanced_transformation");
        java.util.Set<java.lang.String> strSet64 = builder63.getexcludeFields();
        builder63.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + 0 + "'", obj50, 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(strSet64);
    }

    @Test
    public void test3995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoAdminUser();
        boolean boolean6 = mongoDBRiverDefinition1.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(mongoClientOptions7);
    }

    @Test
    public void test3996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3996");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        java.lang.String str12 = builder7.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.indexName("hi!");
        java.lang.String str15 = builder7.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder14.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        boolean boolean22 = mongoDBRiverDefinition21.storeStatistics;
        boolean boolean23 = mongoDBRiverDefinition21.isDisableIndexRefresh();
        java.lang.String str24 = mongoDBRiverDefinition21.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition21.getIncludeFields();
        java.lang.String str26 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition21.includeCollection;
        java.lang.String str28 = mongoDBRiverDefinition21.getMongoAdminPassword();
        java.lang.String str29 = mongoDBRiverDefinition21.getDROP_COLLECTION_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition21.mongoAdminPassword;
        java.lang.String str31 = mongoDBRiverDefinition21.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition21.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder14.mongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder13.mongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.gettypeName();
        builder35.setmongoDb("concurrent_bulk_requests");
        builder35.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder35.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder35.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder45);
        boolean boolean47 = mongoDBRiverDefinition46.storeStatistics;
        boolean boolean48 = mongoDBRiverDefinition46.isDisableIndexRefresh();
        java.lang.String str49 = mongoDBRiverDefinition46.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet50 = mongoDBRiverDefinition46.getIncludeFields();
        java.lang.String str51 = mongoDBRiverDefinition46.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition46.includeCollection;
        java.lang.String str53 = mongoDBRiverDefinition46.getMongoAdminPassword();
        java.lang.String str54 = mongoDBRiverDefinition46.getDROP_COLLECTION_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition46.mongoAdminPassword;
        java.lang.String str56 = mongoDBRiverDefinition46.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject57 = mongoDBRiverDefinition46.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder44.mongoOplogFilter(basicDBObject57);
        builder34.mongoCollectionFilter = basicDBObject57;
        java.lang.String str60 = builder34.scriptType;
        java.util.Set<java.lang.String> strSet61 = builder34.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder34.mongoLocalPassword("type");
        builder63.setstatisticsIndexName("");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "script" + "'", str26, "script");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "drop_collection" + "'", str29, "drop_collection");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "script" + "'", str51, "script");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "drop_collection" + "'", str54, "drop_collection");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test3998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.gettypeName();
        builder14.setmongoDb("concurrent_bulk_requests");
        builder14.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet22 = builder21.getparentTypes();
        java.lang.String str23 = builder21.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str28 = mongoDBRiverDefinition27.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition27.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition27.getMongoServers();
        boolean boolean31 = mongoDBRiverDefinition27.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder21.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder4.mongoOplogFilter(basicDBObject32);
        builder4.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str41 = mongoDBRiverDefinition40.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition40.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList43 = mongoDBRiverDefinition40.getMongoServers();
        boolean boolean44 = mongoDBRiverDefinition40.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition40.getMongoCollectionFilter();
        builder4.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder4.indexName("");
        builder4.setstatisticsIndexName("type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disable_index_refresh" + "'", str28, "disable_index_refresh");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "disable_index_refresh" + "'", str41, "disable_index_refresh");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(serverAddressList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test3999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test3999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        builder0.setconnectTimeout((int) '#');
        com.mongodb.BasicDBObject basicDBObject25 = builder0.getmongoOplogFilter();
        java.lang.String str26 = builder0.getincludeCollection();
        java.util.Set<java.lang.String> strSet27 = builder0.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.statisticsIndexName("ssl");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test4000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test4000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        java.util.Set<java.lang.String> strSet15 = null;
        builder14.includeFields = strSet15;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
    }
}

