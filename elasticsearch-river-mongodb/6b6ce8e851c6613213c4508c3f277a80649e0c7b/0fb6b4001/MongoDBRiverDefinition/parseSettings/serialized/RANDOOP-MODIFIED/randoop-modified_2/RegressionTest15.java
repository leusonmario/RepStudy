import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test7501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        int int8 = builder0.connectTimeout;
        boolean boolean9 = builder0.getskipInitialImport();
        builder0.setmongoUseSSL(true);
        builder0.setscriptType("mongodb-1638820218264");
        builder0.setmongoCollection("skip_initial_import");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7502");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        com.mongodb.BasicDBObject basicDBObject16 = builder8.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.importAllCollections(true);
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test7503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        builder0.statisticsTypeName = "bulk_size";
        java.lang.String str25 = builder0.mongoDb;
        builder0.dropCollection = false;
        java.lang.String str28 = builder0.getmongoAdminUser();
        java.lang.String str29 = builder0.mongoCollection;
        java.lang.String str30 = builder0.typeName;
        builder0.mongoDb = "user";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test7504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder0.build();
        java.lang.String str6 = builder0.mongoCollection;
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test7505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder3.setsocketTimeout((int) (short) 10);
        boolean boolean6 = builder3.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        boolean boolean9 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean10 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.includeCollection;
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.mongoAdminPassword;
        java.lang.String str18 = mongoDBRiverDefinition8.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        builder3.setmongoCollectionFilter(basicDBObject19);
        java.lang.String str21 = builder3.includeCollection;
        builder3.mongoDb = "mongodb-1638820218387";
        builder3.mongoUseSSL = false;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "drop_collection" + "'", str16, "drop_collection");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test7506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7506");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsIndexName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.dropCollection(false);
        builder11.indexName = "parent_types";
        builder11.mongoSecondaryReadPreference = false;
        builder11.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7507");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder1.mongoAdminPassword("");
        builder4.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.script("throttle_size");
        int int9 = builder8.getconnectTimeout();
        com.mongodb.BasicDBObject basicDBObject10 = builder8.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test7508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        com.mongodb.BasicDBObject basicDBObject16 = builder8.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.script("secondary_read_preference");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        builder0.setmongoClientOptions(mongoClientOptions20);
        builder0.indexName = "parent_types";
        boolean boolean24 = builder0.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test7509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7509");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test7510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        java.lang.String str5 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test7511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.typeName;
        java.lang.String str13 = mongoDBRiverDefinition10.getMongoAdminUser();
        java.lang.String str14 = mongoDBRiverDefinition10.getSCRIPT_FIELD();
        boolean boolean15 = mongoDBRiverDefinition10.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition10.getTHROTTLE_SIZE_FIELD();
        int int17 = mongoDBRiverDefinition10.socketTimeout;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "throttle_size" + "'", str16, "throttle_size");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test7512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7512");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        boolean boolean8 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.String str10 = builder6.getmongoLocalPassword();
        builder6.setdropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        java.util.Set<java.lang.String> strSet19 = builder18.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test7514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        java.lang.String str8 = builder6.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject9 = builder6.getmongoOplogFilter();
        builder6.indexName = "mongodb-1638820218299";
        java.lang.String str12 = builder6.typeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str11 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
    }

    @Test
    public void test7516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7516");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.excludeFields;
        boolean boolean9 = mongoDBRiverDefinition1.isDropCollection();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "credentials" + "'", str5, "credentials");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_timeout" + "'", str6, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = builder10.mongoAdminPassword;
        java.lang.String str13 = builder10.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript14 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoAdminPassword("");
        java.lang.String[] strArray23 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder19.excludeFields = strSet24;
        java.lang.String str27 = builder19.indexName;
        docScoreSearchScript14.setNextVar("actions", (java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder38.excludeFields = strSet43;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet43);
        docScoreSearchScript14.setNextVar("type", (java.lang.Object) strSet43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet43);
        builder9.parentTypes = strSet43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder9.mongoLocalUser("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test7518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.mongoLocalUser;
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str13 = mongoDBRiverDefinition2.mongoCollection;
        java.lang.String str14 = mongoDBRiverDefinition2.statisticsTypeName;
        boolean boolean15 = mongoDBRiverDefinition2.getdropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_requests" + "'", str10, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoLocalPassword();
        java.lang.String str8 = mongoDBRiverDefinition2.getSERVERS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str10 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.getimportAllCollections();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "servers" + "'", str8, "servers");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "filter" + "'", str10, "filter");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoAdminPassword("");
        java.lang.String[] strArray14 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder10.excludeFields = strSet15;
        com.mongodb.BasicDBObject basicDBObject18 = builder10.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject19 = builder10.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder2.mongoCollectionFilter(basicDBObject19);
        builder20.setdisableIndexRefresh(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7521");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("options", "credentials");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?credentials?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        boolean boolean7 = builder6.getmongoGridFS();
        java.lang.String str8 = builder6.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        java.lang.String str5 = builder0.getmongoLocalPassword();
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        builder8.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder13.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder13.importAllCollections;
        java.lang.String[] strArray32 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder13.parentTypes = strSet33;
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.includeFields((java.util.Set<java.lang.String>) strSet33);
        boolean boolean38 = builder37.getmongoSecondaryReadPreference();
        builder37.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder43.advancedTransformation(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = builder47.getmongoServers();
        builder47.includeCollection = "concurrent_bulk_requests.null";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions52 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoClientOptions(mongoClientOptions52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject56 = builder55.mongoCollectionFilter;
        builder55.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.mongoAdminPassword("");
        java.lang.String[] strArray71 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        builder67.excludeFields = strSet72;
        builder61.setexcludeFields((java.util.Set<java.lang.String>) strSet72);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder61.mongoUseSSL(false);
        java.util.Set<java.lang.String> strSet78 = builder77.excludeFields;
        builder55.includeFields = strSet78;
        builder47.includeFields = strSet78;
        builder37.setexcludeFields(strSet78);
        builder37.settypeName("options");
        builder37.mongoDb = "null.null";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strSet78);
    }

    @Test
    public void test7524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7524");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test7525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition2.getimportAllCollections();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.mongoGridFS = true;
        boolean boolean13 = builder3.mongoSSLVerifyCertificate;
        int int14 = builder3.getsocketTimeout();
        boolean boolean15 = builder3.storeStatistics;
        builder3.statisticsTypeName = "bulk_timeout";
        builder3.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.importAllCollections(false);
        builder21.setskipInitialImport(false);
        java.lang.String str24 = builder21.getmongoDb();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test7527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.disableIndexRefresh = false;
        java.lang.String str13 = builder3.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet16 = builder15.includeFields;
        java.lang.String str17 = builder15.riverIndexName;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test7528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gridfs" + "'", str5, "gridfs");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
    }

    @Test
    public void test7529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7529");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder2.mongoDb("servers");
        builder2.setstatisticsIndexName("credentials");
        builder2.setmongoGridFS(true);
        builder2.setstatisticsTypeName("credentials");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7530");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("type", "exclude_fields", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?exclude_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7531");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString14();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test7532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7532");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str7 = mongoDBRiverDefinition6.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean8 = mongoDBRiverDefinition6.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition6.getEXCLUDE_FIELDS_FIELD();
        java.lang.Object obj10 = docScoreSearchScript0.unwrap((java.lang.Object) str9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str15 = mongoDBRiverDefinition14.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition14.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition14.getMongoServers();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) mongoDBRiverDefinition14);
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition14.includeFields;
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition14.getIncludeFields();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "exclude_fields" + "'", obj10, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test7533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        builder0.mongoLocalUser = "mongodb-1638820218387";
        java.util.Set<java.lang.String> strSet22 = builder0.excludeFields;
        boolean boolean23 = builder0.advancedTransformation;
        boolean boolean24 = builder0.getdisableIndexRefresh();
        java.lang.String str25 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test7534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition4.mongoCollectionFilter;
        java.lang.String str8 = mongoDBRiverDefinition4.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoCollection();
        java.lang.String str11 = mongoDBRiverDefinition4.getPORT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition4.isDropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "port" + "'", str11, "port");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.mongoGridFS = true;
        boolean boolean13 = builder3.mongoSSLVerifyCertificate;
        int int14 = builder3.getsocketTimeout();
        boolean boolean15 = builder3.storeStatistics;
        builder3.statisticsTypeName = "bulk_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.statisticsTypeName("mongodb-1638820218363");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7536");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString17();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218363" + "'", str7, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218449" + "'", str9, "mongodb-1638820218449");
    }

    @Test
    public void test7537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter3 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter3.deserializeObjectRiverSettings4();
        java.lang.String str5 = serializedObjectSupporter3.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter3.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter3.deserializeObjectRiverSettings3();
        builder0.serializedObjectSupporter = serializedObjectSupporter3;
        builder0.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        java.lang.String str6 = builder2.mongoLocalPassword;
        builder2.setmongoAdminPassword("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoUseSSL(true);
        java.lang.String str11 = builder2.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.mongoAdminPassword("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.dropCollection(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        boolean boolean5 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.statisticsIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.indexName("servers");
        builder2.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.mongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7540");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test7541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7541");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.disableIndexRefresh = false;
        java.lang.String str13 = builder3.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet16 = builder3.includeFields;
        java.lang.String str17 = builder3.mongoCollection;
        int int18 = builder3.getsocketTimeout();
        java.lang.String str19 = builder3.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = builder3.build();
        java.lang.String str21 = builder3.riverName;
        builder3.setsocketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test7542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.importAllCollections(false);
        builder6.setstatisticsIndexName("");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getDEFAULT_DB_HOST();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition19.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "localhost" + "'", str21, "localhost");
        org.junit.Assert.assertNotNull(serverAddressList22);
    }

    @Test
    public void test7544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        builder0.scriptType = "mongodb-1638820217755";
        java.lang.String str10 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoCollectionFilter(basicDBObject16);
        builder17.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.riverIndexName("ssl");
        builder21.script = "mongodb-1638820218449";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.riverIndexName("mongodb-1638820218264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.scriptType("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoClientOptions(mongoClientOptions29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoCollectionFilter(basicDBObject33);
        builder32.setstoreStatistics(false);
        builder32.riverName = "secondary_read_preference";
        boolean boolean39 = builder32.mongoUseSSL;
        java.lang.String str40 = builder32.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder32.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.riverName("exclude_fields");
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = builder42.mongoServers;
        builder25.setmongoServers(serverAddressList45);
        builder0.setmongoServers(serverAddressList45);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(serverAddressList45);
    }

    @Test
    public void test7545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7545");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder2.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        boolean boolean24 = builder2.mongoUseSSL;
        java.util.Set<java.lang.String> strSet25 = builder2.parentTypes;
        java.lang.String str26 = builder2.script;
        builder2.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder2.riverName("type");
        java.lang.String str31 = builder2.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = builder2.build();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory33 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        builder34.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder34.importAllCollections(true);
        java.lang.String str41 = builder40.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject47 = builder46.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder40.mongoCollectionFilter(basicDBObject47);
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory33.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.mongoAdminPassword("");
        builder53.setsocketTimeout((int) (short) 10);
        boolean boolean56 = builder53.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        boolean boolean59 = mongoDBRiverDefinition58.storeStatistics;
        boolean boolean60 = mongoDBRiverDefinition58.isDisableIndexRefresh();
        java.lang.String str61 = mongoDBRiverDefinition58.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet62 = mongoDBRiverDefinition58.getIncludeFields();
        java.lang.String str63 = mongoDBRiverDefinition58.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str64 = mongoDBRiverDefinition58.includeCollection;
        java.lang.String str65 = mongoDBRiverDefinition58.getMongoAdminPassword();
        java.lang.String str66 = mongoDBRiverDefinition58.getDROP_COLLECTION_FIELD();
        java.lang.String str67 = mongoDBRiverDefinition58.mongoAdminPassword;
        java.lang.String str68 = mongoDBRiverDefinition58.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject69 = mongoDBRiverDefinition58.getMongoCollectionFilter();
        builder53.setmongoCollectionFilter(basicDBObject69);
        org.elasticsearch.script.ExecutableScript executableScript71 = docScoreNativeScriptFactory33.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder2.mongoOplogFilter(basicDBObject69);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp73 = builder72.initialTimestamp;
        java.lang.String str74 = builder72.riverIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "flush_interval" + "'", str26, "flush_interval");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition32);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "script" + "'", str63, "script");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "drop_collection" + "'", str66, "drop_collection");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(executableScript71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(wildcardTimestamp73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test7546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7546");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("ssl");
        builder10.script = "mongodb-1638820218449";
        java.lang.String str13 = builder10.scriptType;
        com.mongodb.BasicDBObject basicDBObject14 = builder10.getmongoCollectionFilter();
        builder10.setscript("options");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test7547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet8 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        builder2.setsocketTimeout(27017);
        java.lang.String str12 = builder2.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str14 = mongoDBRiverDefinition13.getMongoAdminPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str22 = mongoDBRiverDefinition19.getHOST_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition19.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.Set<java.lang.String> strSet24 = mongoDBRiverDefinition19.includeFields;
        java.lang.String str25 = mongoDBRiverDefinition19.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "host" + "'", str22, "host");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disable_index_refresh" + "'", str23, "disable_index_refresh");
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "skip_initial_import" + "'", str25, "skip_initial_import");
    }

    @Test
    public void test7549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.scriptType("");
        java.lang.String str8 = builder7.statisticsIndexName;
        builder7.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        int int14 = builder11.getsocketTimeout();
        int int15 = builder11.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str36 = mongoDBRiverDefinition35.getRiverIndexName();
        java.lang.String str37 = mongoDBRiverDefinition35.getBULK_FIELD();
        boolean boolean38 = mongoDBRiverDefinition35.mongoUseSSL;
        boolean boolean39 = mongoDBRiverDefinition35.isDropCollection();
        java.util.Set<java.lang.String> strSet40 = mongoDBRiverDefinition35.excludeFields;
        builder11.setincludeFields(strSet40);
        builder7.setparentTypes(strSet40);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "bulk" + "'", str37, "bulk");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test7550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str7 = mongoDBRiverDefinition2.getSIZE_FIELD();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.getParentTypes();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString11();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString12();
        java.lang.String str12 = serializedObjectSupporter9.deserializeObjectString11();
        mongoDBRiverDefinition2.serializedObjectSupporter = serializedObjectSupporter9;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218387" + "'", str10, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218387" + "'", str12, "mongodb-1638820218387");
        org.junit.Assert.assertNotNull(byteSizeValue14);
    }

    @Test
    public void test7551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder6.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.disableIndexRefresh(true);
        builder9.setscriptType("port");
        builder9.setconnectTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.socketTimeout((int) ' ');
        boolean boolean17 = builder14.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoAdminPassword("");
        java.lang.String[] strArray30 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder26.excludeFields = strSet31;
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet31);
        builder14.parentTypes = strSet31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder9.includeFields((java.util.Set<java.lang.String>) strSet31);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7552");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(true);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoAdminPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder39.excludeFields = strSet44;
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder30.parentTypes = strSet44;
        int int49 = builder30.getconnectTimeout();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) int49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject57 = builder56.mongoCollectionFilter;
        boolean boolean58 = builder56.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder56.includeCollection("drop_collection");
        docScoreSearchScript0.setNextVar("store_statistics", (java.lang.Object) builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        builder62.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder62.importAllCollections(true);
        java.lang.String str69 = builder68.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions71 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.mongoClientOptions(mongoClientOptions71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject75 = builder74.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder68.mongoCollectionFilter(basicDBObject75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        boolean boolean79 = mongoDBRiverDefinition78.storeStatistics;
        boolean boolean80 = mongoDBRiverDefinition78.isDisableIndexRefresh();
        java.lang.String str81 = mongoDBRiverDefinition78.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet82 = mongoDBRiverDefinition78.getIncludeFields();
        java.lang.String str83 = mongoDBRiverDefinition78.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str84 = mongoDBRiverDefinition78.includeCollection;
        java.lang.String str85 = mongoDBRiverDefinition78.getMongoAdminPassword();
        boolean boolean86 = mongoDBRiverDefinition78.getmongoUseSSL();
        boolean boolean87 = mongoDBRiverDefinition78.isStoreStatistics();
        java.util.Set<java.lang.String> strSet88 = mongoDBRiverDefinition78.excludeFields;
        java.lang.String str89 = mongoDBRiverDefinition78.getRiverIndexName();
        com.mongodb.BasicDBObject basicDBObject90 = mongoDBRiverDefinition78.getMongoCollectionFilter();
        builder68.mongoCollectionFilter = basicDBObject90;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + 0 + "'", obj50, 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "script" + "'", str83, "script");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(basicDBObject90);
    }

    @Test
    public void test7553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        boolean boolean7 = builder2.getskipInitialImport();
        builder2.setscriptType("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = builder10.riverIndexName;
        boolean boolean13 = builder10.getimportAllCollections();
        builder10.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoAdminPassword("");
        java.lang.String[] strArray30 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder26.excludeFields = strSet31;
        com.mongodb.BasicDBObject basicDBObject34 = builder26.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject35 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.mongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.mongoAdminPassword("");
        java.lang.String[] strArray54 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder50.excludeFields = strSet55;
        builder44.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder44.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        boolean boolean62 = builder60.dropCollection;
        boolean boolean63 = builder60.storeStatistics;
        java.util.Set<java.lang.String> strSet64 = builder60.excludeFields;
        builder39.setexcludeFields(strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder68.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder71.mongoAdminPassword("");
        java.lang.String[] strArray78 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder74.excludeFields = strSet79;
        builder68.setexcludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder68.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.dropCollection(true);
        builder84.setsocketTimeout(27017);
        builder84.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder84.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet93 = builder84.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder39.excludeFields(strSet93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder18.excludeFields(strSet93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder10.includeFields(strSet93);
        builder2.parentTypes = strSet93;
        java.lang.String str98 = builder2.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test7554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        boolean boolean6 = builder4.disableIndexRefresh;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoAdminPassword("");
        java.lang.String[] strArray24 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder20.excludeFields = strSet25;
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder14.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        boolean boolean32 = builder30.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject40 = builder39.getmongoCollectionFilter();
        builder30.setmongoCollectionFilter(basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder11.mongoCollectionFilter(basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript43 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.mongoOplogFilter(basicDBObject40);
        boolean boolean45 = builder4.getadvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executableScript43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test7555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7555");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter6.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter6.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter6.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter6.deserializeObjectRiverSettings9();
        mongoDBRiverDefinition2.serializedObjectSupporter = serializedObjectSupporter6;
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter6.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter6.deserializeObjectRiverSettings6();
        java.lang.String str18 = serializedObjectSupporter6.deserializeObjectString13();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218408" + "'", str18, "mongodb-1638820218408");
    }

    @Test
    public void test7556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7556");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder2.getmongoServers();
        boolean boolean9 = builder2.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        boolean boolean11 = mongoDBRiverDefinition10.getstoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition10.getHOST_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "host" + "'", str12, "host");
    }

    @Test
    public void test7557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        builder2.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.mongoCollectionFilter;
        builder14.mongoCollection = "include_collection";
        int int18 = builder14.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder31.mongoAdminPassword("");
        java.lang.String[] strArray38 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder34.excludeFields = strSet39;
        builder28.setexcludeFields((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder28.mongoSecondaryReadPreference(false);
        boolean boolean45 = builder44.storeStatistics;
        builder44.mongoSecondaryReadPreference = true;
        builder44.setmongoLocalPassword("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        com.mongodb.BasicDBObject basicDBObject53 = null;
        builder50.setmongoOplogFilter(basicDBObject53);
        java.lang.String str55 = builder50.getmongoLocalPassword();
        builder50.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        builder58.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        com.mongodb.BasicDBObject basicDBObject66 = null;
        builder63.setmongoOplogFilter(basicDBObject66);
        boolean boolean68 = builder63.importAllCollections;
        java.lang.String[] strArray82 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        builder63.parentTypes = strSet83;
        builder58.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder50.includeFields((java.util.Set<java.lang.String>) strSet83);
        builder44.excludeFields = strSet83;
        builder21.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet83);
        builder2.parentTypes = strSet83;
        boolean boolean92 = builder2.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test7558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7558");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString14();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test7559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.mongoGridFS = true;
        boolean boolean13 = builder3.mongoSSLVerifyCertificate;
        int int14 = builder3.getsocketTimeout();
        boolean boolean15 = builder3.storeStatistics;
        builder3.statisticsTypeName = "bulk_timeout";
        builder3.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder3.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str23 = builder3.gettypeName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("script");
        boolean boolean17 = builder14.getdropCollection();
        java.util.Set<java.lang.String> strSet18 = builder14.getincludeFields();
        java.lang.String str19 = builder14.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.includeCollection("bulk");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str11 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1000 + "'", int10 == 1000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_bulk_requests" + "'", str11, "concurrent_bulk_requests");
    }

    @Test
    public void test7562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "admin" + "'", str11, "admin");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
    }

    @Test
    public void test7563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str5 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "skip_initial_import" + "'", str5, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test7564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        com.mongodb.MongoClientOptions mongoClientOptions5 = mongoDBRiverDefinition2.getMongoClientOptions();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter6 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter6.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter6.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter6.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter6.deserializeObjectRiverSettings9();
        mongoDBRiverDefinition2.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str15 = serializedObjectSupporter6.deserializeObjectString4();
        java.lang.String str16 = serializedObjectSupporter6.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter6.deserializeObjectRiverSettings5();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218299" + "'", str16, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings17);
    }

    @Test
    public void test7565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7565");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        boolean boolean6 = builder4.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.includeCollection("drop_collection");
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        builder2.storeStatistics = false;
        boolean boolean21 = builder2.importAllCollections;
        java.lang.String str22 = builder2.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder2.mongoAdminPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder2.advancedTransformation(false);
        builder2.setdisableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test7567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7567");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
    }

    @Test
    public void test7568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoLocalUser("");
        java.lang.String str22 = builder0.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test7569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.mongoOplogFilter;
        builder6.setindexName("script");
        builder6.statisticsTypeName = "ssl_verify_certificate";
        builder6.setstatisticsIndexName("port");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject7);
    }

    @Test
    public void test7570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition2.getMongoServers();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertNotNull(serverAddressList8);
    }

    @Test
    public void test7571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition2.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str9 = mongoDBRiverDefinition2.getBULK_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
    }

    @Test
    public void test7572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7572");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoAdminUser;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.getParentTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test7573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        boolean boolean6 = builder5.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoDb("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("options");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7574");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean12 = builder0.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder18.excludeFields = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.includeFields((java.util.Set<java.lang.String>) strSet23);
        int int27 = builder26.socketTimeout;
        builder26.connectTimeout = (short) 10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        builder26.setconnectTimeout(52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test7575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        builder0.setscriptType("exclude_fields");
        builder0.riverIndexName = "concurrent_bulk_requests.null";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test7576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.mongoOplogFilter;
        builder6.setmongoCollection("admin");
        builder6.typeName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder14.getmongoServers();
        builder14.setthrottleSize((int) (byte) 10);
        java.util.Set<java.lang.String> strSet20 = builder14.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.mongoClientOptions(mongoClientOptions21);
        java.lang.String[] strArray35 = new java.lang.String[] { "mongodb-1638820218264", "mongodb-1638820218449", "db", "credentials", "localhost", "user", "secondary_read_preference", "local", "options", "options", "include_collection", "advanced_transformation" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder14.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder6.parentTypes((java.util.Set<java.lang.String>) strSet36);
        java.lang.String str40 = builder6.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test7577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        com.mongodb.BasicDBObject basicDBObject16 = builder8.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoOplogFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setdisableIndexRefresh(false);
        java.lang.String str21 = builder0.gettypeName();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test7578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7578");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder7.setexcludeFields((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder7.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.dropCollection(true);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoAdminPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder39.excludeFields = strSet44;
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        builder30.parentTypes = strSet44;
        int int49 = builder30.getconnectTimeout();
        java.lang.Object obj50 = docScoreSearchScript0.unwrap((java.lang.Object) int49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        com.mongodb.BasicDBObject basicDBObject54 = null;
        builder51.setmongoOplogFilter(basicDBObject54);
        java.lang.String str56 = builder51.getmongoLocalPassword();
        boolean boolean57 = builder51.mongoSSLVerifyCertificate;
        builder51.setadvancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder51.getmongoClientOptions();
        java.lang.Object obj61 = docScoreSearchScript0.unwrap((java.lang.Object) mongoClientOptions60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str63 = builder62.gettypeName();
        builder62.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder62.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder62.importAllCollections(false);
        builder70.setscriptType("actions");
        java.lang.Object obj73 = docScoreSearchScript0.unwrap((java.lang.Object) "actions");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + 0 + "'", obj50, 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(mongoClientOptions60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "actions" + "'", obj73, "actions");
    }

    @Test
    public void test7579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean12 = builder0.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder18.excludeFields = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.includeFields((java.util.Set<java.lang.String>) strSet23);
        builder0.setdisableIndexRefresh(false);
        boolean boolean29 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test7580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = mongoDBRiverDefinition4.getInitialTimestamp();
        java.lang.String str10 = mongoDBRiverDefinition4.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition4.getGRIDFS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition4.getCONNECTION_TIMEOUT();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition4.getMongoClientOptions();
        int int14 = mongoDBRiverDefinition4.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "connect_timeout" + "'", str12, "connect_timeout");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test7581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7581");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.mongoClientOptions;
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test7582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7582");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("host", "port");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?port?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder2.mongoSSLVerifyCertificate = true;
        com.mongodb.BasicDBObject basicDBObject8 = builder2.mongoCollectionFilter;
        boolean boolean9 = builder2.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoAdminPassword("");
        java.lang.String[] strArray17 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder13.excludeFields = strSet18;
        builder13.disableIndexRefresh = false;
        java.lang.String str23 = builder13.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder13.mongoSSLVerifyCertificate(true);
        java.lang.String str26 = builder13.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str28 = mongoDBRiverDefinition27.getEXCLUDE_FIELDS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = mongoDBRiverDefinition27.mongoServers;
        builder2.setmongoServers(serverAddressList29);
        java.lang.String str31 = builder2.getmongoLocalPassword();
        builder2.setincludeCollection("store_statistics");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "exclude_fields" + "'", str28, "exclude_fields");
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test7584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        boolean boolean15 = builder14.skipInitialImport;
        java.lang.String str16 = builder14.statisticsIndexName;
        builder14.setstoreStatistics(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.disableIndexRefresh = false;
        java.lang.String str13 = builder3.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoSSLVerifyCertificate(true);
        builder15.mongoCollection = "filter";
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoCollectionFilter(basicDBObject18);
        boolean boolean20 = builder15.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder15.mongoClientOptions = mongoClientOptions21;
        java.lang.String str23 = builder15.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder15.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test7586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str8 = builder2.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.indexName("parent_types");
        java.util.Set<java.lang.String> strSet11 = builder10.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        boolean boolean15 = builder12.getimportAllCollections();
        java.lang.String str16 = builder12.gettypeName();
        boolean boolean17 = builder12.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        builder18.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder23.setmongoOplogFilter(basicDBObject26);
        boolean boolean28 = builder23.importAllCollections;
        java.lang.String[] strArray42 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder23.parentTypes = strSet43;
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet43);
        builder12.setparentTypes((java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        boolean boolean50 = mongoDBRiverDefinition49.skipInitialImport;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test7587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str5 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getHOST_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "host" + "'", str7, "host");
        org.junit.Assert.assertNull(mongoClientOptions8);
    }

    @Test
    public void test7588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_BULK_ACTIONS();
        java.lang.String str10 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1000 + "'", int9 == 1000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "exclude_fields" + "'", str10, "exclude_fields");
    }

    @Test
    public void test7589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7589");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        builder3.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder3.mongoAdminUser("admin");
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder41.mongoClientOptions;
        com.mongodb.BasicDBObject basicDBObject43 = builder41.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(basicDBObject43);
    }

    @Test
    public void test7590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        boolean boolean7 = builder2.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoDb("mongodb-1638820218408");
        builder2.mongoAdminPassword = "mongodb-1638820218387";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        boolean boolean13 = mongoDBRiverDefinition12.importAllCollections;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        boolean boolean15 = builder14.importAllCollections;
        java.util.Set<java.lang.String> strSet16 = builder14.excludeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoClientOptions(mongoClientOptions17);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7592");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoAdminPassword("");
        java.lang.String[] strArray18 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        builder14.excludeFields = strSet19;
        builder8.setexcludeFields((java.util.Set<java.lang.String>) strSet19);
        builder5.parentTypes = strSet19;
        builder5.settypeName("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.advancedTransformation(false);
        builder28.throttleSize = (byte) 100;
        java.lang.String str35 = builder28.getscriptType();
        com.mongodb.BasicDBObject basicDBObject36 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder5.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        java.util.Map<java.lang.String, java.lang.Object> strMap39 = riverSettings38.settings();
        org.elasticsearch.script.ExecutableScript executableScript40 = docScoreNativeScriptFactory0.newScript(strMap39);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(executableScript40);
    }

    @Test
    public void test7593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7593");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getStatisticsTypeName();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str10 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        java.lang.String str12 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
    }

    @Test
    public void test7594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.mongoCollectionFilter;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertNotNull(byteSizeValue7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(basicDBObject9);
    }

    @Test
    public void test7595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7595");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.dropCollection(true);
        builder18.setsocketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.advancedTransformation(false);
        builder24.setmongoDb("connect_timeout");
        builder24.mongoAdminPassword = "socket_timeout";
        boolean boolean29 = builder24.getdisableIndexRefresh();
        java.util.Set<java.lang.String> strSet30 = builder24.getparentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
    }

    @Test
    public void test7596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7596");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter17 = builder14.serializedObjectSupporter;
        builder14.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str20 = builder14.getriverName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter21 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings22 = serializedObjectSupporter21.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter21.deserializeObjectRiverSettings1();
        builder14.serializedObjectSupporter = serializedObjectSupporter21;
        java.lang.String str25 = serializedObjectSupporter21.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings26 = serializedObjectSupporter21.deserializeObjectRiverSettings5();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter21;
        boolean boolean28 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str29 = mongoDBRiverDefinition1.getMongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(riverSettings22);
        org.junit.Assert.assertNull(riverSettings23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218449" + "'", str25, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test7597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        builder2.storeStatistics = false;
        boolean boolean21 = builder2.importAllCollections;
        java.lang.String str22 = builder2.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder2.mongoAdminPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder2.statisticsIndexName("disable_index_refresh");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test7598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoSecondaryReadPreference(true);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript17 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript17.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder24.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.dropCollection(true);
        docScoreSearchScript17.setNextVar("", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoClientOptions(mongoClientOptions46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject50 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.mongoCollectionFilter(basicDBObject50);
        builder51.statisticsIndexName = "host";
        builder51.setmongoAdminUser("skip_initial_import");
        docScoreSearchScript17.setNextVar("null.null", (java.lang.Object) builder51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions59 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoClientOptions(mongoClientOptions59);
        builder60.setsocketTimeout((int) '4');
        builder60.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder60.mongoSecondaryReadPreference(false);
        builder60.setmongoGridFS(false);
        builder60.setdropCollection(false);
        builder60.storeStatistics = false;
        builder60.mongoAdminPassword = "null.null";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder75);
        boolean boolean77 = mongoDBRiverDefinition76.storeStatistics;
        boolean boolean78 = mongoDBRiverDefinition76.isSkipInitialImport();
        java.lang.String str79 = mongoDBRiverDefinition76.getMongoCollection();
        boolean boolean80 = mongoDBRiverDefinition76.getadvancedTransformation();
        boolean boolean81 = mongoDBRiverDefinition76.getmongoGridFS();
        int int82 = mongoDBRiverDefinition76.getConnectTimeout();
        java.lang.String str83 = mongoDBRiverDefinition76.getScript();
        java.lang.String str84 = mongoDBRiverDefinition76.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList85 = mongoDBRiverDefinition76.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder60.mongoServers(serverAddressList85);
        docScoreSearchScript17.setNextVar("actions", (java.lang.Object) serverAddressList85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder11.mongoServers(serverAddressList85);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "import_all_collections" + "'", str84, "import_all_collections");
        org.junit.Assert.assertNotNull(serverAddressList85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test7599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7599");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        int int19 = builder16.getsocketTimeout();
        boolean boolean20 = builder16.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.advancedTransformation(false);
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoClientOptions(mongoClientOptions27);
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = builder28.getmongoServers();
        builder28.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoAdminPassword("bulk");
        boolean boolean34 = builder33.getadvancedTransformation();
        boolean boolean35 = builder33.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        com.mongodb.BasicDBObject basicDBObject37 = builder33.getmongoCollectionFilter();
        java.lang.Object obj38 = docScoreSearchScript0.unwrap((java.lang.Object) builder33);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test7600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoCollectionFilter(basicDBObject13);
        builder14.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.riverIndexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.mongoAdminPassword("");
        java.lang.String[] strArray26 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        builder22.excludeFields = strSet27;
        builder22.mongoGridFS = true;
        boolean boolean32 = builder22.mongoSSLVerifyCertificate;
        int int33 = builder22.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder34.setmongoOplogFilter(basicDBObject37);
        java.lang.String str39 = builder34.getmongoLocalPassword();
        builder34.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        builder42.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        com.mongodb.BasicDBObject basicDBObject50 = null;
        builder47.setmongoOplogFilter(basicDBObject50);
        boolean boolean52 = builder47.importAllCollections;
        java.lang.String[] strArray66 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        builder47.parentTypes = strSet67;
        builder42.setparentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder34.includeFields((java.util.Set<java.lang.String>) strSet67);
        builder22.parentTypes = strSet67;
        builder14.excludeFields = strSet67;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder0.includeFields((java.util.Set<java.lang.String>) strSet67);
        builder0.mongoDb = "concurrent_bulk_requests.null";
        boolean boolean77 = builder0.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test7601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        com.mongodb.BasicDBObject basicDBObject11 = builder3.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.connectTimeout((int) (byte) -1);
        java.lang.String str14 = builder3.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        builder17.setsocketTimeout((int) '4');
        builder17.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder17.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder17.riverName("");
        builder24.setsocketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.includeCollection("filter");
        java.lang.String str29 = builder28.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.mongoClientOptions(mongoClientOptions31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoCollectionFilter(basicDBObject35);
        builder36.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder36.riverIndexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.mongoAdminPassword("");
        java.lang.String[] strArray48 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        builder44.excludeFields = strSet49;
        builder44.mongoGridFS = true;
        boolean boolean54 = builder44.mongoSSLVerifyCertificate;
        int int55 = builder44.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        com.mongodb.BasicDBObject basicDBObject59 = null;
        builder56.setmongoOplogFilter(basicDBObject59);
        java.lang.String str61 = builder56.getmongoLocalPassword();
        builder56.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder64);
        builder64.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        com.mongodb.BasicDBObject basicDBObject72 = null;
        builder69.setmongoOplogFilter(basicDBObject72);
        boolean boolean74 = builder69.importAllCollections;
        java.lang.String[] strArray88 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder69.parentTypes = strSet89;
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder56.includeFields((java.util.Set<java.lang.String>) strSet89);
        builder44.parentTypes = strSet89;
        builder36.excludeFields = strSet89;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder28.includeFields((java.util.Set<java.lang.String>) strSet89);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test7602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminUser();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoCollectionFilter;
        boolean boolean8 = mongoDBRiverDefinition1.getmongoGridFS();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "password" + "'", str3, "password");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        java.lang.String str11 = builder3.getstatisticsIndexName();
        boolean boolean12 = builder3.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        boolean boolean14 = mongoDBRiverDefinition13.getskipInitialImport();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition13.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition13.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition13.getMongoOplogFilter();
        java.lang.String str18 = mongoDBRiverDefinition13.mongoDb;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test7604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str11 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition1.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition1.getMongoClientOptions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test7605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        java.lang.String str11 = builder9.getriverIndexName();
        int int12 = builder9.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.statisticsTypeName("ssl_verify_certificate");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7606");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.getadvancedTransformation();
        builder18.setmongoLocalUser("mongodb-1638820217755");
        builder18.mongoLocalPassword = "script_type";
        builder18.setadvancedTransformation(false);
        java.lang.String str27 = builder18.getriverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test7607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        boolean boolean23 = builder18.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.riverName("_river");
        java.lang.String str26 = builder18.mongoLocalUser;
        builder18.setmongoLocalPassword("advanced_transformation");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test7608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int12 = mongoDBRiverDefinition11.getConnectTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test7609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.riverIndexName;
        java.lang.String str14 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition10.excludeFields;
        boolean boolean16 = mongoDBRiverDefinition10.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "connect_timeout" + "'", str14, "connect_timeout");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        builder9.setmongoLocalPassword("host");
        boolean boolean17 = builder9.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str19 = mongoDBRiverDefinition18.getSIZE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition18.mongoDb;
        java.lang.String str21 = mongoDBRiverDefinition18.getScript();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition18.parentTypes;
        boolean boolean23 = mongoDBRiverDefinition18.getdisableIndexRefresh();
        java.lang.String str24 = mongoDBRiverDefinition18.getMongoAdminPassword();
        int int25 = mongoDBRiverDefinition18.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "concurrent_bulk_requests" + "'", str20, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test7611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7611");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.riverIndexName("collection");
        builder2.connectTimeout = (byte) 100;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test7612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean8 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str10 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoAdminUser();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "socket_timeout" + "'", str11, "socket_timeout");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        builder0.setmongoDb("_river");
        builder0.settypeName("options");
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
    }

    @Test
    public void test7614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        java.lang.String str12 = builder7.scriptType;
        java.lang.String str13 = builder7.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str15 = mongoDBRiverDefinition14.mongoLocalUser;
        java.lang.String str16 = mongoDBRiverDefinition14.mongoLocalUser;
        boolean boolean17 = mongoDBRiverDefinition14.getstoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsTypeName;
        boolean boolean5 = mongoDBRiverDefinition1.dropCollection;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getParentTypes();
        java.lang.String str7 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "store_statistics" + "'", str7, "store_statistics");
    }

    @Test
    public void test7616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7616");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.dropCollection(true);
        builder18.setsocketTimeout(27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoSSLVerifyCertificate(true);
        int int27 = builder24.getconnectTimeout();
        boolean boolean28 = builder24.getdropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test7617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7617");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.getadvancedTransformation();
        builder18.setmongoLocalUser("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoLocalUser("bulk_size");
        builder26.setmongoAdminPassword("secondary_read_preference");
        builder26.mongoAdminPassword = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.mongoCollection("mongodb-1638820218387");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test7618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7618");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getSERVERS_FIELD();
        int int21 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        int int22 = mongoDBRiverDefinition19.getThrottleSize();
        java.lang.String str23 = mongoDBRiverDefinition19.getMongoDb();
        java.lang.String str24 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.getskipInitialImport();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition19.getMongoServers();
        boolean boolean27 = mongoDBRiverDefinition19.storeStatistics;
        java.lang.String str28 = mongoDBRiverDefinition19.getSCRIPT_FIELD();
        boolean boolean29 = mongoDBRiverDefinition19.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "servers" + "'", str20, "servers");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "flush_interval" + "'", str24, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "script" + "'", str28, "script");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test7619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        builder0.mongoAdminPassword = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int27 = mongoDBRiverDefinition26.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition26.getMongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(basicDBObject28);
    }

    @Test
    public void test7620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        java.lang.String str5 = mongoDBRiverDefinition2.scriptType;
        boolean boolean6 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        java.lang.String str9 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "collection" + "'", str7, "collection");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index" + "'", str8, "index");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "local" + "'", str9, "local");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl" + "'", str11, "ssl");
    }

    @Test
    public void test7621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        builder3.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.script("throttle_size");
        java.util.Set<java.lang.String> strSet8 = builder3.getincludeFields();
        boolean boolean9 = builder3.getimportAllCollections();
        java.lang.String str10 = builder3.mongoLocalPassword;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7622");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test7623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7623");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject33 = builder0.mongoCollectionFilter;
        builder0.setindexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.mongoLocalUser("null.null");
        boolean boolean38 = builder37.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.skipInitialImport(false);
        java.util.Set<java.lang.String> strSet41 = builder37.getparentTypes();
        builder37.setincludeCollection("collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strSet41);
    }

    @Test
    public void test7624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter13.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter13.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertNull(riverSettings18);
        org.junit.Assert.assertNull(riverSettings19);
    }

    @Test
    public void test7625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7625");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218363" + "'", str2, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
    }

    @Test
    public void test7626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str12 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.script;
        boolean boolean14 = mongoDBRiverDefinition1.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoClientOptions(mongoClientOptions16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.script("disable_index_refresh");
        java.lang.String str20 = builder19.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.mongoCollectionFilter;
        builder19.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        boolean boolean29 = mongoDBRiverDefinition28.getstoreStatistics();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter30 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter30.deserializeObjectRiverSettings4();
        java.lang.String str32 = serializedObjectSupporter30.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings33 = serializedObjectSupporter30.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings34 = serializedObjectSupporter30.deserializeObjectRiverSettings3();
        java.lang.String str35 = serializedObjectSupporter30.deserializeObjectString18();
        mongoDBRiverDefinition28.serializedObjectSupporter = serializedObjectSupporter30;
        java.lang.String str37 = serializedObjectSupporter30.deserializeObjectString10();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter30;
        java.lang.String str39 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str40 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(riverSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218387" + "'", str32, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings33);
        org.junit.Assert.assertNull(riverSettings34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_river" + "'", str35, "_river");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_river" + "'", str37, "_river");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "concurrent_requests" + "'", str40, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "script_type" + "'", str41, "script_type");
    }

    @Test
    public void test7627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7627");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("password", "skip_initial_import");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?skip_initial_import?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test7628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.advancedTransformation(false);
        builder6.setmongoLocalPassword("options");
        builder6.setsocketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        builder6.mongoLocalPassword = "hi!";
        builder6.disableIndexRefresh = true;
        builder6.mongoCollection = "mongodb-1638820218363";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.mongoOplogFilter;
        builder6.setindexName("script");
        builder6.mongoAdminPassword = "size";
        boolean boolean12 = builder6.importAllCollections;
        builder6.setmongoLocalUser("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.importAllCollections(false);
        boolean boolean21 = builder20.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.mongoAdminPassword("");
        java.lang.String[] strArray29 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder25.excludeFields = strSet30;
        builder20.setincludeFields((java.util.Set<java.lang.String>) strSet30);
        builder6.parentTypes = strSet30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder6.mongoDb("disable_index_refresh");
        builder36.mongoAdminUser = "port";
        builder36.settypeName("advanced_transformation");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7630");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition4.getMongoOplogFilter();
        int int7 = mongoDBRiverDefinition4.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test7631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.advancedTransformation(true);
        java.lang.String str13 = builder9.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.setstatisticsTypeName("include_fields");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7632");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder9.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoServers(serverAddressList12);
        java.lang.String str14 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.script("concurrent_bulk_requests.null");
        com.mongodb.BasicDBObject basicDBObject17 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.connectTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = mongoDBRiverDefinition2.serializedObjectSupporter;
        java.lang.String str5 = mongoDBRiverDefinition2.getIncludeCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "localhost" + "'", str3, "localhost");
        org.junit.Assert.assertNull(serializedObjectSupporter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test7634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7634");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(true);
        java.lang.String str5 = builder0.mongoLocalPassword;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoAdminPassword("");
        java.lang.String[] strArray15 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder11.excludeFields = strSet16;
        java.lang.String str19 = builder11.indexName;
        docScoreSearchScript6.setNextVar("actions", (java.lang.Object) builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        docScoreSearchScript6.setNextVar("type", (java.lang.Object) strSet35);
        builder0.parentTypes = strSet35;
        java.lang.String str41 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.lang.String str45 = mongoDBRiverDefinition44.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean46 = mongoDBRiverDefinition44.isDisableIndexRefresh();
        java.lang.String str47 = mongoDBRiverDefinition44.getACTIONS_FIELD();
        java.lang.String str48 = mongoDBRiverDefinition44.getDROP_COLLECTION_FIELD();
        boolean boolean49 = mongoDBRiverDefinition44.getmongoSSLVerifyCertificate();
        boolean boolean50 = mongoDBRiverDefinition44.isMongoSecondaryReadPreference();
        java.lang.String str51 = mongoDBRiverDefinition44.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition44.getIndexName();
        java.lang.String str53 = mongoDBRiverDefinition44.getSTORE_STATISTICS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = mongoDBRiverDefinition44.mongoServers;
        builder0.setmongoServers(serverAddressList54);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "disable_index_refresh" + "'", str45, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "actions" + "'", str47, "actions");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "drop_collection" + "'", str48, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "script" + "'", str51, "script");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "store_statistics" + "'", str53, "store_statistics");
        org.junit.Assert.assertNotNull(serverAddressList54);
    }

    @Test
    public void test7635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7635");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        boolean boolean34 = mongoDBRiverDefinition33.storeStatistics;
        boolean boolean35 = mongoDBRiverDefinition33.isDisableIndexRefresh();
        java.lang.String str36 = mongoDBRiverDefinition33.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet37 = mongoDBRiverDefinition33.getIncludeFields();
        java.lang.String str38 = mongoDBRiverDefinition33.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str39 = mongoDBRiverDefinition33.includeCollection;
        java.lang.String str40 = mongoDBRiverDefinition33.getMongoAdminPassword();
        java.lang.String str41 = mongoDBRiverDefinition33.getDROP_COLLECTION_FIELD();
        boolean boolean42 = mongoDBRiverDefinition33.dropCollection;
        boolean boolean43 = mongoDBRiverDefinition33.mongoSSLVerifyCertificate;
        java.lang.String str44 = mongoDBRiverDefinition33.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition33.getCREDENTIALS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList46 = mongoDBRiverDefinition33.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder0.mongoServers(serverAddressList46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "script" + "'", str38, "script");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "drop_collection" + "'", str41, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "script" + "'", str44, "script");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "credentials" + "'", str45, "credentials");
        org.junit.Assert.assertNotNull(serverAddressList46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test7636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject23 = mongoDBRiverDefinition19.getMongoOplogFilter();
        int int24 = mongoDBRiverDefinition19.getDEFAULT_DB_PORT();
        java.lang.String str25 = mongoDBRiverDefinition19.getPARENT_TYPES_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition19.getMongoServers();
        java.lang.String str27 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disable_index_refresh" + "'", str22, "disable_index_refresh");
        org.junit.Assert.assertNull(basicDBObject23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 27017 + "'", int24 == 27017);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "parent_types" + "'", str25, "parent_types");
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "script" + "'", str27, "script");
    }

    @Test
    public void test7637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7637");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getSCRIPT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.getadvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition4.mongoCollectionFilter;
        boolean boolean9 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition4.getStatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        boolean boolean11 = builder9.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        builder14.setsocketTimeout((int) '4');
        builder14.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder14.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.riverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str24 = builder22.mongoAdminPassword;
        java.lang.String str25 = builder22.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript26 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.mongoAdminPassword("");
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder31.excludeFields = strSet36;
        java.lang.String str39 = builder31.indexName;
        docScoreSearchScript26.setNextVar("actions", (java.lang.Object) builder31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.mongoAdminPassword("");
        java.lang.String[] strArray54 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder50.excludeFields = strSet55;
        builder44.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        docScoreSearchScript26.setNextVar("type", (java.lang.Object) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet55);
        builder21.parentTypes = strSet55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet55);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test7639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7639");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition19.mongoOplogFilter;
        java.lang.String str25 = mongoDBRiverDefinition19.getIncludeCollection();
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoCollection();
        java.util.Set<java.lang.String> strSet27 = mongoDBRiverDefinition19.includeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "initial_timestamp" + "'", str23, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strSet27);
    }

    @Test
    public void test7640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7640");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test7641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7641");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        boolean boolean7 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.script = "bulk";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.typeName("port");
        builder16.mongoCollection = "index";
        boolean boolean19 = builder16.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet20 = builder16.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder21.setmongoOplogFilter(basicDBObject24);
        boolean boolean26 = builder21.importAllCollections;
        builder21.setmongoGridFS(false);
        builder21.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoAdminPassword("");
        java.lang.String[] strArray43 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder39.excludeFields = strSet44;
        builder33.setexcludeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet44);
        builder16.excludeFields = strSet44;
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet44);
        java.lang.String str51 = builder0.getmongoLocalUser();
        builder0.setincludeCollection("ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test7642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str10 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_size" + "'", str10, "bulk_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gridfs" + "'", str11, "gridfs");
    }

    @Test
    public void test7643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean12 = mongoDBRiverDefinition11.storeStatistics;
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition11.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition11.includeCollection;
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str19 = mongoDBRiverDefinition11.getDROP_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition11.mongoAdminPassword;
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder9.mongoOplogFilter(basicDBObject22);
        boolean boolean24 = builder23.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.storeStatistics(true);
        builder23.throttleSize = 0;
        builder23.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder23.getinitialTimestamp();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder23.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "drop_collection" + "'", str19, "drop_collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNull(wildcardTimestamp32);
    }

    @Test
    public void test7644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str21 = mongoDBRiverDefinition20.getSCRIPT_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition20.statisticsTypeName;
        java.lang.String str23 = mongoDBRiverDefinition20.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script" + "'", str21, "script");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7645");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.includeCollection("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder43.setmongoOplogFilter(basicDBObject46);
        boolean boolean48 = builder43.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder43.mongoLocalPassword("name");
        builder43.mongoLocalPassword = "concurrent_bulk_requests";
        builder43.setscriptType("flush_interval");
        java.lang.String str55 = builder43.getindexName();
        boolean boolean56 = builder43.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        builder43.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder60.mongoAdminPassword("");
        java.lang.String[] strArray67 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder63.excludeFields = strSet68;
        com.mongodb.BasicDBObject basicDBObject71 = builder63.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder72);
        boolean boolean74 = mongoDBRiverDefinition73.storeStatistics;
        boolean boolean75 = mongoDBRiverDefinition73.isDisableIndexRefresh();
        java.lang.String str76 = mongoDBRiverDefinition73.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet77 = mongoDBRiverDefinition73.getIncludeFields();
        java.lang.String str78 = mongoDBRiverDefinition73.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str79 = mongoDBRiverDefinition73.includeCollection;
        java.lang.String str80 = mongoDBRiverDefinition73.getMongoAdminPassword();
        java.lang.String str81 = mongoDBRiverDefinition73.getSECONDARY_READ_PREFERENCE_FIELD();
        int int82 = mongoDBRiverDefinition73.socketTimeout;
        boolean boolean83 = mongoDBRiverDefinition73.disableIndexRefresh;
        boolean boolean84 = mongoDBRiverDefinition73.getimportAllCollections();
        boolean boolean85 = mongoDBRiverDefinition73.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject86 = mongoDBRiverDefinition73.mongoCollectionFilter;
        builder63.mongoOplogFilter = basicDBObject86;
        builder43.setmongoOplogFilter(basicDBObject86);
        builder0.mongoCollectionFilter = basicDBObject86;
        boolean boolean90 = builder0.getmongoUseSSL();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "script" + "'", str78, "script");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "secondary_read_preference" + "'", str81, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(basicDBObject86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test7646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.statisticsTypeName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalPassword("bulk");
        builder9.mongoAdminUser = "null.null";
        int int16 = builder9.connectTimeout;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder9.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test7647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        builder7.scriptType = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.statisticsTypeName("mongodb-1638820218326");
        boolean boolean12 = builder11.getmongoSSLVerifyCertificate();
        boolean boolean13 = builder11.dropCollection;
        java.lang.String str14 = builder11.getriverIndexName();
        java.lang.String str15 = builder11.getmongoDb();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7648");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
    }

    @Test
    public void test7649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.setmongoLocalUser("skip_initial_import");
        builder14.mongoCollection = "skip_initial_import";
        com.mongodb.BasicDBObject basicDBObject19 = builder14.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test7650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7650");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString7();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218326" + "'", str8, "mongodb-1638820218326");
    }

    @Test
    public void test7651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        boolean boolean5 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        boolean boolean7 = mongoDBRiverDefinition6.isImportAllCollections();
        boolean boolean8 = mongoDBRiverDefinition6.mongoSSLVerifyCertificate;
        boolean boolean9 = mongoDBRiverDefinition6.skipInitialImport;
        java.lang.String str10 = mongoDBRiverDefinition6.getMongoOplogNamespace();
        java.lang.String str11 = mongoDBRiverDefinition6.getSCRIPT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition6.storeStatistics;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null.null" + "'", str10, "null.null");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject28);
        builder18.mongoSecondaryReadPreference = false;
        java.lang.String str32 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder33.setmongoOplogFilter(basicDBObject36);
        builder33.setmongoCollection("name");
        java.lang.String str40 = builder33.getmongoAdminPassword();
        builder33.setstoreStatistics(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList43 = builder33.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder18.mongoServers(serverAddressList43);
        builder44.statisticsTypeName = "mongodb-1638820218326";
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = builder44.mongoServers;
        boolean boolean48 = builder44.getdisableIndexRefresh();
        java.lang.String str49 = builder44.getscriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(serverAddressList43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test7653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7653");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions9 = mongoDBRiverDefinition1.mongoClientOptions;
        boolean boolean10 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7654");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.parentTypes;
        com.mongodb.BasicDBObject basicDBObject5 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str6 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition1.mongoClientOptions;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "store_statistics" + "'", str3, "store_statistics");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "password" + "'", str6, "password");
        org.junit.Assert.assertNull(mongoClientOptions7);
    }

    @Test
    public void test7655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7655");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.mongoUseSSL(false);
        java.lang.String str35 = builder34.getindexName();
        boolean boolean36 = builder34.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        builder34.mongoClientOptions = mongoClientOptions37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str41 = serializedObjectSupporter40.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter40.deserializeObjectRiverSettings7();
        java.lang.String str43 = serializedObjectSupporter40.deserializeObjectString15();
        mongoDBRiverDefinition39.serializedObjectSupporter = serializedObjectSupporter40;
        java.lang.String str45 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) mongoDBRiverDefinition39);
        // The following exception was thrown during execution in test generation
        try {
            float float47 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertNull(riverSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb-1638820218424" + "'", str43, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
    }

    @Test
    public void test7656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        builder0.setscriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoAdminPassword("localhost");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder2.getmongoServers();
        java.lang.String str4 = builder2.typeName;
        builder2.script = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.disableIndexRefresh(true);
        com.mongodb.BasicDBObject basicDBObject9 = builder2.getmongoOplogFilter();
        boolean boolean10 = builder2.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7658");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        boolean boolean6 = builder5.getmongoSecondaryReadPreference();
        builder5.scriptType = "hi!";
        builder5.mongoAdminUser = "connect_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.throttleSize((-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        int int8 = builder0.connectTimeout;
        java.lang.String str9 = builder0.scriptType;
        java.lang.String str10 = builder0.getmongoAdminPassword();
        builder0.indexName = "size";
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7660");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test7661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7661");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str7 = mongoDBRiverDefinition6.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean8 = mongoDBRiverDefinition6.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition6.getEXCLUDE_FIELDS_FIELD();
        java.lang.Object obj10 = docScoreSearchScript0.unwrap((java.lang.Object) str9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str15 = mongoDBRiverDefinition14.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition14.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition14.getMongoServers();
        docScoreSearchScript0.setNextVar("import_all_collections", (java.lang.Object) mongoDBRiverDefinition14);
        docScoreSearchScript0.setNextScore((float) '4');
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "exclude_fields" + "'", obj10, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test7662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7662");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("script");
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.mongoClientOptions;
        com.mongodb.BasicDBObject basicDBObject18 = builder16.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        boolean boolean20 = mongoDBRiverDefinition19.isImportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test7663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        builder4.riverIndexName = "include_fields";
        java.lang.String str7 = builder4.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str9 = builder4.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.gettypeName();
        builder10.setmongoDb("concurrent_bulk_requests");
        builder10.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.disableIndexRefresh(false);
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder4.mongoCollectionFilter(basicDBObject20);
        builder21.riverName = "bulk";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test7664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7664");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString14();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test7665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        java.lang.String str5 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str8 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str9 = mongoDBRiverDefinition2.indexName;
        java.lang.String str10 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean11 = mongoDBRiverDefinition2.mongoGridFS;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "secondary_read_preference" + "'", str5, "secondary_read_preference");
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7666");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "import_all_collections" + "'", str5, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
    }

    @Test
    public void test7667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getSCRIPT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoUseSSL();
        boolean boolean8 = mongoDBRiverDefinition4.isAdvancedTransformation();
        boolean boolean9 = mongoDBRiverDefinition4.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition4.getRiverIndexName();
        java.lang.String str11 = mongoDBRiverDefinition4.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.dropCollection;
        java.lang.String str8 = mongoDBRiverDefinition4.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition4.disableIndexRefresh;
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoLocalPassword();
        java.lang.String str11 = mongoDBRiverDefinition4.getEXCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition4.parentTypes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_requests" + "'", str8, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "exclude_fields" + "'", str11, "exclude_fields");
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test7669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder2.mongoSSLVerifyCertificate = true;
        com.mongodb.BasicDBObject basicDBObject8 = builder2.mongoCollectionFilter;
        java.lang.String str9 = builder2.getmongoLocalUser();
        com.mongodb.BasicDBObject basicDBObject10 = builder2.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverName("ssl_verify_certificate");
        java.lang.String str15 = builder12.mongoLocalPassword;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test7670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7670");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        java.lang.String str7 = builder4.typeName;
        builder4.setindexName("_river");
        java.lang.String str10 = builder4.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.typeName("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.mongoLocalUser = "store_statistics";
        builder13.setmongoSSLVerifyCertificate(true);
        boolean boolean19 = builder13.getmongoGridFS();
        java.lang.String str20 = builder13.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoClientOptions(mongoClientOptions22);
        java.util.Set<java.lang.String> strSet24 = builder23.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.typeName("port");
        builder26.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.mongoDb("flush_interval");
        builder26.includeCollection = "db";
        builder26.mongoAdminPassword = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.mongoAdminPassword("");
        java.lang.String[] strArray51 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder47.excludeFields = strSet52;
        builder41.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        builder38.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder59.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder62);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder62.mongoAdminPassword("");
        java.lang.String[] strArray69 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder65.excludeFields = strSet70;
        builder59.setexcludeFields((java.util.Set<java.lang.String>) strSet70);
        builder38.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder26.includeFields((java.util.Set<java.lang.String>) strSet70);
        builder13.excludeFields = strSet70;
        builder12.excludeFields = strSet70;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder12.riverIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder12.riverIndexName("local");
        builder81.includeCollection = "advanced_transformation";
        builder81.setmongoDb("parent_types");
        int int86 = builder81.getthrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test7671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.getDROP_COLLECTION_FIELD();
        boolean boolean13 = mongoDBRiverDefinition10.isStoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition10.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition10.getFLUSH_INTERVAL_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition10.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "flush_interval" + "'", str15, "flush_interval");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        java.lang.String str12 = builder7.scriptType;
        java.lang.String str13 = builder7.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        boolean boolean15 = builder7.getdropCollection();
        boolean boolean16 = builder7.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7673");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        boolean boolean6 = builder4.getadvancedTransformation();
        boolean boolean7 = builder4.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        boolean boolean9 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str10 = mongoDBRiverDefinition8.getRiverIndexName();
        boolean boolean11 = mongoDBRiverDefinition8.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        int int4 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str5 = mongoDBRiverDefinition1.mongoLocalPassword;
        boolean boolean6 = mongoDBRiverDefinition1.getskipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test7675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7675");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        java.lang.String str8 = builder0.statisticsTypeName;
        java.util.Set<java.lang.String> strSet9 = builder0.getexcludeFields();
        java.lang.String str10 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.advancedTransformation(false);
        builder12.throttleSize = 100;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str8 = builder2.getriverName();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter9.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter9.deserializeObjectRiverSettings1();
        builder2.serializedObjectSupporter = serializedObjectSupporter9;
        builder2.script = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.indexName("localhost");
        boolean boolean17 = builder2.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder2.script("name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test7677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str5 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "secondary_read_preference" + "'", str5, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject9);
    }

    @Test
    public void test7678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.Class<?> wildcardClass11 = mongoDBRiverDefinition1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "size" + "'", str10, "size");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test7679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7679");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.mongoUseSSL(false);
        java.lang.String str35 = builder34.getindexName();
        boolean boolean36 = builder34.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        builder34.mongoClientOptions = mongoClientOptions37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str41 = serializedObjectSupporter40.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter40.deserializeObjectRiverSettings7();
        java.lang.String str43 = serializedObjectSupporter40.deserializeObjectString15();
        mongoDBRiverDefinition39.serializedObjectSupporter = serializedObjectSupporter40;
        java.lang.String str45 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) mongoDBRiverDefinition39);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertNull(riverSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb-1638820218424" + "'", str43, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
    }

    @Test
    public void test7680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        boolean boolean12 = mongoDBRiverDefinition11.storeStatistics;
        boolean boolean13 = mongoDBRiverDefinition11.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition11.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition11.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition11.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition11.includeCollection;
        java.lang.String str18 = mongoDBRiverDefinition11.getMongoAdminPassword();
        java.lang.String str19 = mongoDBRiverDefinition11.getDROP_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition11.mongoAdminPassword;
        java.lang.String str21 = mongoDBRiverDefinition11.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder9.mongoOplogFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.statisticsTypeName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.advancedTransformation(false);
        int int29 = builder28.getsocketTimeout();
        com.mongodb.BasicDBObject basicDBObject30 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder28.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoAdminPassword("parent_types");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "drop_collection" + "'", str19, "drop_collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test7681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        java.lang.String str5 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition1.scriptType;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "admin" + "'", str5, "admin");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7682");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218424" + "'", str3, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test7683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7683");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString14();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str13 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218408" + "'", str13, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings14);
    }

    @Test
    public void test7684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        builder7.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.importAllCollections(true);
        java.lang.String str21 = builder20.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.mongoCollectionFilter(basicDBObject27);
        builder7.setmongoCollectionFilter(basicDBObject27);
        builder7.setstatisticsTypeName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder7.storeStatistics(false);
        java.util.Set<java.lang.String> strSet34 = builder33.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(strSet34);
    }

    @Test
    public void test7685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        boolean boolean11 = builder9.getadvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject12 = builder9.mongoOplogFilter;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = builder9.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
    }

    @Test
    public void test7686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.riverName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        java.lang.String str8 = builder7.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.riverName("include_fields");
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.scriptType("socket_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        builder6.setconnectTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        builder4.riverIndexName = "include_fields";
        builder4.setmongoDb("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoGridFS(true);
        java.lang.String str13 = builder12.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7690");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        java.lang.String str7 = builder4.typeName;
        builder4.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder4.build();
        boolean boolean11 = builder4.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder4.riverName("skip_initial_import");
        boolean boolean14 = builder4.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder4.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7691");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str5 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str6 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoAdminUser();
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_bulk_requests" + "'", str9, "concurrent_bulk_requests");
    }

    @Test
    public void test7692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        java.lang.String str37 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.riverIndexName("");
        boolean boolean41 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.mongoAdminPassword("connect_timeout");
        builder0.setmongoAdminPassword("mongodb-1638820218408");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test7693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        builder5.setmongoSSLVerifyCertificate(true);
        builder5.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.advancedTransformation(false);
        builder5.setscriptType("type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str6 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str9 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString4();
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString1();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString2();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter11;
        java.lang.String str16 = serializedObjectSupporter11.deserializeObjectString11();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820217755" + "'", str13, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218387" + "'", str16, "mongodb-1638820218387");
    }

    @Test
    public void test7695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getCONNECTION_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition7.getINCLUDE_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition7.storeStatistics;
        java.lang.String str11 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str12 = mongoDBRiverDefinition7.getDB_FIELD();
        int int13 = mongoDBRiverDefinition7.getSocketTimeout();
        java.lang.String str14 = mongoDBRiverDefinition7.getScriptType();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "db" + "'", str12, "db");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder9.setmongoOplogFilter(basicDBObject12);
        boolean boolean14 = builder9.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        boolean boolean17 = mongoDBRiverDefinition16.storeStatistics;
        boolean boolean18 = mongoDBRiverDefinition16.isDisableIndexRefresh();
        java.lang.String str19 = mongoDBRiverDefinition16.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition16.getIncludeFields();
        java.lang.String str21 = mongoDBRiverDefinition16.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition16.includeCollection;
        java.lang.String str23 = mongoDBRiverDefinition16.getMongoAdminPassword();
        java.lang.String str24 = mongoDBRiverDefinition16.getDROP_COLLECTION_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition16.mongoAdminPassword;
        java.lang.String str26 = mongoDBRiverDefinition16.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject27 = mongoDBRiverDefinition16.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder9.mongoOplogFilter(basicDBObject27);
        builder6.mongoOplogFilter = basicDBObject27;
        builder6.indexName = "servers";
        java.lang.String str32 = builder6.mongoDb;
        builder6.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder6.connectTimeout(10);
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder6.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script" + "'", str21, "script");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "drop_collection" + "'", str24, "drop_collection");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(serverAddressList37);
    }

    @Test
    public void test7697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        boolean boolean7 = builder0.importAllCollections;
        boolean boolean8 = builder0.mongoGridFS;
        builder0.settypeName("");
        builder0.setindexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.indexName("mongodb-1638820218408");
        java.util.Set<java.lang.String> strSet16 = builder15.includeFields;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test7698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        java.lang.String str8 = builder2.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.riverName("mongodb-1638820218363");
        boolean boolean11 = builder2.skipInitialImport;
        builder2.setmongoCollection("mongodb-1638820218326");
        java.util.Set<java.lang.String> strSet14 = builder2.parentTypes;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test7699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str11 = mongoDBRiverDefinition10.getPARENT_TYPES_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition10.getIncludeFields();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = mongoDBRiverDefinition10.getDEFAULT_BULK_SIZE();
        int int14 = mongoDBRiverDefinition10.getDEFAULT_BULK_ACTIONS();
        java.lang.String str15 = mongoDBRiverDefinition10.script;
        java.lang.String str16 = mongoDBRiverDefinition10.getStatisticsIndexName();
        java.lang.String str17 = mongoDBRiverDefinition10.getSIZE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition10.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "parent_types" + "'", str11, "parent_types");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(byteSizeValue13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test7700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.mongoAdminPassword("");
        java.lang.String[] strArray19 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder15.excludeFields = strSet20;
        builder9.setexcludeFields((java.util.Set<java.lang.String>) strSet20);
        builder6.parentTypes = strSet20;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.mongoAdminPassword("");
        java.lang.String[] strArray37 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder33.excludeFields = strSet38;
        builder27.setexcludeFields((java.util.Set<java.lang.String>) strSet38);
        builder6.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.includeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.riverIndexName("throttle_size");
        boolean boolean46 = builder45.getmongoUseSSL();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = builder45.initialTimestamp;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(wildcardTimestamp47);
    }

    @Test
    public void test7701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean6 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str7 = mongoDBRiverDefinition2.getSIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str10 = mongoDBRiverDefinition2.getIncludeCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "size" + "'", str7, "size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        int int3 = builder2.getsocketTimeout();
        builder2.includeCollection = "mongodb-1638820218299";
        java.util.Set<java.lang.String> strSet6 = builder2.excludeFields;
        boolean boolean7 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoAdminPassword("port");
        builder2.setsocketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7703");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        java.lang.String str15 = builder5.indexName;
        builder5.mongoAdminPassword = "initial_timestamp";
        builder5.mongoDb = "concurrent_bulk_requests";
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.skipInitialImport;
        boolean boolean6 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("flush_interval");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7705");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoAdminPassword("");
        java.lang.String[] strArray9 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        builder5.excludeFields = strSet10;
        java.lang.String str13 = builder5.indexName;
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) builder5);
        java.lang.String str15 = builder5.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("disable_index_refresh");
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder18.getmongoServers();
        builder18.setthrottleSize((int) (byte) 10);
        java.util.Set<java.lang.String> strSet24 = builder18.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoClientOptions(mongoClientOptions25);
        java.lang.String[] strArray39 = new java.lang.String[] { "mongodb-1638820218264", "mongodb-1638820218449", "db", "credentials", "localhost", "user", "secondary_read_preference", "local", "options", "options", "include_collection", "advanced_transformation" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder18.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder5.includeFields((java.util.Set<java.lang.String>) strSet40);
        java.lang.String str44 = builder43.gettypeName();
        builder43.setmongoAdminPassword("null.null");
        java.util.Set<java.lang.String> strSet47 = builder43.includeFields;
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test7706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str21 = mongoDBRiverDefinition20.getMongoDb();
        java.lang.String str22 = mongoDBRiverDefinition20.getPORT_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition20.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "port" + "'", str22, "port");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disable_index_refresh" + "'", str23, "disable_index_refresh");
    }

    @Test
    public void test7707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        boolean boolean4 = builder0.getmongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        builder0.mongoClientOptions = mongoClientOptions5;
        java.util.Set<java.lang.String> strSet7 = builder0.getincludeFields();
        java.lang.String str8 = builder0.mongoAdminPassword;
        builder0.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.riverName("admin");
        boolean boolean13 = builder12.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7708");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.importAllCollections(true);
        java.lang.String str12 = builder11.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.statisticsIndexName("_river");
        builder14.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder19.setmongoOplogFilter(basicDBObject22);
        boolean boolean24 = builder19.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        boolean boolean27 = mongoDBRiverDefinition26.storeStatistics;
        boolean boolean28 = mongoDBRiverDefinition26.isDisableIndexRefresh();
        java.lang.String str29 = mongoDBRiverDefinition26.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet30 = mongoDBRiverDefinition26.getIncludeFields();
        java.lang.String str31 = mongoDBRiverDefinition26.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str32 = mongoDBRiverDefinition26.includeCollection;
        java.lang.String str33 = mongoDBRiverDefinition26.getMongoAdminPassword();
        java.lang.String str34 = mongoDBRiverDefinition26.getDROP_COLLECTION_FIELD();
        java.lang.String str35 = mongoDBRiverDefinition26.mongoAdminPassword;
        java.lang.String str36 = mongoDBRiverDefinition26.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject37 = mongoDBRiverDefinition26.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder19.mongoOplogFilter(basicDBObject37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder18.mongoOplogFilter(basicDBObject37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.gettypeName();
        builder40.setmongoDb("concurrent_bulk_requests");
        builder40.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder40.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder40.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.storeStatistics;
        boolean boolean53 = mongoDBRiverDefinition51.isDisableIndexRefresh();
        java.lang.String str54 = mongoDBRiverDefinition51.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet55 = mongoDBRiverDefinition51.getIncludeFields();
        java.lang.String str56 = mongoDBRiverDefinition51.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition51.includeCollection;
        java.lang.String str58 = mongoDBRiverDefinition51.getMongoAdminPassword();
        java.lang.String str59 = mongoDBRiverDefinition51.getDROP_COLLECTION_FIELD();
        java.lang.String str60 = mongoDBRiverDefinition51.mongoAdminPassword;
        java.lang.String str61 = mongoDBRiverDefinition51.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject62 = mongoDBRiverDefinition51.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder49.mongoOplogFilter(basicDBObject62);
        builder39.mongoCollectionFilter = basicDBObject62;
        org.elasticsearch.river.RiverSettings riverSettings65 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject62);
        java.util.Map<java.lang.String, java.lang.Object> strMap66 = riverSettings65.settings();
        org.elasticsearch.script.ScriptService scriptService67 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("mongodb-1638820217755", "localhost", riverSettings65, scriptService67);
        org.elasticsearch.script.ScriptService scriptService69 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("credentials", "flush_interval", riverSettings65, scriptService69);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "script" + "'", str31, "script");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "drop_collection" + "'", str34, "drop_collection");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "script" + "'", str56, "script");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "drop_collection" + "'", str59, "drop_collection");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition68);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition70);
    }

    @Test
    public void test7709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        builder7.setscript("socket_timeout");
        com.mongodb.BasicDBObject basicDBObject14 = builder7.mongoOplogFilter;
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = builder16.mongoAdminPassword;
        java.lang.String str19 = builder16.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript20 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.mongoAdminPassword("");
        java.lang.String[] strArray29 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        builder25.excludeFields = strSet30;
        java.lang.String str33 = builder25.indexName;
        docScoreSearchScript20.setNextVar("actions", (java.lang.Object) builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.mongoAdminPassword("");
        java.lang.String[] strArray48 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        builder44.excludeFields = strSet49;
        builder38.setexcludeFields((java.util.Set<java.lang.String>) strSet49);
        docScoreSearchScript20.setNextVar("type", (java.lang.Object) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder16.includeCollection("gridfs");
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder56.getmongoClientOptions();
        builder56.riverName = "hi!";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.gettypeName();
        builder60.setmongoDb("concurrent_bulk_requests");
        builder60.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder60.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet68 = builder67.getparentTypes();
        java.lang.String str69 = builder67.getindexName();
        builder67.setindexName("local");
        builder67.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder74);
        builder74.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder74.importAllCollections(true);
        java.lang.String str81 = builder80.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions83 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder82.mongoClientOptions(mongoClientOptions83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject87 = builder86.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder80.mongoCollectionFilter(basicDBObject87);
        builder67.setmongoCollectionFilter(basicDBObject87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder56.mongoOplogFilter(basicDBObject87);
        org.elasticsearch.river.RiverSettings riverSettings91 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject87);
        builder7.mongoCollectionFilter = basicDBObject87;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(mongoClientOptions57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(basicDBObject87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test7710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder2.getmongoServers();
        builder2.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.storeStatistics = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList3);
    }

    @Test
    public void test7711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.getExcludeFields();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "admin" + "'", str6, "admin");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "drop_collection" + "'", str8, "drop_collection");
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test7712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition4.getMongoLocalUser();
        java.lang.String str10 = mongoDBRiverDefinition4.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_fields" + "'", str10, "include_fields");
    }

    @Test
    public void test7713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.skipInitialImport;
        boolean boolean6 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.script("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.typeName("mongodb-1638820218449");
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder16.mongoServers;
        builder16.script = "skip_initial_import";
        int int20 = builder16.getthrottleSize();
        int int21 = builder16.throttleSize;
        com.mongodb.BasicDBObject basicDBObject22 = builder16.mongoCollectionFilter;
        builder16.mongoSecondaryReadPreference = false;
        builder16.setstatisticsTypeName("local");
        java.lang.String str27 = builder16.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder28.setmongoOplogFilter(basicDBObject31);
        java.lang.String str33 = builder28.getmongoLocalPassword();
        builder28.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder28.mongoLocalPassword("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.mongoAdminPassword("");
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder41.excludeFields = strSet46;
        builder41.mongoGridFS = true;
        boolean boolean51 = builder41.mongoSSLVerifyCertificate;
        int int52 = builder41.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        com.mongodb.BasicDBObject basicDBObject56 = null;
        builder53.setmongoOplogFilter(basicDBObject56);
        java.lang.String str58 = builder53.getmongoLocalPassword();
        builder53.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        builder61.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        com.mongodb.BasicDBObject basicDBObject69 = null;
        builder66.setmongoOplogFilter(basicDBObject69);
        boolean boolean71 = builder66.importAllCollections;
        java.lang.String[] strArray85 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        builder66.parentTypes = strSet86;
        builder61.setparentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder53.includeFields((java.util.Set<java.lang.String>) strSet86);
        builder41.parentTypes = strSet86;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder16.includeFields((java.util.Set<java.lang.String>) strSet86);
        builder9.setexcludeFields((java.util.Set<java.lang.String>) strSet86);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test7714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.util.Set<java.lang.String> strSet8 = null;
        builder2.includeFields = strSet8;
        boolean boolean10 = builder2.disableIndexRefresh;
        int int11 = builder2.getsocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test7715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str18 = mongoDBRiverDefinition17.riverIndexName;
        java.lang.String str19 = mongoDBRiverDefinition17.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_requests" + "'", str19, "concurrent_requests");
    }

    @Test
    public void test7716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7716");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoDb("concurrent_requests");
        java.lang.String str13 = builder7.mongoCollection;
        java.lang.String str14 = builder7.mongoLocalUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7717");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test7718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7718");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getMongoAdminUser();
        java.lang.String str10 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition2.getHOST_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "actions" + "'", str5, "actions");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "drop_collection" + "'", str6, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl_verify_certificate" + "'", str8, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "host" + "'", str12, "host");
    }

    @Test
    public void test7719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet7 = builder6.getparentTypes();
        java.lang.String str8 = builder6.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoDb("gridfs");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test7720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        java.lang.String str8 = builder2.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.riverName("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean15 = mongoDBRiverDefinition14.storeStatistics;
        boolean boolean16 = mongoDBRiverDefinition14.isDisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition14.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition14.getIncludeFields();
        java.lang.String str19 = mongoDBRiverDefinition14.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition14.includeCollection;
        java.lang.String str21 = mongoDBRiverDefinition14.getSIZE_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition14.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition14.getINCLUDE_COLLECTION_FIELD();
        boolean boolean24 = mongoDBRiverDefinition14.mongoSecondaryReadPreference;
        java.lang.String str25 = mongoDBRiverDefinition14.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.mongoOplogFilter(basicDBObject26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "size" + "'", str21, "size");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "skip_initial_import" + "'", str22, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "include_collection" + "'", str23, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7721");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getMongoLocalPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "concurrent_bulk_requests" + "'", str9, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test7722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.disableIndexRefresh = false;
        java.lang.String str13 = builder3.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoSSLVerifyCertificate(true);
        builder15.mongoCollection = "filter";
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoCollectionFilter(basicDBObject18);
        boolean boolean20 = builder15.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder15.mongoClientOptions = mongoClientOptions21;
        org.bson.types.Binary binary23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.initialTimestamp(binary23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test7723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        org.elasticsearch.common.unit.TimeValue timeValue5 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str6 = mongoDBRiverDefinition2.getIncludeCollection();
        boolean boolean7 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str8 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.typeName;
        boolean boolean10 = mongoDBRiverDefinition2.dropCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7724");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218449" + "'", str5, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218264" + "'", str10, "mongodb-1638820218264");
    }

    @Test
    public void test7725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        boolean boolean14 = builder13.mongoSSLVerifyCertificate;
        boolean boolean15 = builder13.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7726");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "credentials" + "'", str5, "credentials");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertNotNull(byteSizeValue7);
    }

    @Test
    public void test7727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7727");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder2.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        boolean boolean24 = builder2.mongoUseSSL;
        java.util.Set<java.lang.String> strSet25 = builder2.parentTypes;
        java.lang.String str26 = builder2.getincludeCollection();
        builder2.setthrottleSize((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test7728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7728");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str12 = mongoDBRiverDefinition1.getMongoDb();
        java.lang.String str13 = mongoDBRiverDefinition1.getTYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition1.getFILTER_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "db" + "'", str14, "db");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "filter" + "'", str15, "filter");
    }

    @Test
    public void test7729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition4.getInitialTimestamp();
        java.lang.String str8 = mongoDBRiverDefinition4.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition4.getdropCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition4.getMongoServers();
        boolean boolean11 = mongoDBRiverDefinition4.isAdvancedTransformation();
        boolean boolean12 = mongoDBRiverDefinition4.isSkipInitialImport();
        boolean boolean13 = mongoDBRiverDefinition4.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script_type" + "'", str8, "script_type");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.typeName("local");
        boolean boolean13 = builder9.getdisableIndexRefresh();
        builder9.storeStatistics = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        builder4.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test7732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.socketTimeout = (short) 10;
        builder0.setconnectTimeout((int) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.scriptType("concurrent_bulk_requests");
        java.util.Set<java.lang.String> strSet7 = builder0.getincludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test7733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7733");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoLocalPassword("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.riverName("bulk_size");
        builder6.includeCollection = "";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        builder0.mongoLocalUser = "mongodb-1638820218387";
        java.util.Set<java.lang.String> strSet22 = builder0.excludeFields;
        boolean boolean23 = builder0.storeStatistics;
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject27 = mongoDBRiverDefinition26.getMongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(basicDBObject27);
    }

    @Test
    public void test7735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean12 = builder0.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoClientOptions(mongoClientOptions13);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        builder16.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.importAllCollections(true);
        java.lang.String str23 = builder22.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.mongoCollectionFilter(basicDBObject29);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoClientOptions(mongoClientOptions33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoCollectionFilter(basicDBObject37);
        builder38.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder41.setmongoOplogFilter(basicDBObject44);
        boolean boolean46 = builder41.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        boolean boolean49 = mongoDBRiverDefinition48.storeStatistics;
        boolean boolean50 = mongoDBRiverDefinition48.isDisableIndexRefresh();
        java.lang.String str51 = mongoDBRiverDefinition48.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition48.getIncludeFields();
        java.lang.String str53 = mongoDBRiverDefinition48.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition48.includeCollection;
        java.lang.String str55 = mongoDBRiverDefinition48.getMongoAdminPassword();
        java.lang.String str56 = mongoDBRiverDefinition48.getDROP_COLLECTION_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition48.mongoAdminPassword;
        java.lang.String str58 = mongoDBRiverDefinition48.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder41.mongoOplogFilter(basicDBObject59);
        builder38.mongoOplogFilter = basicDBObject59;
        org.elasticsearch.script.ExecutableScript executableScript62 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str64 = builder63.gettypeName();
        builder63.setmongoDb("concurrent_bulk_requests");
        builder63.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder63.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet71 = builder70.getparentTypes();
        java.lang.String str72 = builder70.getindexName();
        builder70.setindexName("local");
        builder70.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder77);
        builder77.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder77.importAllCollections(true);
        java.lang.String str84 = builder83.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions86 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.mongoClientOptions(mongoClientOptions86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder87.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject90 = builder89.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder83.mongoCollectionFilter(basicDBObject90);
        builder70.setmongoCollectionFilter(basicDBObject90);
        org.elasticsearch.script.ExecutableScript executableScript93 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject90);
        builder14.mongoOplogFilter = basicDBObject90;
        builder14.mongoDb = "";
        int int97 = builder14.throttleSize;
        boolean boolean98 = builder14.mongoUseSSL;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter99 = builder14.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "script" + "'", str53, "script");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "drop_collection" + "'", str56, "drop_collection");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executableScript62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(basicDBObject90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executableScript93);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter99);
    }

    @Test
    public void test7736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.setmongoLocalUser("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        boolean boolean18 = mongoDBRiverDefinition17.mongoSecondaryReadPreference;
        boolean boolean19 = mongoDBRiverDefinition17.getmongoSSLVerifyCertificate();
        int int20 = mongoDBRiverDefinition17.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str21 = mongoDBRiverDefinition17.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "filter" + "'", str21, "filter");
    }

    @Test
    public void test7737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getskipInitialImport();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "skip_initial_import" + "'", str4, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "store_statistics" + "'", str11, "store_statistics");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
    }

    @Test
    public void test7738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.skipInitialImport;
        builder0.setriverIndexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.scriptType("index");
        builder0.setscript("mongodb-1638820218408");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7739");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.Set<java.lang.String> strSet9 = builder2.includeFields;
        builder2.settypeName("null.null");
        java.lang.String str12 = builder2.mongoLocalUser;
        com.mongodb.BasicDBObject basicDBObject13 = builder2.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean21 = builder18.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        builder27.mongoLocalUser = "store_statistics";
        int int31 = builder27.connectTimeout;
        java.util.Set<java.lang.String> strSet32 = builder27.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.riverName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder40.mongoAdminPassword("");
        java.lang.String[] strArray47 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder43.excludeFields = strSet48;
        builder37.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder37.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        boolean boolean55 = builder53.dropCollection;
        boolean boolean56 = builder53.storeStatistics;
        java.util.Set<java.lang.String> strSet57 = builder53.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder27.includeFields(strSet57);
        builder24.setparentTypes(strSet57);
        builder18.parentTypes = strSet57;
        builder2.setexcludeFields(strSet57);
        builder2.riverIndexName = "local";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder2.mongoLocalUser("mongodb-1638820218449");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test7740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7740");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        boolean boolean9 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.dropCollection(true);
        java.lang.String str12 = builder0.getincludeCollection();
        java.util.Set<java.lang.String> strSet13 = builder0.excludeFields;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test7741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = builder6.getmongoServers();
        builder6.includeCollection = "concurrent_bulk_requests.null";
        builder6.setindexName("include_collection");
        builder6.indexName = "bulk";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serverAddressList7);
    }

    @Test
    public void test7742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7742");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test7743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str5 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString17();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter7;
        java.lang.String str10 = serializedObjectSupporter7.deserializeObjectString1();
        java.lang.String str11 = serializedObjectSupporter7.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter7.deserializeObjectRiverSettings8();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "flush_interval" + "'", str5, "flush_interval");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218449" + "'", str8, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820217755" + "'", str10, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218363" + "'", str11, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings12);
    }

    @Test
    public void test7744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.String str8 = mongoDBRiverDefinition7.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean9 = mongoDBRiverDefinition7.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.script("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder4.indexName("");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test7746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.statisticsTypeName("exclude_fields");
        boolean boolean15 = builder0.importAllCollections;
        java.lang.String str16 = builder0.getriverName();
        builder0.setdisableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.statisticsTypeName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str17 = mongoDBRiverDefinition16.indexName;
        java.lang.String str18 = mongoDBRiverDefinition16.getUSER_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition16.typeName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "user" + "'", str18, "user");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test7748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.importAllCollections(true);
        java.lang.String str22 = builder21.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.mongoCollectionFilter(basicDBObject28);
        builder29.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = builder32.mongoAdminPassword;
        java.lang.String str35 = builder32.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript36 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.mongoAdminPassword("");
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder41.excludeFields = strSet46;
        java.lang.String str49 = builder41.indexName;
        docScoreSearchScript36.setNextVar("actions", (java.lang.Object) builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder57.mongoAdminPassword("");
        java.lang.String[] strArray64 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder60.excludeFields = strSet65;
        builder54.setexcludeFields((java.util.Set<java.lang.String>) strSet65);
        docScoreSearchScript36.setNextVar("type", (java.lang.Object) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder32.parentTypes((java.util.Set<java.lang.String>) strSet65);
        builder29.setincludeFields((java.util.Set<java.lang.String>) strSet65);
        builder14.parentTypes = strSet65;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder14.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        boolean boolean76 = mongoDBRiverDefinition75.advancedTransformation;
        boolean boolean77 = mongoDBRiverDefinition75.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test7749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str8 = builder7.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet8 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        builder2.setsocketTimeout(27017);
        boolean boolean12 = builder2.getstoreStatistics();
        builder2.importAllCollections = false;
        java.lang.String str15 = builder2.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoSecondaryReadPreference(false);
        boolean boolean19 = builder18.storeStatistics;
        java.lang.String str20 = builder18.mongoDb;
        builder18.connectTimeout = (byte) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str24 = mongoDBRiverDefinition23.scriptType;
        boolean boolean25 = mongoDBRiverDefinition23.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test7752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        builder7.setscript("socket_timeout");
        java.util.Set<java.lang.String> strSet14 = builder7.getincludeFields();
        java.util.Set<java.lang.String> strSet15 = builder7.parentTypes;
        java.lang.String str16 = builder7.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7753");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int3 = mongoDBRiverDefinition2.getConnectTimeout();
        int int4 = mongoDBRiverDefinition2.getThrottleSize();
        java.lang.String str5 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str6 = mongoDBRiverDefinition2.includeCollection;
        java.lang.String str7 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoAdminUser();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "throttle_size" + "'", str7, "throttle_size");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test7754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getMongoLocalUser();
        java.lang.String str12 = mongoDBRiverDefinition10.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getFLUSH_INTERVAL_FIELD();
        boolean boolean14 = mongoDBRiverDefinition10.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.mongoAdminUser;
        java.lang.String str23 = mongoDBRiverDefinition19.script;
        java.lang.String str24 = mongoDBRiverDefinition19.scriptType;
        java.lang.String str25 = mongoDBRiverDefinition19.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disable_index_refresh" + "'", str22, "disable_index_refresh");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test7756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getSIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
    }

    @Test
    public void test7757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.gettypeName();
        builder14.setmongoDb("concurrent_bulk_requests");
        builder14.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet22 = builder21.getparentTypes();
        java.lang.String str23 = builder21.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str28 = mongoDBRiverDefinition27.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition27.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition27.getMongoServers();
        boolean boolean31 = mongoDBRiverDefinition27.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder21.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder4.mongoOplogFilter(basicDBObject32);
        builder4.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str41 = mongoDBRiverDefinition40.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition40.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList43 = mongoDBRiverDefinition40.getMongoServers();
        boolean boolean44 = mongoDBRiverDefinition40.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition40.getMongoCollectionFilter();
        builder4.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder4.indexName("");
        java.lang.String str49 = builder48.getstatisticsIndexName();
        builder48.setstoreStatistics(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disable_index_refresh" + "'", str28, "disable_index_refresh");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "disable_index_refresh" + "'", str41, "disable_index_refresh");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(serverAddressList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test7758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = builder0.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject6 = builder0.mongoOplogFilter;
        java.lang.String str7 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = builder0.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.indexName("mongodb-1638820218424");
        boolean boolean11 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str12 = builder0.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218424" + "'", str12, "mongodb-1638820218424");
    }

    @Test
    public void test7759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.script;
        int int3 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsIndexName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test7760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7760");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition7.mongoServers;
        java.lang.String str9 = mongoDBRiverDefinition7.getSIZE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition7.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition7.indexName;
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean13 = mongoDBRiverDefinition7.disableIndexRefresh;
        java.lang.String str14 = mongoDBRiverDefinition7.getIncludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "size" + "'", str9, "size");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder14.getmongoClientOptions();
        builder14.throttleSize = ' ';
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions20);
    }

    @Test
    public void test7763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        boolean boolean7 = builder2.getskipInitialImport();
        builder2.setstatisticsIndexName("bulk_size");
        builder2.setconnectTimeout(8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.statisticsIndexName("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoCollection("drop_collection");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
    }

    @Test
    public void test7766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = builder0.serializedObjectSupporter;
        builder0.mongoLocalPassword = "exclude_fields";
        java.lang.String str40 = builder0.mongoDb;
        java.lang.String str41 = builder0.gettypeName();
        java.lang.String str42 = builder0.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(serializedObjectSupporter37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test7767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str11 = mongoDBRiverDefinition1.typeName;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition1.initialTimestamp;
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test7768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7768");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        java.lang.String str10 = builder7.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setstatisticsTypeName("gridfs");
        java.lang.String str14 = builder7.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str6 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str18 = mongoDBRiverDefinition17.getDROP_COLLECTION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.getBULK_FIELD();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk" + "'", str19, "bulk");
    }

    @Test
    public void test7771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        builder0.mongoLocalUser = "mongodb-1638820218387";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        boolean boolean24 = mongoDBRiverDefinition23.storeStatistics;
        boolean boolean25 = mongoDBRiverDefinition23.isDisableIndexRefresh();
        java.lang.String str26 = mongoDBRiverDefinition23.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet27 = mongoDBRiverDefinition23.getIncludeFields();
        java.lang.String str28 = mongoDBRiverDefinition23.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition23.includeCollection;
        java.lang.String str30 = mongoDBRiverDefinition23.getMongoAdminPassword();
        java.lang.String str31 = mongoDBRiverDefinition23.getDROP_COLLECTION_FIELD();
        java.lang.String str32 = mongoDBRiverDefinition23.mongoAdminPassword;
        java.lang.String str33 = mongoDBRiverDefinition23.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject34 = mongoDBRiverDefinition23.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.mongoCollectionFilter(basicDBObject34);
        builder35.setindexName("type");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "script" + "'", str28, "script");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "drop_collection" + "'", str31, "drop_collection");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test7772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str7 = mongoDBRiverDefinition6.mongoDb;
        java.lang.String str8 = mongoDBRiverDefinition6.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition6.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
    }

    @Test
    public void test7773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = builder9.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoAdminUser("disable_index_refresh");
        boolean boolean17 = builder14.getimportAllCollections();
        builder14.setmongoCollection("mongodb-1638820218387");
        builder14.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        builder14.setthrottleSize(0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder14.mongoClientOptions(mongoClientOptions25);
        java.lang.String str27 = builder14.scriptType;
        boolean boolean28 = builder14.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoCollectionFilter(basicDBObject34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.mongoAdminPassword("");
        java.lang.String[] strArray54 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        builder50.excludeFields = strSet55;
        builder44.setexcludeFields((java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder44.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder60);
        boolean boolean62 = builder60.dropCollection;
        boolean boolean63 = builder60.storeStatistics;
        java.util.Set<java.lang.String> strSet64 = builder60.excludeFields;
        builder39.setexcludeFields(strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder35.includeFields(strSet64);
        builder14.parentTypes = strSet64;
        builder9.includeFields = strSet64;
        java.lang.String str69 = builder9.script;
        com.mongodb.MongoClientOptions mongoClientOptions70 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder9.mongoClientOptions(mongoClientOptions70);
        builder71.setmongoDb("");
        builder71.skipInitialImport = false;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test7774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bulk_size" + "'", str5, "bulk_size");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "connect_timeout" + "'", str6, "connect_timeout");
    }

    @Test
    public void test7775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7775");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoOplogFilter();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "store_statistics" + "'", str5, "store_statistics");
        org.junit.Assert.assertNull(basicDBObject6);
    }

    @Test
    public void test7776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("flush_interval");
        builder5.includeCollection = "db";
        builder5.mongoAdminPassword = "password";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoAdminPassword("");
        java.lang.String[] strArray30 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder26.excludeFields = strSet31;
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet31);
        builder17.parentTypes = strSet31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.mongoAdminPassword("");
        java.lang.String[] strArray48 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        builder44.excludeFields = strSet49;
        builder38.setexcludeFields((java.util.Set<java.lang.String>) strSet49);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder5.includeFields((java.util.Set<java.lang.String>) strSet49);
        boolean boolean55 = builder5.getmongoUseSSL();
        boolean boolean56 = builder5.mongoSSLVerifyCertificate;
        java.lang.String str57 = builder5.indexName;
        java.lang.String str58 = builder5.getriverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test7777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.typeName;
        java.lang.String str22 = mongoDBRiverDefinition19.getBULK_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str24 = mongoDBRiverDefinition19.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bulk" + "'", str22, "bulk");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "throttle_size" + "'", str24, "throttle_size");
    }

    @Test
    public void test7778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        java.util.Set<java.lang.String> strSet27 = builder26.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.typeName("port");
        builder26.mongoSSLVerifyCertificate = true;
        com.mongodb.BasicDBObject basicDBObject32 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder18.mongoCollectionFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder18.scriptType("script");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test7779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        builder9.setmongoLocalPassword("host");
        boolean boolean17 = builder9.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str19 = mongoDBRiverDefinition18.getACTIONS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition18.mongoAdminUser;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "actions" + "'", str19, "actions");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "servers" + "'", str20, "servers");
    }

    @Test
    public void test7780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7780");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str7 = mongoDBRiverDefinition6.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition6.riverIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "type" + "'", str3, "type");
    }

    @Test
    public void test7782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.statisticsTypeName = "flush_interval";
        org.elasticsearch.common.settings.Settings settings14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.gettypeName();
        builder15.setmongoDb("concurrent_bulk_requests");
        builder15.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder15.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        com.mongodb.ServerAddress[] serverAddressArray26 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList27 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList27, serverAddressArray26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.gettypeName();
        builder30.setmongoDb("concurrent_bulk_requests");
        builder30.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder30.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet38 = builder37.getparentTypes();
        java.lang.String str39 = builder37.getindexName();
        builder37.setindexName("local");
        builder37.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        builder44.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder44.importAllCollections(true);
        java.lang.String str51 = builder50.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.mongoClientOptions(mongoClientOptions53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject57 = builder56.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder50.mongoCollectionFilter(basicDBObject57);
        builder37.setmongoCollectionFilter(basicDBObject57);
        builder24.mongoOplogFilter = basicDBObject57;
        org.elasticsearch.river.RiverSettings riverSettings61 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject57);
        builder0.setmongoCollectionFilter(basicDBObject57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        builder63.mongoLocalUser = "store_statistics";
        int int67 = builder63.connectTimeout;
        java.util.Set<java.lang.String> strSet68 = builder63.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder63.riverName("parent_types");
        builder70.scriptType = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder70.statisticsTypeName("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.socketTimeout((int) ' ');
        boolean boolean78 = builder75.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder79.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder81.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder84.mongoAdminPassword("");
        java.lang.String[] strArray91 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet92 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet92, strArray91);
        builder87.excludeFields = strSet92;
        builder81.setexcludeFields((java.util.Set<java.lang.String>) strSet92);
        builder75.parentTypes = strSet92;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder74.parentTypes((java.util.Set<java.lang.String>) strSet92);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet92);
        com.mongodb.BasicDBObject basicDBObject99 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(serverAddressArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(basicDBObject99);
    }

    @Test
    public void test7783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject33 = builder0.mongoCollectionFilter;
        builder0.connectTimeout = 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.mongoAdminPassword("collection");
        builder37.script = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder37.scriptType("mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test7784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7784");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.Set<java.lang.String> strSet21 = builder18.includeFields;
        com.mongodb.BasicDBObject basicDBObject22 = builder18.getmongoCollectionFilter();
        java.util.Set<java.lang.String> strSet23 = builder18.getexcludeFields();
        java.lang.String str24 = builder18.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test7785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString11();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter5;
        java.lang.String str9 = mongoDBRiverDefinition1.getDB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        boolean boolean11 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str12 = mongoDBRiverDefinition1.getUSER_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218387" + "'", str7, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "db" + "'", str9, "db");
        org.junit.Assert.assertNotNull(byteSizeValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
    }

    @Test
    public void test7786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        builder0.setmongoLocalUser("mongodb-1638820218299");
        builder0.setmongoSSLVerifyCertificate(true);
        builder0.skipInitialImport = true;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test7787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition19.getFLUSH_INTERVAL_FIELD();
        boolean boolean22 = mongoDBRiverDefinition19.skipInitialImport;
        boolean boolean23 = mongoDBRiverDefinition19.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet24 = mongoDBRiverDefinition19.parentTypes;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "flush_interval" + "'", str21, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet24);
    }

    @Test
    public void test7788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        builder2.mongoLocalPassword = "flush_interval";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test7789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.lang.String str8 = mongoDBRiverDefinition7.getUSER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition7.getRiverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7790");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str3 = builder1.mongoAdminPassword;
        java.lang.String str4 = builder1.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript5 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.mongoAdminPassword("");
        java.lang.String[] strArray14 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        builder10.excludeFields = strSet15;
        java.lang.String str18 = builder10.indexName;
        docScoreSearchScript5.setNextVar("actions", (java.lang.Object) builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.mongoAdminPassword("");
        java.lang.String[] strArray33 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        builder29.excludeFields = strSet34;
        builder23.setexcludeFields((java.util.Set<java.lang.String>) strSet34);
        docScoreSearchScript5.setNextVar("type", (java.lang.Object) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder1.parentTypes((java.util.Set<java.lang.String>) strSet34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.lang.String str41 = mongoDBRiverDefinition40.mongoAdminPassword;
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition40.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.common.settings.Settings settings44 = riverSettings43.globalSettings();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNull(settings44);
    }

    @Test
    public void test7791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        boolean boolean11 = builder4.mongoUseSSL;
        java.lang.String str12 = builder4.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.typeName("secondary_read_preference");
        builder4.setmongoLocalPassword("port");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        builder14.setadvancedTransformation(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7793");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str4 = mongoDBRiverDefinition3.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition3.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition3.getMongoServers();
        boolean boolean7 = mongoDBRiverDefinition3.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject8 = mongoDBRiverDefinition3.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminPassword("");
        java.lang.String[] strArray22 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder18.excludeFields = strSet23;
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder12.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        java.lang.String str30 = mongoDBRiverDefinition29.getRiverIndexName();
        boolean boolean31 = mongoDBRiverDefinition29.getmongoGridFS();
        boolean boolean32 = mongoDBRiverDefinition29.getmongoSecondaryReadPreference();
        java.lang.String str33 = mongoDBRiverDefinition29.getPORT_FIELD();
        java.lang.String str34 = mongoDBRiverDefinition29.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean35 = mongoDBRiverDefinition29.isSkipInitialImport();
        java.lang.String str36 = mongoDBRiverDefinition29.mongoLocalUser;
        java.lang.String str37 = mongoDBRiverDefinition29.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition29.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript39 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject38);
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder41.setmongoOplogFilter(basicDBObject44);
        boolean boolean46 = builder41.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        boolean boolean49 = mongoDBRiverDefinition48.storeStatistics;
        boolean boolean50 = mongoDBRiverDefinition48.isDisableIndexRefresh();
        java.lang.String str51 = mongoDBRiverDefinition48.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet52 = mongoDBRiverDefinition48.getIncludeFields();
        java.lang.String str53 = mongoDBRiverDefinition48.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str54 = mongoDBRiverDefinition48.includeCollection;
        java.lang.String str55 = mongoDBRiverDefinition48.getMongoAdminPassword();
        java.lang.String str56 = mongoDBRiverDefinition48.getDROP_COLLECTION_FIELD();
        java.lang.String str57 = mongoDBRiverDefinition48.mongoAdminPassword;
        java.lang.String str58 = mongoDBRiverDefinition48.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject59 = mongoDBRiverDefinition48.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder41.mongoOplogFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder41.throttleSize((-1));
        com.mongodb.BasicDBObject basicDBObject64 = builder63.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings65 = new org.elasticsearch.river.RiverSettings(settings40, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.script.ExecutableScript executableScript66 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disable_index_refresh" + "'", str4, "disable_index_refresh");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "port" + "'", str33, "port");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "initial_timestamp" + "'", str34, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(executableScript39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "script" + "'", str53, "script");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "drop_collection" + "'", str56, "drop_collection");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertNotNull(executableScript66);
    }

    @Test
    public void test7794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize(0);
        java.lang.String str13 = builder2.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.connectTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7795");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str7 = mongoDBRiverDefinition6.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean8 = mongoDBRiverDefinition6.isDisableIndexRefresh();
        java.lang.String str9 = mongoDBRiverDefinition6.getEXCLUDE_FIELDS_FIELD();
        java.lang.Object obj10 = docScoreSearchScript0.unwrap((java.lang.Object) str9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.script("disable_index_refresh");
        boolean boolean16 = builder13.skipInitialImport;
        java.lang.Object obj17 = docScoreSearchScript0.unwrap((java.lang.Object) builder13);
        java.lang.String str18 = builder13.mongoAdminUser;
        boolean boolean19 = builder13.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disable_index_refresh" + "'", str7, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "exclude_fields" + "'", str9, "exclude_fields");
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "exclude_fields" + "'", obj10, "exclude_fields");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test7796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        builder2.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.socketTimeout((int) (short) -1);
        builder2.setconnectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test7797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder18.script("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder18.advancedTransformation(true);
        com.mongodb.BasicDBObject basicDBObject34 = builder33.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
    }

    @Test
    public void test7798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str24 = builder18.getstatisticsTypeName();
        builder18.connectTimeout = 0;
        boolean boolean27 = builder18.getmongoSecondaryReadPreference();
        builder18.scriptType = "concurrent_bulk_requests.null";
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder18.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(mongoClientOptions30);
    }

    @Test
    public void test7799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getPORT_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition19.getFILTER_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminUser();
        boolean boolean27 = mongoDBRiverDefinition19.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "port" + "'", str23, "port");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "filter" + "'", str24, "filter");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "concurrent_bulk_requests" + "'", str25, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disable_index_refresh" + "'", str26, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test7800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7800");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNull(riverSettings5);
    }

    @Test
    public void test7801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7801");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218299" + "'", str6, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test7802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        java.util.Set<java.lang.String> strSet29 = builder2.includeFields;
        builder2.setmongoLocalUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet29);
    }

    @Test
    public void test7803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        java.lang.String str8 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str10 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str12 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "user" + "'", str8, "user");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "import_all_collections" + "'", str10, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "flush_interval" + "'", str12, "flush_interval");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "import_all_collections" + "'", str14, "import_all_collections");
    }

    @Test
    public void test7804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7804");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        java.lang.String str3 = mongoDBRiverDefinition1.getTypeName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str5 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.dropCollection;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test7805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7805");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        boolean boolean11 = builder4.mongoUseSSL;
        java.lang.String str12 = builder4.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder4.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.riverName("exclude_fields");
        java.lang.String str17 = builder14.mongoCollection;
        java.lang.String str18 = builder14.getmongoDb();
        com.mongodb.BasicDBObject basicDBObject19 = builder14.getmongoOplogFilter();
        builder14.indexName = "mongodb-1638820218408";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test7806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        builder2.mongoLocalPassword = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize(0);
        builder2.statisticsIndexName = "credentials";
        builder2.setmongoCollection("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.scriptType("type");
        builder2.scriptType = "connect_timeout";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test7807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.dropCollection;
        java.lang.String str8 = mongoDBRiverDefinition4.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition4.getskipInitialImport();
        java.lang.String str10 = mongoDBRiverDefinition4.getSTORE_STATISTICS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition4.getUSER_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "concurrent_requests" + "'", str8, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "store_statistics" + "'", str10, "store_statistics");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
    }

    @Test
    public void test7808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7808");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        builder4.setriverName("skip_initial_import");
        com.mongodb.BasicDBObject basicDBObject16 = builder4.mongoOplogFilter;
        boolean boolean17 = builder4.getimportAllCollections();
        org.bson.types.BSONTimestamp bSONTimestamp18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder4.initialTimestamp(bSONTimestamp18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getStatisticsTypeName();
        java.lang.String str43 = mongoDBRiverDefinition39.getMongoLocalPassword();
        java.lang.String str44 = mongoDBRiverDefinition39.statisticsIndexName;
        java.lang.String str45 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.getOPTIONS_FIELD();
        int int47 = mongoDBRiverDefinition39.getConnectTimeout();
        java.lang.String str48 = mongoDBRiverDefinition39.getGRIDFS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "collection" + "'", str45, "collection");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "options" + "'", str46, "options");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "gridfs" + "'", str48, "gridfs");
    }

    @Test
    public void test7810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        boolean boolean7 = builder0.importAllCollections;
        boolean boolean8 = builder0.getdisableIndexRefresh();
        boolean boolean9 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean10 = builder0.mongoSecondaryReadPreference;
        builder0.connectTimeout = (-1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7811");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getSCRIPT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoUseSSL();
        boolean boolean8 = mongoDBRiverDefinition4.isAdvancedTransformation();
        boolean boolean9 = mongoDBRiverDefinition4.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition4.getOPTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition4.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean12 = mongoDBRiverDefinition4.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "options" + "'", str10, "options");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "concurrent_requests" + "'", str11, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoCollection;
        java.lang.String str8 = mongoDBRiverDefinition2.getLOCAL_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
    }

    @Test
    public void test7813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        java.util.Set<java.lang.String> strSet15 = builder14.includeFields;
        java.lang.String str16 = builder14.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str18 = mongoDBRiverDefinition17.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition17.getCONNECTION_TIMEOUT();
        boolean boolean20 = mongoDBRiverDefinition17.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ssl_verify_certificate" + "'", str18, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "connect_timeout" + "'", str19, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test7814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.indexName;
        boolean boolean7 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str8 = mongoDBRiverDefinition1.getScript();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        int int10 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str11 = mongoDBRiverDefinition1.getDB_FIELD();
        int int12 = mongoDBRiverDefinition1.getConnectTimeout();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test7815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7815");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder3.statisticsIndexName("script_type");
        builder14.mongoLocalUser = "actions";
        builder14.connectTimeout = (-1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder14.importAllCollections(false);
        builder14.mongoLocalPassword = "initial_timestamp";
        builder14.setmongoLocalPassword("flush_interval");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test7816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str5 = mongoDBRiverDefinition2.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str7 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getSIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "store_statistics" + "'", str5, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "name" + "'", str7, "name");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "credentials" + "'", str9, "credentials");
    }

    @Test
    public void test7817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7817");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoClientOptions(mongoClientOptions4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoCollectionFilter(basicDBObject8);
        builder9.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalPassword("throttle_size");
        java.lang.String str14 = builder13.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        builder15.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = builder21.build();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition22.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder13.mongoCollectionFilter(basicDBObject24);
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        org.elasticsearch.script.ScriptService scriptService27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("servers", "options", riverSettings26, scriptService27);
        java.lang.String str29 = mongoDBRiverDefinition28.getHOST_FIELD();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "host" + "'", str29, "host");
    }

    @Test
    public void test7818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7818");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        docScoreSearchScript0.setNextScore((float) 10L);
        java.lang.Object obj18 = null;
        docScoreSearchScript0.setNextVar("parent_types", obj18);
        // The following exception was thrown during execution in test generation
        try {
            float float20 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
    }

    @Test
    public void test7819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.mongoLocalPassword("user");
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.mongoLocalPassword("filter");
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.mongoClientOptions;
        java.lang.String str27 = builder22.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test7820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoCollectionFilter(basicDBObject12);
        builder13.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.riverIndexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.mongoAdminPassword("");
        java.lang.String[] strArray25 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder21.excludeFields = strSet26;
        builder21.mongoGridFS = true;
        boolean boolean31 = builder21.mongoSSLVerifyCertificate;
        int int32 = builder21.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder33.setmongoOplogFilter(basicDBObject36);
        java.lang.String str38 = builder33.getmongoLocalPassword();
        builder33.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder46.setmongoOplogFilter(basicDBObject49);
        boolean boolean51 = builder46.importAllCollections;
        java.lang.String[] strArray65 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder46.parentTypes = strSet66;
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder33.includeFields((java.util.Set<java.lang.String>) strSet66);
        builder21.parentTypes = strSet66;
        builder13.excludeFields = strSet66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet66);
        builder73.setmongoDb("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        builder76.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder76.importAllCollections(true);
        java.lang.String str83 = builder82.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder82.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition86 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder85);
        java.lang.String str87 = mongoDBRiverDefinition86.getSIZE_FIELD();
        java.lang.String str88 = mongoDBRiverDefinition86.getDROP_COLLECTION_FIELD();
        boolean boolean89 = mongoDBRiverDefinition86.disableIndexRefresh;
        java.lang.String str90 = mongoDBRiverDefinition86.riverName;
        java.util.Set<java.lang.String> strSet91 = mongoDBRiverDefinition86.getExcludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList92 = mongoDBRiverDefinition86.getMongoServers();
        builder73.setmongoServers(serverAddressList92);
        java.util.Set<java.lang.String> strSet94 = builder73.getexcludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "size" + "'", str87, "size");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "drop_collection" + "'", str88, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(strSet91);
        org.junit.Assert.assertNotNull(serverAddressList92);
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test7821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter3 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(strSet4);
    }

    @Test
    public void test7822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7822");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder5.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder5.importAllCollections;
        java.lang.String[] strArray24 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder5.parentTypes = strSet25;
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet25);
        builder0.disableIndexRefresh = false;
        builder0.mongoCollection = "mongodb-1638820218408";
        builder0.setskipInitialImport(true);
        boolean boolean35 = builder0.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test7823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
    }

    @Test
    public void test7824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition6.getDEFAULT_FLUSH_INTERVAL();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition6.initialTimestamp;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition6.getMongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertNotNull(basicDBObject9);
    }

    @Test
    public void test7825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition2.getMongoServers();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str8 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
    }

    @Test
    public void test7826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        builder7.setconnectTimeout(0);
        java.lang.String str11 = builder7.typeName;
        java.lang.String str12 = builder7.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.connectTimeout((int) (byte) 10);
        builder14.dropCollection = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.mongoSecondaryReadPreference(false);
        builder2.setmongoGridFS(false);
        builder2.setdropCollection(false);
        builder2.storeStatistics = false;
        builder2.mongoAdminPassword = "null.null";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean19 = mongoDBRiverDefinition18.storeStatistics;
        boolean boolean20 = mongoDBRiverDefinition18.isSkipInitialImport();
        java.lang.String str21 = mongoDBRiverDefinition18.getMongoCollection();
        boolean boolean22 = mongoDBRiverDefinition18.getadvancedTransformation();
        boolean boolean23 = mongoDBRiverDefinition18.getmongoGridFS();
        int int24 = mongoDBRiverDefinition18.getConnectTimeout();
        java.lang.String str25 = mongoDBRiverDefinition18.getScript();
        java.lang.String str26 = mongoDBRiverDefinition18.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = mongoDBRiverDefinition18.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder2.mongoServers(serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str30 = mongoDBRiverDefinition29.riverIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "import_all_collections" + "'", str26, "import_all_collections");
        org.junit.Assert.assertNotNull(serverAddressList27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test7828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7828");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
    }

    @Test
    public void test7829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7829");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218363" + "'", str4, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test7830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7830");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition4.parentTypes;
        java.lang.String str7 = mongoDBRiverDefinition4.getStatisticsIndexName();
        boolean boolean8 = mongoDBRiverDefinition4.dropCollection;
        java.lang.String str9 = mongoDBRiverDefinition4.getStatisticsIndexName();
        boolean boolean10 = mongoDBRiverDefinition4.isStoreStatistics();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.getUSER_FIELD();
        int int7 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
    }

    @Test
    public void test7832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str5 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isStoreStatistics();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition1.scriptType;
        boolean boolean9 = mongoDBRiverDefinition1.isStoreStatistics();
        java.lang.String str10 = mongoDBRiverDefinition1.indexName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "secondary_read_preference" + "'", str5, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7833");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition2.getStatisticsTypeName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test7834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getSCRIPT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoUseSSL();
        boolean boolean8 = mongoDBRiverDefinition4.isAdvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition4.getSCRIPT_TYPE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7835");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        boolean boolean11 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str15 = mongoDBRiverDefinition14.mongoAdminPassword;
        java.lang.String str16 = mongoDBRiverDefinition14.getTypeName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder7.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder7.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean15 = mongoDBRiverDefinition14.storeStatistics;
        boolean boolean16 = mongoDBRiverDefinition14.isDisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition14.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition14.getIncludeFields();
        java.lang.String str19 = mongoDBRiverDefinition14.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition14.includeCollection;
        java.lang.String str21 = mongoDBRiverDefinition14.getMongoAdminPassword();
        java.lang.String str22 = mongoDBRiverDefinition14.getDROP_COLLECTION_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition14.mongoAdminPassword;
        java.lang.String str24 = mongoDBRiverDefinition14.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject25 = mongoDBRiverDefinition14.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder7.mongoOplogFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoCollectionFilter(basicDBObject25);
        boolean boolean28 = builder0.getmongoGridFS();
        java.lang.String str29 = builder0.getmongoDb();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "drop_collection" + "'", str22, "drop_collection");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test7837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        boolean boolean8 = builder2.getskipInitialImport();
        builder2.setscriptType("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7838");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        boolean boolean8 = builder0.importAllCollections;
        builder0.throttleSize = 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoAdminPassword("");
        java.lang.String[] strArray18 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        builder14.excludeFields = strSet19;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder14.initialTimestamp;
        boolean boolean23 = builder14.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter24.deserializeObjectRiverSettings4();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString16();
        builder14.serializedObjectSupporter = serializedObjectSupporter24;
        org.elasticsearch.river.RiverSettings riverSettings28 = serializedObjectSupporter24.deserializeObjectRiverSettings4();
        builder0.serializedObjectSupporter = serializedObjectSupporter24;
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.indexName("gridfs");
        builder33.setriverIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        java.util.Set<java.lang.String> strSet39 = builder38.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.typeName("port");
        builder41.mongoCollection = "index";
        boolean boolean44 = builder41.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet45 = builder41.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder46.setmongoOplogFilter(basicDBObject49);
        boolean boolean51 = builder46.importAllCollections;
        builder46.setmongoGridFS(false);
        builder46.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.mongoAdminPassword("");
        java.lang.String[] strArray68 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder64.excludeFields = strSet69;
        builder58.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder46.parentTypes((java.util.Set<java.lang.String>) strSet69);
        builder41.excludeFields = strSet69;
        builder33.parentTypes = strSet69;
        builder33.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(riverSettings25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_river" + "'", str26, "_river");
        org.junit.Assert.assertNull(riverSettings28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test7839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        java.lang.String str8 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.riverIndexName;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "port" + "'", str8, "port");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7840");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.mongoDb("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder0.mongoDb("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder40.setmongoOplogFilter(basicDBObject43);
        builder40.setmongoCollection("name");
        java.lang.String str47 = builder40.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str49 = builder48.gettypeName();
        builder48.setmongoDb("concurrent_bulk_requests");
        builder48.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder48.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder48.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        boolean boolean60 = mongoDBRiverDefinition59.storeStatistics;
        boolean boolean61 = mongoDBRiverDefinition59.isDisableIndexRefresh();
        java.lang.String str62 = mongoDBRiverDefinition59.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet63 = mongoDBRiverDefinition59.getIncludeFields();
        java.lang.String str64 = mongoDBRiverDefinition59.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str65 = mongoDBRiverDefinition59.includeCollection;
        java.lang.String str66 = mongoDBRiverDefinition59.getMongoAdminPassword();
        java.lang.String str67 = mongoDBRiverDefinition59.getDROP_COLLECTION_FIELD();
        java.lang.String str68 = mongoDBRiverDefinition59.mongoAdminPassword;
        java.lang.String str69 = mongoDBRiverDefinition59.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject70 = mongoDBRiverDefinition59.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder57.mongoOplogFilter(basicDBObject70);
        builder40.setmongoOplogFilter(basicDBObject70);
        java.lang.String str73 = builder40.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder40.indexName("password");
        java.lang.String str76 = builder40.mongoDb;
        builder40.setmongoLocalUser("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        boolean boolean81 = mongoDBRiverDefinition80.storeStatistics;
        java.util.Set<java.lang.String> strSet82 = mongoDBRiverDefinition80.getParentTypes();
        java.util.List<com.mongodb.ServerAddress> serverAddressList83 = mongoDBRiverDefinition80.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder40.mongoServers(serverAddressList83);
        builder39.mongoServers = serverAddressList83;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "script" + "'", str64, "script");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "drop_collection" + "'", str67, "drop_collection");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(basicDBObject70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(serverAddressList83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test7841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7841");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218408" + "'", str6, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218387" + "'", str8, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
    }

    @Test
    public void test7842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.setmongoCollection("mongodb-1638820218326");
        builder9.setconnectTimeout(8);
        java.lang.String str14 = builder9.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.dropCollection(true);
        boolean boolean17 = builder16.skipInitialImport;
        java.lang.String str18 = builder16.mongoCollection;
        java.util.Set<java.lang.String> strSet19 = builder16.getexcludeFields();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218326" + "'", str18, "mongodb-1638820218326");
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test7843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7843");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("ssl");
        builder10.script = "mongodb-1638820218449";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("mongodb-1638820218264");
        boolean boolean15 = builder10.mongoUseSSL;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder10.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test7844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        boolean boolean8 = mongoDBRiverDefinition7.storeStatistics;
        boolean boolean9 = mongoDBRiverDefinition7.isDisableIndexRefresh();
        java.lang.String str10 = mongoDBRiverDefinition7.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition7.getIncludeFields();
        java.lang.String str12 = mongoDBRiverDefinition7.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition7.includeCollection;
        java.lang.String str14 = mongoDBRiverDefinition7.getMongoAdminPassword();
        java.lang.String str15 = mongoDBRiverDefinition7.getDROP_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition7.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition7.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition7.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject18);
        builder0.mongoLocalUser = "mongodb-1638820218387";
        java.util.Set<java.lang.String> strSet22 = builder0.excludeFields;
        boolean boolean23 = builder0.advancedTransformation;
        boolean boolean24 = builder0.getdisableIndexRefresh();
        builder0.mongoGridFS = false;
        java.lang.String str27 = builder0.gettypeName();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoClientOptions(mongoClientOptions28);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test7845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getMongoCollection();
        boolean boolean22 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        boolean boolean23 = mongoDBRiverDefinition19.skipInitialImport;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = mongoDBRiverDefinition19.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteSizeValue24);
    }

    @Test
    public void test7846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition1.getScriptType();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "password" + "'", str3, "password");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test7847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(true);
        java.lang.String str5 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition6.mongoServers;
        java.lang.String str8 = mongoDBRiverDefinition6.getStatisticsTypeName();
        int int9 = mongoDBRiverDefinition6.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test7848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7848");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218424" + "'", str5, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820217755" + "'", str7, "mongodb-1638820217755");
    }

    @Test
    public void test7849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7849");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        boolean boolean11 = mongoDBRiverDefinition10.getskipInitialImport();
        java.lang.String str12 = mongoDBRiverDefinition10.getINCLUDE_COLLECTION_FIELD();
        boolean boolean13 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str14 = mongoDBRiverDefinition10.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_collection" + "'", str12, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
    }

    @Test
    public void test7850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7850");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoLocalPassword();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition1.getMongoServers();
        int int9 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.common.unit.TimeValue timeValue10 = mongoDBRiverDefinition1.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean11 = mongoDBRiverDefinition1.isDropCollection();
        java.lang.String str12 = mongoDBRiverDefinition1.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
    }

    @Test
    public void test7851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.includeFields;
        boolean boolean7 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition1.getlogger();
        java.lang.String str9 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl_verify_certificate" + "'", str11, "ssl_verify_certificate");
    }

    @Test
    public void test7852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7852");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218449" + "'", str1, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218408" + "'", str3, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
    }

    @Test
    public void test7853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7853");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = builder0.throttleSize;
        int int3 = builder0.getthrottleSize();
        boolean boolean4 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean5 = builder0.skipInitialImport;
        boolean boolean6 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder8.setmongoOplogFilter(basicDBObject11);
        boolean boolean13 = builder8.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.mongoClientOptions(mongoClientOptions17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoCollectionFilter(basicDBObject21);
        builder22.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.riverIndexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder30.mongoGridFS = true;
        boolean boolean40 = builder30.mongoSSLVerifyCertificate;
        int int41 = builder30.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder42.setmongoOplogFilter(basicDBObject45);
        java.lang.String str47 = builder42.getmongoLocalPassword();
        builder42.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        builder50.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder55.setmongoOplogFilter(basicDBObject58);
        boolean boolean60 = builder55.importAllCollections;
        java.lang.String[] strArray74 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder55.parentTypes = strSet75;
        builder50.setparentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder42.includeFields((java.util.Set<java.lang.String>) strSet75);
        builder30.parentTypes = strSet75;
        builder22.excludeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder8.includeFields((java.util.Set<java.lang.String>) strSet75);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet75);
        builder0.mongoSecondaryReadPreference = false;
        java.lang.String str86 = builder0.mongoLocalPassword;
        org.bson.types.BSONTimestamp bSONTimestamp87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder0.initialTimestamp(bSONTimestamp87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test7854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = builder18.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        builder18.setmongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder18.script("mongodb-1638820218408");
        boolean boolean32 = builder31.getmongoSecondaryReadPreference();
        builder31.mongoLocalUser = "null.null";
        builder31.setmongoUseSSL(false);
        java.lang.String str37 = builder31.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder31.getmongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(mongoClientOptions39);
    }

    @Test
    public void test7855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7855");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test7856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7856");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218264" + "'", str6, "mongodb-1638820218264");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test7857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7857");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218363" + "'", str6, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test7858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setmongoLocalUser("servers");
        builder6.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.mongoGridFS(false);
        builder6.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition1.getMongoClientOptions();
        boolean boolean8 = mongoDBRiverDefinition1.isAdvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "credentials" + "'", str5, "credentials");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "parent_types" + "'", str6, "parent_types");
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7860");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        com.mongodb.BasicDBObject basicDBObject11 = builder3.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.connectTimeout((int) (byte) -1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.script("exclude_fields");
        builder15.statisticsTypeName = "user";
        builder15.importAllCollections = false;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        boolean boolean5 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.includeCollection("include_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.riverName("advanced_transformation");
        boolean boolean10 = builder9.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoDb("filter");
        builder12.mongoGridFS = false;
        java.lang.String str15 = builder12.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoDb("flush_interval");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean10 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str11 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getMongoAdminPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test7864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.scriptType("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test7865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.riverName("advanced_transformation");
        boolean boolean10 = builder9.mongoUseSSL;
        boolean boolean11 = builder9.mongoGridFS;
        builder9.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder11.getmongoServers();
        builder11.setmongoCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str17 = mongoDBRiverDefinition16.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test7867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        builder0.setconnectTimeout((int) '#');
        java.lang.String str25 = builder0.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.disableIndexRefresh(false);
        builder0.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test7868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7868");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getPORT_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean25 = mongoDBRiverDefinition19.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition19.mongoOplogFilter;
        java.lang.String str27 = mongoDBRiverDefinition19.getBULK_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "port" + "'", str23, "port");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "initial_timestamp" + "'", str24, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bulk" + "'", str27, "bulk");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "localhost" + "'", str28, "localhost");
    }

    @Test
    public void test7869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        builder5.mongoCollection = "index";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoDb("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.mongoCollectionFilter;
        builder14.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.mongoAdminPassword("");
        java.lang.String[] strArray30 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        builder26.excludeFields = strSet31;
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder20.mongoUseSSL(false);
        java.util.Set<java.lang.String> strSet37 = builder36.excludeFields;
        builder14.includeFields = strSet37;
        builder9.setparentTypes(strSet37);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings41 = serializedObjectSupporter40.deserializeObjectRiverSettings4();
        java.lang.String str42 = serializedObjectSupporter40.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings43 = serializedObjectSupporter40.deserializeObjectRiverSettings5();
        java.lang.String str44 = serializedObjectSupporter40.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings45 = serializedObjectSupporter40.deserializeObjectRiverSettings5();
        builder9.serializedObjectSupporter = serializedObjectSupporter40;
        org.elasticsearch.river.RiverSettings riverSettings47 = serializedObjectSupporter40.deserializeObjectRiverSettings8();
        java.lang.String str48 = serializedObjectSupporter40.deserializeObjectString6();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(riverSettings41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb-1638820218387" + "'", str42, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "mongodb-1638820218449" + "'", str44, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings45);
        org.junit.Assert.assertNull(riverSettings47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "_river" + "'", str48, "_river");
    }

    @Test
    public void test7870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.lang.String str6 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsTypeName();
        boolean boolean10 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = mongoDBRiverDefinition11.getSIZE_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str16 = serializedObjectSupporter13.deserializeObjectString15();
        mongoDBRiverDefinition11.serializedObjectSupporter = serializedObjectSupporter13;
        java.lang.String str18 = mongoDBRiverDefinition11.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition11.getUSER_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition11.getINCLUDE_FIELDS_FIELD();
        boolean boolean21 = mongoDBRiverDefinition11.getdropCollection();
        java.lang.String str22 = mongoDBRiverDefinition11.getUSER_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "size" + "'", str12, "size");
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218387" + "'", str15, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218424" + "'", str16, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "secondary_read_preference" + "'", str18, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "user" + "'", str19, "user");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "include_fields" + "'", str20, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "user" + "'", str22, "user");
    }

    @Test
    public void test7872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7872");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        builder12.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoAdminPassword("");
        java.lang.String[] strArray24 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        builder20.excludeFields = strSet25;
        com.mongodb.BasicDBObject basicDBObject28 = builder20.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoOplogFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder11.mongoCollectionFilter(basicDBObject28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder11.mongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder11.riverIndexName("collection");
        builder34.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder34.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        java.lang.String str11 = builder9.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoUseSSL(true);
        org.bson.types.Binary binary14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.initialTimestamp(binary14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test7874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        java.lang.String str14 = builder13.mongoDb;
        builder13.setmongoLocalUser("");
        java.lang.String str17 = builder13.mongoAdminUser;
        java.util.Set<java.lang.String> strSet18 = builder13.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean20 = builder13.getdropCollection();
        java.lang.String str21 = builder13.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "port" + "'", str14, "port");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test7875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.riverName("concurrent_bulk_requests.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = null;
        builder6.setparentTypes(strSet8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test7876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str25 = serializedObjectSupporter24.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings26 = serializedObjectSupporter24.deserializeObjectRiverSettings7();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString15();
        mongoDBRiverDefinition23.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str29 = mongoDBRiverDefinition23.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition23.getMongoServers();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = mongoDBRiverDefinition23.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_river" + "'", str25, "_river");
        org.junit.Assert.assertNull(riverSettings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218424" + "'", str27, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "script" + "'", str29, "script");
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNull(wildcardTimestamp31);
    }

    @Test
    public void test7877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str11 = mongoDBRiverDefinition1.getUSER_FIELD();
        boolean boolean12 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        java.lang.String str13 = mongoDBRiverDefinition1.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_requests" + "'", str13, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder2.getmongoServers();
        builder2.advancedTransformation = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str8 = mongoDBRiverDefinition7.getScript();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition7.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test7879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7879");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        builder6.setmongoAdminUser("skip_initial_import");
        builder6.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.mongoClientOptions(mongoClientOptions14);
        builder15.setsocketTimeout((int) '4');
        builder15.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = builder15.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.gettypeName();
        builder21.setmongoDb("concurrent_bulk_requests");
        builder21.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        com.mongodb.ServerAddress[] serverAddressArray32 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList33 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList33, serverAddressArray32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        builder15.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder6.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        builder37.mongoDb = "bulk_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions41 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoClientOptions(mongoClientOptions41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        boolean boolean47 = builder44.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        builder53.mongoLocalUser = "store_statistics";
        int int57 = builder53.connectTimeout;
        java.util.Set<java.lang.String> strSet58 = builder53.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder53.riverName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder66.mongoAdminPassword("");
        java.lang.String[] strArray73 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        builder69.excludeFields = strSet74;
        builder63.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder63.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        boolean boolean81 = builder79.dropCollection;
        boolean boolean82 = builder79.storeStatistics;
        java.util.Set<java.lang.String> strSet83 = builder79.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder53.includeFields(strSet83);
        builder50.setparentTypes(strSet83);
        builder44.parentTypes = strSet83;
        builder37.setparentTypes(strSet83);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(serializedObjectSupporter20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(serverAddressArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test7880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        boolean boolean14 = builder4.advancedTransformation;
        java.lang.String str15 = builder4.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder16.setmongoOplogFilter(basicDBObject19);
        builder16.setmongoCollection("name");
        java.lang.String str23 = builder16.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.gettypeName();
        builder24.setmongoDb("concurrent_bulk_requests");
        builder24.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        boolean boolean36 = mongoDBRiverDefinition35.storeStatistics;
        boolean boolean37 = mongoDBRiverDefinition35.isDisableIndexRefresh();
        java.lang.String str38 = mongoDBRiverDefinition35.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet39 = mongoDBRiverDefinition35.getIncludeFields();
        java.lang.String str40 = mongoDBRiverDefinition35.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition35.includeCollection;
        java.lang.String str42 = mongoDBRiverDefinition35.getMongoAdminPassword();
        java.lang.String str43 = mongoDBRiverDefinition35.getDROP_COLLECTION_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition35.mongoAdminPassword;
        java.lang.String str45 = mongoDBRiverDefinition35.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject46 = mongoDBRiverDefinition35.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder33.mongoOplogFilter(basicDBObject46);
        builder16.setmongoOplogFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.mongoCollectionFilter(basicDBObject46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str51 = mongoDBRiverDefinition50.includeCollection;
        java.lang.String str52 = mongoDBRiverDefinition50.getRiverName();
        org.elasticsearch.common.logging.ESLogger eSLogger53 = mongoDBRiverDefinition50.getlogger();
        java.lang.String str54 = mongoDBRiverDefinition50.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "script" + "'", str40, "script");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "drop_collection" + "'", str43, "drop_collection");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(eSLogger53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test7881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "password" + "'", str3, "password");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
    }

    @Test
    public void test7882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.importAllCollections(false);
        boolean boolean6 = builder5.getmongoSecondaryReadPreference();
        builder5.scriptType = "hi!";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.disableIndexRefresh(true);
        builder10.socketTimeout = 1;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test7883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7883");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.getadvancedTransformation();
        builder18.setmongoLocalUser("mongodb-1638820217755");
        builder18.mongoLocalPassword = "script_type";
        com.mongodb.BasicDBObject basicDBObject25 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        int int27 = mongoDBRiverDefinition26.socketTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
    }

    @Test
    public void test7884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getIncludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        boolean boolean9 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean10 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter12.deserializeObjectRiverSettings4();
        java.lang.String str14 = serializedObjectSupporter12.deserializeObjectString11();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter12;
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter12;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition1.includeFields;
        boolean boolean19 = mongoDBRiverDefinition1.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218387" + "'", str14, "mongodb-1638820218387");
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test7885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        boolean boolean6 = mongoDBRiverDefinition1.mongoGridFS;
        boolean boolean7 = mongoDBRiverDefinition1.getskipInitialImport();
        int int8 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.mongoCollectionFilter;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "initial_timestamp" + "'", str11, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test7886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7886");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        builder0.setmongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.includeCollection;
        int int8 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.riverIndexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(true);
        com.mongodb.BasicDBObject basicDBObject13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoCollectionFilter(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test7887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        builder6.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter9.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter9.deserializeObjectRiverSettings9();
        java.lang.String str12 = serializedObjectSupporter9.deserializeObjectString2();
        builder6.serializedObjectSupporter = serializedObjectSupporter9;
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter9.deserializeObjectRiverSettings9();
        java.lang.String str15 = serializedObjectSupporter9.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter9.deserializeObjectRiverSettings7();
        java.lang.String str17 = serializedObjectSupporter9.deserializeObjectString8();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
    }

    @Test
    public void test7888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        java.lang.String str8 = builder0.statisticsTypeName;
        java.lang.String str9 = builder0.mongoAdminPassword;
        builder0.setmongoDb("connect_timeout");
        java.lang.String str12 = builder0.getriverName();
        java.lang.String str13 = builder0.scriptType;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        builder7.dropCollection = false;
        java.lang.String str10 = builder7.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean5 = mongoDBRiverDefinition1.isAdvancedTransformation();
        int int6 = mongoDBRiverDefinition1.getConnectTimeout();
        boolean boolean7 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.mongoAdminUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder8.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder8.build();
        java.lang.String str11 = mongoDBRiverDefinition10.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "parent_types" + "'", str11, "parent_types");
    }

    @Test
    public void test7892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoAdminUser;
        java.lang.String str9 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getRiverName();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition2.getIncludeFields();
        int int13 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        int int14 = mongoDBRiverDefinition2.connectTimeout;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "socket_timeout" + "'", str9, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test7893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean5 = mongoDBRiverDefinition4.mongoSecondaryReadPreference;
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition4.parentTypes;
        boolean boolean7 = mongoDBRiverDefinition4.getskipInitialImport();
        java.lang.String str8 = mongoDBRiverDefinition4.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
    }

    @Test
    public void test7894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7894");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.statisticsIndexName("include_fields");
        java.lang.String str10 = builder9.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder15.setmongoOplogFilter(basicDBObject18);
        builder15.setmongoCollection("name");
        java.lang.String str22 = builder15.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.gettypeName();
        builder23.setmongoDb("concurrent_bulk_requests");
        builder23.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder23.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        boolean boolean35 = mongoDBRiverDefinition34.storeStatistics;
        boolean boolean36 = mongoDBRiverDefinition34.isDisableIndexRefresh();
        java.lang.String str37 = mongoDBRiverDefinition34.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet38 = mongoDBRiverDefinition34.getIncludeFields();
        java.lang.String str39 = mongoDBRiverDefinition34.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str40 = mongoDBRiverDefinition34.includeCollection;
        java.lang.String str41 = mongoDBRiverDefinition34.getMongoAdminPassword();
        java.lang.String str42 = mongoDBRiverDefinition34.getDROP_COLLECTION_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition34.mongoAdminPassword;
        java.lang.String str44 = mongoDBRiverDefinition34.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject45 = mongoDBRiverDefinition34.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder32.mongoOplogFilter(basicDBObject45);
        builder15.setmongoOplogFilter(basicDBObject45);
        java.lang.String str48 = builder15.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder15.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = mongoDBRiverDefinition51.getmongoSSLVerifyCertificate();
        java.lang.String str53 = mongoDBRiverDefinition51.getACTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject54 = mongoDBRiverDefinition51.getMongoOplogFilter();
        builder12.mongoOplogFilter = basicDBObject54;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "script" + "'", str39, "script");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "drop_collection" + "'", str42, "drop_collection");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "actions" + "'", str53, "actions");
        org.junit.Assert.assertNotNull(basicDBObject54);
    }

    @Test
    public void test7895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7895");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString11();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218387" + "'", str8, "mongodb-1638820218387");
    }

    @Test
    public void test7896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7896");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertNull(riverSettings9);
    }

    @Test
    public void test7897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.lang.String str5 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.includeFields;
        boolean boolean9 = mongoDBRiverDefinition1.getimportAllCollections();
        java.lang.String str10 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition1.isMongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "include_fields" + "'", str5, "include_fields");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "initial_timestamp" + "'", str6, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "local" + "'", str10, "local");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7898");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.riverIndexName;
        boolean boolean3 = builder0.getimportAllCollections();
        builder0.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoLocalPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoAdminPassword("");
        java.lang.String[] strArray20 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        builder16.excludeFields = strSet21;
        com.mongodb.BasicDBObject basicDBObject24 = builder16.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject25 = builder16.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder8.mongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder37.mongoAdminPassword("");
        java.lang.String[] strArray44 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder40.excludeFields = strSet45;
        builder34.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder34.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        boolean boolean52 = builder50.dropCollection;
        boolean boolean53 = builder50.storeStatistics;
        java.util.Set<java.lang.String> strSet54 = builder50.excludeFields;
        builder29.setexcludeFields(strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.mongoAdminPassword("");
        java.lang.String[] strArray68 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder64.excludeFields = strSet69;
        builder58.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder58.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.dropCollection(true);
        builder74.setsocketTimeout(27017);
        builder74.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder74.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet83 = builder74.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder29.excludeFields(strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder8.excludeFields(strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder0.includeFields(strSet83);
        builder86.mongoLocalPassword = "mongodb-1638820218387";
        boolean boolean89 = builder86.getimportAllCollections();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test7899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7899");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str12 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218424" + "'", str9, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218326" + "'", str10, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218299" + "'", str12, "mongodb-1638820218299");
    }

    @Test
    public void test7900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        boolean boolean14 = builder4.advancedTransformation;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder4.throttleSize((int) (short) 1);
        boolean boolean17 = builder4.getmongoSecondaryReadPreference();
        builder4.mongoCollection = "initial_timestamp";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        java.lang.String[] strArray19 = new java.lang.String[] { "concurrent_bulk_requests", "host", "hi!", "bulk_size", "drop_collection", "mongodb-1638820218387", "servers", "host", "disable_index_refresh", "mongodb-1638820218387", "", "bulk_size", "mongodb-1638820218387" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        builder0.parentTypes = strSet20;
        builder0.setconnectTimeout((int) '#');
        com.mongodb.BasicDBObject basicDBObject25 = builder0.getmongoOplogFilter();
        builder0.mongoSecondaryReadPreference = true;
        java.lang.String str28 = builder0.getmongoDb();
        builder0.setmongoDb("concurrent_bulk_requests.null");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test7902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7902");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder3.initialTimestamp;
        boolean boolean12 = builder3.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString16();
        builder3.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        builder3.mongoSSLVerifyCertificate = true;
        builder3.mongoLocalUser = "mongodb-1638820218449";
        builder3.setindexName("mongodb-1638820218424");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
    }

    @Test
    public void test7903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        builder3.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str41 = mongoDBRiverDefinition40.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition40.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "initial_timestamp" + "'", str41, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index" + "'", str42, "index");
    }

    @Test
    public void test7904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        java.lang.String str6 = builder2.mongoLocalPassword;
        builder2.setmongoAdminPassword("mongodb-1638820218363");
        builder2.mongoSecondaryReadPreference = false;
        java.util.Set<java.lang.String> strSet11 = builder2.getexcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test7905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str13 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str15 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition1.getINDEX_OBJECT();
        java.lang.String str17 = mongoDBRiverDefinition1.getHOST_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "host" + "'", str17, "host");
    }

    @Test
    public void test7906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7906");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.mongoCollectionFilter(basicDBObject13);
        builder14.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.includeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder14.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.statisticsIndexName("throttle_size");
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder22.getmongoServers();
        builder22.typeName = "mongodb-1638820218449";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serverAddressList23);
    }

    @Test
    public void test7907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isStoreStatistics();
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition1.excludeFields;
        java.lang.String str12 = mongoDBRiverDefinition1.getRiverIndexName();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean14 = mongoDBRiverDefinition1.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition1.statisticsTypeName;
        java.lang.String str16 = mongoDBRiverDefinition1.mongoDb;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        boolean boolean5 = builder2.getimportAllCollections();
        builder2.setmongoCollection("mongodb-1638820218387");
        java.lang.String str8 = builder2.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.riverName("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.storeStatistics(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test7909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str8 = builder2.getriverName();
        java.util.Set<java.lang.String> strSet9 = builder2.getincludeFields();
        boolean boolean10 = builder2.mongoGridFS;
        boolean boolean11 = builder2.getskipInitialImport();
        int int12 = builder2.getsocketTimeout();
        java.lang.String str13 = builder2.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.mongoAdminUser("user");
        builder2.setmongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition4.getSIZE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getIncludeCollection();
        java.lang.String str10 = mongoDBRiverDefinition4.getPARENT_TYPES_FIELD();
        int int11 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition4.mongoOplogFilter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1000 + "'", int11 == 1000);
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test7911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.importAllCollections(true);
        java.lang.String str13 = builder8.mongoLocalPassword;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript14 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoAdminPassword("");
        java.lang.String[] strArray23 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder19.excludeFields = strSet24;
        java.lang.String str27 = builder19.indexName;
        docScoreSearchScript14.setNextVar("actions", (java.lang.Object) builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder38.excludeFields = strSet43;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet43);
        docScoreSearchScript14.setNextVar("type", (java.lang.Object) strSet43);
        builder8.parentTypes = strSet43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet43);
        java.lang.String str50 = builder49.mongoLocalUser;
        builder49.throttleSize = 0;
        builder49.setriverName("mongodb-1638820218424");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test7912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7912");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
    }

    @Test
    public void test7913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        builder0.setmongoCollection("name");
        java.lang.String str7 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        boolean boolean20 = mongoDBRiverDefinition19.storeStatistics;
        boolean boolean21 = mongoDBRiverDefinition19.isDisableIndexRefresh();
        java.lang.String str22 = mongoDBRiverDefinition19.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition19.getIncludeFields();
        java.lang.String str24 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str25 = mongoDBRiverDefinition19.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition19.getMongoAdminPassword();
        java.lang.String str27 = mongoDBRiverDefinition19.getDROP_COLLECTION_FIELD();
        java.lang.String str28 = mongoDBRiverDefinition19.mongoAdminPassword;
        java.lang.String str29 = mongoDBRiverDefinition19.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition19.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder17.mongoOplogFilter(basicDBObject30);
        builder0.setmongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.indexName;
        java.lang.String str34 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.mongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.script("disable_index_refresh");
        java.lang.String str41 = builder40.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject47 = builder46.mongoCollectionFilter;
        builder40.mongoCollectionFilter = basicDBObject47;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        boolean boolean50 = builder40.advancedTransformation;
        java.lang.String str51 = builder40.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder52.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder61.mongoAdminPassword("");
        java.lang.String[] strArray68 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder64.excludeFields = strSet69;
        builder58.setexcludeFields((java.util.Set<java.lang.String>) strSet69);
        builder55.parentTypes = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder40.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder0.includeFields = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "script" + "'", str24, "script");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test7914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7914");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory1 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        builder2.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.importAllCollections(true);
        java.lang.String str9 = builder8.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject15 = builder14.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoCollectionFilter(basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str21 = mongoDBRiverDefinition20.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean22 = mongoDBRiverDefinition20.isDisableIndexRefresh();
        java.lang.String str23 = mongoDBRiverDefinition20.getACTIONS_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition20.getMongoOplogNamespace();
        java.lang.String str25 = mongoDBRiverDefinition20.getMongoLocalPassword();
        java.lang.String str26 = mongoDBRiverDefinition20.getSCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject27 = mongoDBRiverDefinition20.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.typeName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.mongoAdminPassword("");
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder41.excludeFields = strSet46;
        builder35.setexcludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder35.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        boolean boolean53 = builder51.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.socketTimeout((int) (byte) 1);
        com.mongodb.BasicDBObject basicDBObject61 = builder60.getmongoCollectionFilter();
        builder51.setmongoCollectionFilter(basicDBObject61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder32.mongoCollectionFilter(basicDBObject61);
        java.lang.String str64 = builder63.mongoCollection;
        org.elasticsearch.common.settings.Settings settings65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        java.lang.String str69 = mongoDBRiverDefinition68.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean70 = mongoDBRiverDefinition68.getskipInitialImport();
        int int71 = mongoDBRiverDefinition68.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str72 = mongoDBRiverDefinition68.getUSER_FIELD();
        int int73 = mongoDBRiverDefinition68.getDEFAULT_DB_PORT();
        boolean boolean74 = mongoDBRiverDefinition68.skipInitialImport;
        com.mongodb.BasicDBObject basicDBObject75 = mongoDBRiverDefinition68.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings76 = new org.elasticsearch.river.RiverSettings(settings65, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject75);
        builder63.mongoOplogFilter = basicDBObject75;
        org.elasticsearch.script.ExecutableScript executableScript78 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject75);
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject75);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "disable_index_refresh" + "'", str21, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "actions" + "'", str23, "actions");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "null.null" + "'", str24, "null.null");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "script" + "'", str26, "script");
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "disable_index_refresh" + "'", str69, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "user" + "'", str72, "user");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 27017 + "'", int73 == 27017);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(executableScript78);
    }

    @Test
    public void test7915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        boolean boolean12 = mongoDBRiverDefinition10.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition10.riverIndexName;
        java.lang.String str14 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition10.excludeFields;
        boolean boolean16 = mongoDBRiverDefinition10.getdisableIndexRefresh();
        boolean boolean17 = mongoDBRiverDefinition10.skipInitialImport;
        java.lang.String str18 = mongoDBRiverDefinition10.getScriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "connect_timeout" + "'", str14, "connect_timeout");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test7917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        builder4.riverIndexName = "include_fields";
        builder4.setmongoDb("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoSSLVerifyCertificate(true);
        java.lang.String str11 = builder4.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder4.mongoAdminPassword("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder4.riverName("include_collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder14.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder14.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        boolean boolean22 = mongoDBRiverDefinition21.storeStatistics;
        boolean boolean23 = mongoDBRiverDefinition21.isDisableIndexRefresh();
        java.lang.String str24 = mongoDBRiverDefinition21.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition21.getIncludeFields();
        java.lang.String str26 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition21.includeCollection;
        java.lang.String str28 = mongoDBRiverDefinition21.getMongoAdminPassword();
        java.lang.String str29 = mongoDBRiverDefinition21.getDROP_COLLECTION_FIELD();
        java.lang.String str30 = mongoDBRiverDefinition21.mongoAdminPassword;
        java.lang.String str31 = mongoDBRiverDefinition21.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition21.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder14.mongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder13.mongoOplogFilter(basicDBObject32);
        builder13.throttleSize = (-1);
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder13.mongoClientOptions(mongoClientOptions37);
        java.lang.String str39 = builder38.riverIndexName;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "script" + "'", str26, "script");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "drop_collection" + "'", str29, "drop_collection");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test7919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.mongoLocalPassword("throttle_size");
        java.util.Set<java.lang.String> strSet11 = builder6.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition12.getExcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test7920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7920");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.statisticsTypeName = "flush_interval";
        java.lang.String str14 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        int int4 = builder0.connectTimeout;
        java.util.Set<java.lang.String> strSet5 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.riverName("parent_types");
        builder7.scriptType = "actions";
        builder7.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.advancedTransformation(false);
        builder13.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.advancedTransformation(false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str5 = mongoDBRiverDefinition2.getUSER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.riverIndexName;
        java.lang.String str9 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str11 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        int int12 = mongoDBRiverDefinition2.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "user" + "'", str5, "user");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "flush_interval" + "'", str7, "flush_interval");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "parent_types" + "'", str9, "parent_types");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test7923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        builder2.socketTimeout = (short) 10;
        builder2.setstatisticsTypeName("local");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
    }

    @Test
    public void test7924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7924");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820217755" + "'", str9, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820218408" + "'", str10, "mongodb-1638820218408");
    }

    @Test
    public void test7925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        java.lang.String str11 = builder9.getriverIndexName();
        java.lang.String str12 = builder9.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.includeCollection("concurrent_bulk_requests.null");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoClientOptions(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7926");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218449" + "'", str6, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218424" + "'", str8, "mongodb-1638820218424");
    }

    @Test
    public void test7927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        java.lang.String str11 = builder3.getstatisticsIndexName();
        boolean boolean12 = builder3.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        boolean boolean14 = mongoDBRiverDefinition13.getskipInitialImport();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition13.getParentTypes();
        boolean boolean16 = mongoDBRiverDefinition13.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition13.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition13.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNull(basicDBObject18);
    }

    @Test
    public void test7928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7928");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.mongoClientOptions(mongoClientOptions2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("disable_index_refresh");
        java.lang.String str6 = builder5.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoClientOptions(mongoClientOptions8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.mongoCollectionFilter;
        builder5.mongoCollectionFilter = basicDBObject12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setriverName("skip_initial_import");
        com.mongodb.BasicDBObject basicDBObject17 = builder5.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition18.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.common.settings.Settings settings21 = riverSettings20.globalSettings();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(settings21);
    }

    @Test
    public void test7929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = builder2.getmongoServers();
        int int4 = builder2.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.socketTimeout((int) (byte) 10);
        java.util.Set<java.lang.String> strSet7 = builder6.getexcludeFields();
        java.lang.String str8 = builder6.getmongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test7930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder7.mongoClientOptions;
        int int9 = builder7.getconnectTimeout();
        builder7.skipInitialImport = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test7931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        builder0.setindexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray32 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder11.excludeFields = strSet33;
        builder0.includeFields = strSet33;
        builder0.setmongoLocalUser("mongodb-1638820218299");
        java.util.Set<java.lang.String> strSet39 = builder0.excludeFields;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strSet39);
    }

    @Test
    public void test7932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7932");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextVar("ssl_verify_certificate", (java.lang.Object) 'a');
        docScoreSearchScript0.setNextScore(0.0f);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter9 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString1();
        docScoreSearchScript0.setNextVar("include_fields", (java.lang.Object) str11);
        docScoreSearchScript0.setNextScore((float) 1L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoAdminPassword("");
        java.lang.String[] strArray28 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder24.excludeFields = strSet29;
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.mongoUseSSL(false);
        java.lang.String str35 = builder34.getindexName();
        boolean boolean36 = builder34.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        builder34.mongoClientOptions = mongoClientOptions37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter40 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str41 = serializedObjectSupporter40.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings42 = serializedObjectSupporter40.deserializeObjectRiverSettings7();
        java.lang.String str43 = serializedObjectSupporter40.deserializeObjectString15();
        mongoDBRiverDefinition39.serializedObjectSupporter = serializedObjectSupporter40;
        java.lang.String str45 = mongoDBRiverDefinition39.getSCRIPT_FIELD();
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) mongoDBRiverDefinition39);
        boolean boolean47 = mongoDBRiverDefinition39.getimportAllCollections();
        java.lang.String str48 = mongoDBRiverDefinition39.getFLUSH_INTERVAL_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp49 = mongoDBRiverDefinition39.getInitialTimestamp();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820217755" + "'", str11, "mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_river" + "'", str41, "_river");
        org.junit.Assert.assertNull(riverSettings42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "mongodb-1638820218424" + "'", str43, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script" + "'", str45, "script");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "flush_interval" + "'", str48, "flush_interval");
        org.junit.Assert.assertNull(wildcardTimestamp49);
    }

    @Test
    public void test7933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int3 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean4 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoAdminPassword();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test7934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder2.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        int int24 = builder2.throttleSize;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test7935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7935");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition3.getMongoCollectionFilter();
        java.lang.String str5 = mongoDBRiverDefinition3.getCOLLECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition3.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertNull(mongoClientOptions6);
    }

    @Test
    public void test7936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = mongoDBRiverDefinition7.mongoServers;
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition7.mongoOplogFilter;
        java.lang.String str10 = mongoDBRiverDefinition7.getSERVERS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "servers" + "'", str10, "servers");
    }

    @Test
    public void test7937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        boolean boolean21 = mongoDBRiverDefinition19.getmongoGridFS();
        boolean boolean22 = mongoDBRiverDefinition19.getmongoSecondaryReadPreference();
        java.lang.String str23 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        com.mongodb.BasicDBObject basicDBObject24 = mongoDBRiverDefinition19.mongoOplogFilter;
        boolean boolean25 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        java.lang.String str26 = mongoDBRiverDefinition19.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "initial_timestamp" + "'", str23, "initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "type" + "'", str26, "type");
    }

    @Test
    public void test7938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.riverIndexName("mongodb-1638820218387");
        java.util.Set<java.lang.String> strSet12 = builder7.getexcludeFields();
        boolean boolean13 = builder7.mongoGridFS;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder7.mongoClientOptions = mongoClientOptions14;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory16 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        builder17.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.importAllCollections(true);
        java.lang.String str24 = builder23.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.mongoClientOptions(mongoClientOptions26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.mongoCollectionFilter(basicDBObject30);
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.mongoClientOptions(mongoClientOptions34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.mongoCollectionFilter(basicDBObject38);
        builder39.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder42.setmongoOplogFilter(basicDBObject45);
        boolean boolean47 = builder42.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        boolean boolean50 = mongoDBRiverDefinition49.storeStatistics;
        boolean boolean51 = mongoDBRiverDefinition49.isDisableIndexRefresh();
        java.lang.String str52 = mongoDBRiverDefinition49.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet53 = mongoDBRiverDefinition49.getIncludeFields();
        java.lang.String str54 = mongoDBRiverDefinition49.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str55 = mongoDBRiverDefinition49.includeCollection;
        java.lang.String str56 = mongoDBRiverDefinition49.getMongoAdminPassword();
        java.lang.String str57 = mongoDBRiverDefinition49.getDROP_COLLECTION_FIELD();
        java.lang.String str58 = mongoDBRiverDefinition49.mongoAdminPassword;
        java.lang.String str59 = mongoDBRiverDefinition49.getMongoCollection();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition49.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder42.mongoOplogFilter(basicDBObject60);
        builder39.mongoOplogFilter = basicDBObject60;
        org.elasticsearch.script.ExecutableScript executableScript63 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str65 = builder64.gettypeName();
        builder64.setmongoDb("concurrent_bulk_requests");
        builder64.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder64.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet72 = builder71.getparentTypes();
        java.lang.String str73 = builder71.getindexName();
        builder71.setindexName("local");
        builder71.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder78);
        builder78.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder78.importAllCollections(true);
        java.lang.String str85 = builder84.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions87 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.mongoClientOptions(mongoClientOptions87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder88.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject91 = builder90.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder84.mongoCollectionFilter(basicDBObject91);
        builder71.setmongoCollectionFilter(basicDBObject91);
        org.elasticsearch.script.ExecutableScript executableScript94 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject91);
        builder7.setmongoOplogFilter(basicDBObject91);
        boolean boolean96 = builder7.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "script" + "'", str54, "script");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "drop_collection" + "'", str57, "drop_collection");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executableScript63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(basicDBObject91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executableScript94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test7939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        boolean boolean5 = mongoDBRiverDefinition1.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition1.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminUser();
        java.lang.String str9 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter10.deserializeObjectRiverSettings4();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter10.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter10.deserializeObjectRiverSettings9();
        java.lang.String str15 = serializedObjectSupporter10.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter10.deserializeObjectRiverSettings7();
        java.lang.String str17 = serializedObjectSupporter10.deserializeObjectString8();
        java.lang.String str18 = serializedObjectSupporter10.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter10.deserializeObjectRiverSettings2();
        mongoDBRiverDefinition1.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str21 = serializedObjectSupporter10.deserializeObjectString9();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218387" + "'", str12, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820217755" + "'", str15, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218326" + "'", str18, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218363" + "'", str21, "mongodb-1638820218363");
    }

    @Test
    public void test7940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.mongoAdminUser("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.gettypeName();
        builder9.setmongoDb("concurrent_bulk_requests");
        builder9.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet17 = builder16.getparentTypes();
        java.lang.String str18 = builder16.getindexName();
        builder16.setindexName("local");
        builder16.setscript("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        builder23.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.importAllCollections(true);
        java.lang.String str30 = builder29.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject36 = builder35.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.mongoCollectionFilter(basicDBObject36);
        builder16.setmongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder8.mongoOplogFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        org.bson.types.BSONTimestamp bSONTimestamp41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.initialTimestamp(bSONTimestamp41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test7941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = mongoDBRiverDefinition7.getCONNECTION_TIMEOUT();
        java.lang.String str9 = mongoDBRiverDefinition7.getINCLUDE_COLLECTION_FIELD();
        int int10 = mongoDBRiverDefinition7.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition7.getCOLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "connect_timeout" + "'", str8, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
    }

    @Test
    public void test7942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet8 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder2.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = builder2.build();
        builder2.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
    }

    @Test
    public void test7943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7943");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder3.setmongoOplogFilter(basicDBObject6);
        boolean boolean8 = builder3.importAllCollections;
        builder3.setmongoGridFS(false);
        int int11 = builder3.throttleSize;
        java.lang.String str12 = builder3.getscript();
        builder3.setadvancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder3.mongoClientOptions;
        java.lang.String str16 = builder3.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder3.mongoCollection("concurrent_bulk_requests.null");
        java.lang.Object obj19 = docScoreSearchScript0.unwrap((java.lang.Object) builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet26 = builder23.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder28.riverIndexName("mongodb-1638820218387");
        java.lang.String str33 = builder32.getmongoLocalPassword();
        boolean boolean34 = builder32.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder38.excludeFields = strSet43;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp46 = builder38.initialTimestamp;
        boolean boolean47 = builder38.advancedTransformation;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter48 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings49 = serializedObjectSupporter48.deserializeObjectRiverSettings4();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString16();
        builder38.serializedObjectSupporter = serializedObjectSupporter48;
        org.elasticsearch.river.RiverSettings riverSettings52 = serializedObjectSupporter48.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings53 = serializedObjectSupporter48.deserializeObjectRiverSettings4();
        builder32.serializedObjectSupporter = serializedObjectSupporter48;
        java.lang.String str55 = serializedObjectSupporter48.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings56 = serializedObjectSupporter48.deserializeObjectRiverSettings2();
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) serializedObjectSupporter48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.gettypeName();
        builder59.setmongoDb("concurrent_bulk_requests");
        builder59.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder59.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet67 = builder66.getparentTypes();
        java.lang.String str68 = builder66.getindexName();
        builder66.setindexName("local");
        builder66.setdropCollection(false);
        java.util.Set<java.lang.String> strSet73 = builder66.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder66.script("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder75.dropCollection(false);
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder80);
        builder80.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition85 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder80);
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) builder80);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(wildcardTimestamp46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(riverSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "_river" + "'", str50, "_river");
        org.junit.Assert.assertNull(riverSettings52);
        org.junit.Assert.assertNull(riverSettings53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_river" + "'", str55, "_river");
        org.junit.Assert.assertNull(riverSettings56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test7944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.dropCollection(true);
        boolean boolean9 = builder8.mongoSSLVerifyCertificate;
        builder8.setmongoSecondaryReadPreference(false);
        java.lang.String str12 = builder8.getscriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7945");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str25 = serializedObjectSupporter24.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings26 = serializedObjectSupporter24.deserializeObjectRiverSettings7();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString15();
        mongoDBRiverDefinition23.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.String str29 = mongoDBRiverDefinition23.getCREDENTIALS_FIELD();
        boolean boolean30 = mongoDBRiverDefinition23.isAdvancedTransformation();
        java.lang.String str31 = mongoDBRiverDefinition23.getSIZE_FIELD();
        java.lang.String str32 = mongoDBRiverDefinition23.getINCLUDE_COLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList33 = mongoDBRiverDefinition23.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_river" + "'", str25, "_river");
        org.junit.Assert.assertNull(riverSettings26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb-1638820218424" + "'", str27, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "credentials" + "'", str29, "credentials");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "size" + "'", str31, "size");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "include_collection" + "'", str32, "include_collection");
        org.junit.Assert.assertNotNull(serverAddressList33);
    }

    @Test
    public void test7946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7946");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        java.lang.String[] strArray7 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        builder3.excludeFields = strSet8;
        builder3.disableIndexRefresh = false;
        java.lang.String str13 = builder3.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.mongoSSLVerifyCertificate(true);
        java.lang.String str16 = builder3.getmongoAdminPassword();
        boolean boolean17 = builder3.mongoGridFS;
        boolean boolean18 = builder3.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test7947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.Set<java.lang.String> strSet9 = builder2.includeFields;
        java.lang.String str10 = builder2.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoCollection("size");
        builder2.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoAdminPassword("");
        builder16.statisticsIndexName = "local";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disable_index_refresh" + "'", str10, "disable_index_refresh");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test7948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getMongoCollection();
        boolean boolean22 = mongoDBRiverDefinition19.getdisableIndexRefresh();
        int int23 = mongoDBRiverDefinition19.throttleSize;
        java.lang.String str24 = mongoDBRiverDefinition19.scriptType;
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition19.excludeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test7949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        boolean boolean7 = mongoDBRiverDefinition4.dropCollection;
        java.lang.String str8 = mongoDBRiverDefinition4.getStatisticsIndexName();
        int int9 = mongoDBRiverDefinition4.getSocketTimeout();
        java.lang.String str10 = mongoDBRiverDefinition4.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition4.typeName;
        java.lang.String str12 = mongoDBRiverDefinition4.getMongoAdminPassword();
        boolean boolean13 = mongoDBRiverDefinition4.importAllCollections;
        boolean boolean14 = mongoDBRiverDefinition4.isMongoSecondaryReadPreference();
        java.lang.String str15 = mongoDBRiverDefinition4.getBULK_FIELD();
        boolean boolean16 = mongoDBRiverDefinition4.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "include_collection" + "'", str10, "include_collection");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.mongoDb = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoAdminPassword("hi!");
        boolean boolean14 = builder13.mongoSSLVerifyCertificate;
        builder13.indexName = "mongodb-1638820218363";
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.importAllCollections(true);
        java.lang.String str5 = builder0.mongoLocalPassword;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript6 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoAdminPassword("");
        java.lang.String[] strArray15 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder11.excludeFields = strSet16;
        java.lang.String str19 = builder11.indexName;
        docScoreSearchScript6.setNextVar("actions", (java.lang.Object) builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.mongoAdminPassword("");
        java.lang.String[] strArray34 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder30.excludeFields = strSet35;
        builder24.setexcludeFields((java.util.Set<java.lang.String>) strSet35);
        docScoreSearchScript6.setNextVar("type", (java.lang.Object) strSet35);
        builder0.parentTypes = strSet35;
        builder0.socketTimeout = (short) 0;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test7952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoUseSSL(false);
        boolean boolean10 = builder6.getmongoGridFS();
        int int11 = builder6.getsocketTimeout();
        builder6.socketTimeout = '#';
        builder6.setmongoLocalUser("index");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test7953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7953");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str12 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218408" + "'", str7, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218387" + "'", str12, "mongodb-1638820218387");
    }

    @Test
    public void test7954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        builder9.setmongoCollection("mongodb-1638820218326");
        builder9.setconnectTimeout(8);
        java.lang.String str14 = builder9.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.dropCollection(true);
        boolean boolean17 = builder16.skipInitialImport;
        builder16.setmongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.gettypeName();
        builder8.setmongoDb("concurrent_bulk_requests");
        builder8.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        builder0.mongoServers = serverAddressList20;
        java.lang.String str24 = builder0.indexName;
        boolean boolean25 = builder0.getdropCollection();
        java.lang.String str26 = builder0.typeName;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test7956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.scriptType("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoLocalPassword("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.mongoLocalUser("store_statistics");
        builder11.setincludeCollection("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test7957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7957");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        builder3.settypeName("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.advancedTransformation(false);
        builder26.throttleSize = (byte) 100;
        java.lang.String str33 = builder26.getscriptType();
        com.mongodb.BasicDBObject basicDBObject34 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder3.mongoCollectionFilter(basicDBObject34);
        boolean boolean36 = builder3.getskipInitialImport();
        java.lang.String str37 = builder3.getincludeCollection();
        int int38 = builder3.getthrottleSize();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test7958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        java.lang.String str5 = builder4.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoClientOptions(mongoClientOptions7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.mongoCollectionFilter;
        builder4.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.gettypeName();
        builder14.setmongoDb("concurrent_bulk_requests");
        builder14.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet22 = builder21.getparentTypes();
        java.lang.String str23 = builder21.getindexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        java.lang.String str28 = mongoDBRiverDefinition27.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str29 = mongoDBRiverDefinition27.getRiverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition27.getMongoServers();
        boolean boolean31 = mongoDBRiverDefinition27.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition27.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder21.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder4.mongoOplogFilter(basicDBObject32);
        java.lang.String str36 = builder35.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        builder38.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder38.importAllCollections(true);
        java.lang.String str45 = builder44.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        java.lang.String str49 = mongoDBRiverDefinition48.getSIZE_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition48.typeName;
        java.lang.String str51 = mongoDBRiverDefinition48.getMongoAdminUser();
        java.lang.String str52 = mongoDBRiverDefinition48.getSCRIPT_FIELD();
        java.lang.String str53 = mongoDBRiverDefinition48.getGRIDFS_FIELD();
        int int54 = mongoDBRiverDefinition48.throttleSize;
        java.lang.String str55 = mongoDBRiverDefinition48.getMongoLocalUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList56 = mongoDBRiverDefinition48.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder35.mongoServers(serverAddressList56);
        java.lang.String str58 = builder57.getmongoLocalUser();
        builder57.scriptType = "null.null";
        builder57.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disable_index_refresh" + "'", str28, "disable_index_refresh");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "size" + "'", str49, "size");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "script" + "'", str52, "script");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gridfs" + "'", str53, "gridfs");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(serverAddressList56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test7959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isSkipInitialImport();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getGRIDFS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.mongoOplogFilter;
        java.lang.String str8 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str9 = mongoDBRiverDefinition1.getPORT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gridfs" + "'", str5, "gridfs");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
    }

    @Test
    public void test7960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean4 = mongoDBRiverDefinition2.getskipInitialImport();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str6 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.isAdvancedTransformation();
        boolean boolean8 = mongoDBRiverDefinition2.isStoreStatistics();
        java.lang.String str9 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disable_index_refresh" + "'", str3, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "user" + "'", str6, "user");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl_verify_certificate" + "'", str9, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
    }

    @Test
    public void test7961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoLocalUser = "store_statistics";
        builder0.setmongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("_river");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test7962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        com.mongodb.BasicDBObject basicDBObject4 = mongoDBRiverDefinition1.getMongoCollectionFilter();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSecondaryReadPreference;
        java.lang.String str6 = mongoDBRiverDefinition1.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition1.parentTypes;
        java.lang.String str8 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        boolean boolean9 = mongoDBRiverDefinition1.isMongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "password" + "'", str3, "password");
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_timeout" + "'", str6, "bulk_timeout");
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "throttle_size" + "'", str8, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getSIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition10.mongoCollectionFilter;
        int int13 = mongoDBRiverDefinition10.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test7964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7964");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition1.mongoServers;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition1.mongoOplogFilter;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "advanced_transformation" + "'", str9, "advanced_transformation");
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test7965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        java.lang.String str8 = builder6.getmongoCollection();
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean14 = mongoDBRiverDefinition12.isDisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition12.getUSER_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition12.getNAME_FIELD();
        boolean boolean17 = mongoDBRiverDefinition12.mongoGridFS;
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition12.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        builder6.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder6.importAllCollections(true);
        com.mongodb.BasicDBObject basicDBObject24 = builder6.getmongoOplogFilter();
        boolean boolean25 = builder6.dropCollection;
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disable_index_refresh" + "'", str13, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "user" + "'", str15, "user");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "name" + "'", str16, "name");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(basicDBObject24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test7966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getPORT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions7 = mongoDBRiverDefinition4.mongoClientOptions;
        boolean boolean8 = mongoDBRiverDefinition4.isSkipInitialImport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "port" + "'", str6, "port");
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7967");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        java.lang.String str10 = builder0.riverName;
        java.lang.String str11 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.scriptType("mongodb-1638820217755");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test7968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str5 = mongoDBRiverDefinition4.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition4.isMongoSSLVerifyCertificate();
        int int8 = mongoDBRiverDefinition4.getDEFAULT_BULK_ACTIONS();
        java.lang.String str9 = mongoDBRiverDefinition4.getSTORE_STATISTICS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getMongoCollection();
        int int11 = mongoDBRiverDefinition4.getConnectTimeout();
        boolean boolean12 = mongoDBRiverDefinition4.getadvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition4.getINDEX_OBJECT();
        boolean boolean14 = mongoDBRiverDefinition4.getskipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition4.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1000 + "'", int8 == 1000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "store_statistics" + "'", str9, "store_statistics");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getFILTER_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getPASSWORD_FIELD();
        boolean boolean13 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "collection" + "'", str6, "collection");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_fields" + "'", str7, "include_fields");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "filter" + "'", str8, "filter");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "import_all_collections" + "'", str9, "import_all_collections");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "password" + "'", str12, "password");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7970");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        builder2.setsocketTimeout((int) '4');
        builder2.setscript("flush_interval");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter7 = builder2.serializedObjectSupporter;
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder2.mongoClientOptions = mongoClientOptions8;
        boolean boolean10 = builder2.advancedTransformation;
        builder2.setincludeCollection("mongodb-1638820218363");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7971");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218408" + "'", str6, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test7972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7972");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "_river" + "'", str1, "_river");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218449" + "'", str8, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
    }

    @Test
    public void test7973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder18.mongoClientOptions = mongoClientOptions21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoClientOptions(mongoClientOptions25);
        java.util.Set<java.lang.String> strSet27 = builder26.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.typeName("port");
        builder26.mongoSSLVerifyCertificate = true;
        com.mongodb.BasicDBObject basicDBObject32 = builder26.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder18.mongoCollectionFilter(basicDBObject32);
        builder33.includeCollection = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test7974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = builder2.serializedObjectSupporter;
        builder2.setmongoAdminPassword("mongodb-1638820218424");
        java.lang.String str8 = builder2.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.indexName("parent_types");
        builder2.indexName = "import_all_collections";
        builder2.throttleSize = 32;
        int int15 = builder2.getthrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test7975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getSOCKET_TIMEOUT();
        java.lang.String str3 = mongoDBRiverDefinition1.getINCLUDE_FIELDS_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter4 = mongoDBRiverDefinition1.serializedObjectSupporter;
        java.lang.String str5 = mongoDBRiverDefinition1.indexName;
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition1.getMongoOplogFilter();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "socket_timeout" + "'", str2, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "include_fields" + "'", str3, "include_fields");
        org.junit.Assert.assertNull(serializedObjectSupporter4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(basicDBObject6);
    }

    @Test
    public void test7976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.mongoAdminPassword;
        java.lang.String str3 = builder0.riverIndexName;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminPassword("");
        java.lang.String[] strArray13 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        builder9.excludeFields = strSet14;
        java.lang.String str17 = builder9.indexName;
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoAdminPassword("");
        java.lang.String[] strArray32 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        builder28.excludeFields = strSet33;
        builder22.setexcludeFields((java.util.Set<java.lang.String>) strSet33);
        docScoreSearchScript4.setNextVar("type", (java.lang.Object) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.mongoAdminPassword;
        java.lang.String str41 = mongoDBRiverDefinition39.getNAME_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition39.getINITIAL_TIMESTAMP_FIELD();
        java.util.Set<java.lang.String> strSet43 = mongoDBRiverDefinition39.includeFields;
        java.lang.String str44 = mongoDBRiverDefinition39.getHOST_FIELD();
        java.util.Set<java.lang.String> strSet45 = mongoDBRiverDefinition39.includeFields;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = mongoDBRiverDefinition39.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "name" + "'", str41, "name");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "initial_timestamp" + "'", str42, "initial_timestamp");
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "host" + "'", str44, "host");
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(byteSizeValue46);
    }

    @Test
    public void test7977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.typeName("mongodb-1638820218449");
        boolean boolean4 = builder0.getmongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        builder0.mongoClientOptions = mongoClientOptions5;
        java.util.Set<java.lang.String> strSet7 = builder0.getincludeFields();
        java.lang.String str8 = builder0.mongoAdminPassword;
        builder0.disableIndexRefresh = true;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test7978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7978");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str12 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests" + "'", str14, "concurrent_bulk_requests");
    }

    @Test
    public void test7979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        java.lang.String[] strArray23 = new java.lang.String[] { "mongodb-1638820218387", "mongodb-1638820218387", "localhost", "", "localhost", "host", "user", "hi!", "actions", "exclude_fields", "throttle_size", "ssl_verify_certificate", "local", "disable_index_refresh", "user", "port", "actions", "host" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder2.excludeFields = strSet24;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder2.mongoClientOptions = mongoClientOptions27;
        boolean boolean29 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoAdminPassword("");
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder38.excludeFields = strSet43;
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder32.mongoUseSSL(false);
        builder32.storeStatistics = false;
        builder32.mongoAdminPassword = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        java.lang.String str56 = mongoDBRiverDefinition55.getDISABLE_INDEX_REFRESH_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList57 = mongoDBRiverDefinition55.getMongoServers();
        builder32.setmongoServers(serverAddressList57);
        builder2.mongoServers = serverAddressList57;
        java.lang.String str60 = builder2.getriverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "disable_index_refresh" + "'", str56, "disable_index_refresh");
        org.junit.Assert.assertNotNull(serverAddressList57);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test7980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder0.setmongoOplogFilter(basicDBObject3);
        boolean boolean5 = builder0.importAllCollections;
        builder0.setmongoGridFS(false);
        int int8 = builder0.throttleSize;
        java.lang.String str9 = builder0.getscript();
        boolean boolean10 = builder0.skipInitialImport;
        boolean boolean11 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("mongodb-1638820218363");
        builder0.throttleSize = (-1);
        java.lang.String str16 = builder0.typeName;
        builder0.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.connectTimeout(8);
        builder0.setmongoLocalPassword("name");
        builder0.mongoCollection = "";
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder0.mongoClientOptions;
        boolean boolean26 = builder0.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test7981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        java.lang.String str19 = builder18.getindexName();
        boolean boolean20 = builder18.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str22 = builder18.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder18.throttleSize((int) (short) -1);
        int int25 = builder18.getconnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test7982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7982");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder6.statisticsIndexName = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.riverIndexName("ssl");
        builder10.script = "mongodb-1638820218449";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.riverIndexName("mongodb-1638820218264");
        boolean boolean15 = builder10.mongoUseSSL;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder10.getinitialTimestamp();
        boolean boolean17 = builder10.getdropCollection();
        builder10.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setthrottleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.importAllCollections(true);
        java.lang.String str7 = builder6.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.statisticsIndexName("_river");
        boolean boolean10 = builder9.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.advancedTransformation(true);
        boolean boolean13 = builder12.getstoreStatistics();
        builder12.setadvancedTransformation(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoServers(serverAddressList16);
        builder17.setindexName("filter");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoCollectionFilter(basicDBObject5);
        builder4.setstoreStatistics(false);
        builder4.riverName = "secondary_read_preference";
        builder4.mongoGridFS = true;
        java.lang.String str13 = builder4.getindexName();
        builder4.setscriptType("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp3 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str4 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getPARENT_TYPES_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getskipInitialImport();
        boolean boolean7 = mongoDBRiverDefinition1.isMongoUseSSL();
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        boolean boolean9 = mongoDBRiverDefinition1.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str11 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition1.mongoCollection;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardTimestamp3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "skip_initial_import" + "'", str4, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "parent_types" + "'", str5, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "options" + "'", str12, "options");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        builder2.storeStatistics = false;
        boolean boolean21 = builder2.importAllCollections;
        builder2.setstoreStatistics(true);
        boolean boolean24 = builder2.getmongoUseSSL();
        boolean boolean25 = builder2.storeStatistics;
        boolean boolean26 = builder2.getmongoUseSSL();
        builder2.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder2.riverName("servers");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test7987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition19.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str22 = mongoDBRiverDefinition19.getACTIONS_FIELD();
        int int23 = mongoDBRiverDefinition19.getThrottleSize();
        java.lang.String str24 = mongoDBRiverDefinition19.scriptType;
        java.lang.String str25 = mongoDBRiverDefinition19.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "actions" + "'", str22, "actions");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test7988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        java.util.Set<java.lang.String> strSet8 = builder7.getparentTypes();
        java.lang.String str9 = builder7.getindexName();
        builder7.setindexName("local");
        java.lang.String str12 = builder7.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder7.connectTimeout(10);
        java.lang.String str15 = builder14.riverName;
        builder14.connectTimeout = 100;
        builder14.statisticsTypeName = "skip_initial_import";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
    }

    @Test
    public void test7989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.mongoCollectionFilter;
        boolean boolean6 = builder4.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.includeCollection("drop_collection");
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder4.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        boolean boolean11 = mongoDBRiverDefinition10.getmongoSecondaryReadPreference();
        boolean boolean12 = mongoDBRiverDefinition10.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(serverAddressList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        builder0.riverName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.socketTimeout((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminUser("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList12);
        java.util.Set<java.lang.String> strSet15 = builder14.includeFields;
        java.lang.String str16 = builder14.getmongoAdminPassword();
        java.lang.String str17 = builder14.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        boolean boolean19 = mongoDBRiverDefinition18.skipInitialImport;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test7991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDropCollection();
        int int4 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition1.mongoServers;
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.mongoClientOptions;
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27017 + "'", int4 == 27017);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        boolean boolean4 = mongoDBRiverDefinition1.getmongoSecondaryReadPreference();
        boolean boolean5 = mongoDBRiverDefinition1.getskipInitialImport();
        java.lang.String str6 = mongoDBRiverDefinition1.getScript();
        java.lang.String str7 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script" + "'", str7, "script");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getRiverIndexName();
        boolean boolean6 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "admin" + "'", str4, "admin");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test7994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoAdminPassword("");
        java.lang.String[] strArray16 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder12.excludeFields = strSet17;
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet17);
        builder3.parentTypes = strSet17;
        builder3.settypeName("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.advancedTransformation(false);
        builder26.throttleSize = (byte) 100;
        java.lang.String str33 = builder26.getscriptType();
        com.mongodb.BasicDBObject basicDBObject34 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder3.mongoCollectionFilter(basicDBObject34);
        boolean boolean36 = builder3.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder3.mongoAdminUser("null.null");
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        builder38.setmongoClientOptions(mongoClientOptions39);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test7995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.mongoAdminPassword("");
        java.lang.String[] strArray12 = new java.lang.String[] { "disable_index_refresh", "disable_index_refresh", "disable_index_refresh" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder8.excludeFields = strSet13;
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str20 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str21 = mongoDBRiverDefinition19.getRiverIndexName();
        java.lang.String str22 = mongoDBRiverDefinition19.getHOST_FIELD();
        boolean boolean23 = mongoDBRiverDefinition19.isImportAllCollections();
        java.lang.String str24 = mongoDBRiverDefinition19.indexName;
        java.lang.String str25 = mongoDBRiverDefinition19.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition19.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition19.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "host" + "'", str22, "host");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "include_collection" + "'", str25, "include_collection");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "initial_timestamp" + "'", str26, "initial_timestamp");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test7996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7996");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.gettypeName();
        builder0.setmongoDb("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoSecondaryReadPreference(true);
        java.util.Set<java.lang.String> strSet7 = builder6.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoAdminUser("mongodb-1638820218387");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test7997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7997");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218387" + "'", str2, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218408" + "'", str7, "mongodb-1638820218408");
    }

    @Test
    public void test7998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoAdminUser("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.mongoUseSSL(false);
        boolean boolean10 = builder6.getmongoGridFS();
        int int11 = builder6.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder6.mongoUseSSL(false);
        builder13.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoGridFS(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test7999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test7999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean2 = mongoDBRiverDefinition1.storeStatistics;
        boolean boolean3 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str6 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.includeCollection;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getDROP_COLLECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition1.isMongoGridFS();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "drop_collection" + "'", str9, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test8000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test8000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoClientOptions(mongoClientOptions1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("disable_index_refresh");
        boolean boolean5 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        boolean boolean8 = mongoDBRiverDefinition7.getdisableIndexRefresh();
        boolean boolean9 = mongoDBRiverDefinition7.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }
}

