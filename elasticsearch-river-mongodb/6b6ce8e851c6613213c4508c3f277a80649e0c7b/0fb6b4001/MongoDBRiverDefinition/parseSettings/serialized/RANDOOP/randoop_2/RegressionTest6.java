import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition8.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getNAME_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str13 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.mongoLocalUser;
        java.lang.String str15 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getDB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "exclude_fields" + "'", str13, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "advanced_transformation" + "'", str15, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondary_read_preference" + "'", str17, "secondary_read_preference");
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet20 = builder19.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.mongoCollection("size");
        builder22.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str26 = mongoDBRiverDefinition25.getTHROTTLE_SIZE_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition25.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue28 = mongoDBRiverDefinition25.getDEFAULT_BULK_SIZE();
        boolean boolean29 = mongoDBRiverDefinition25.getmongoGridFS();
        boolean boolean30 = mongoDBRiverDefinition25.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject31 = mongoDBRiverDefinition25.mongoCollectionFilter;
        builder12.mongoCollectionFilter = basicDBObject31;
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder12.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "throttle_size" + "'", str26, "throttle_size");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "admin" + "'", str27, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNull(mongoClientOptions33);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoLocalUser();
        boolean boolean16 = mongoDBRiverDefinition8.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str15 = mongoDBRiverDefinition8.getSERVERS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str17 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "servers" + "'", str15, "servers");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        builder2.indexName = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory23 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject25 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory23.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        builder20.setmongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray35 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder19.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet36);
        java.lang.String str41 = builder40.getscript();
        java.lang.String str42 = builder40.indexName;
        builder40.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder40.mongoCollection("options");
        java.util.Set<java.lang.String> strSet47 = null;
        builder40.excludeFields = strSet47;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "servers" + "'", str42, "servers");
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition8.getlogger();
        boolean boolean13 = mongoDBRiverDefinition8.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition8.indexName;
        java.lang.String str16 = mongoDBRiverDefinition8.getCREDENTIALS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "name" + "'", str15, "name");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "credentials" + "'", str16, "credentials");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "advanced_transformation" + "'", str17, "advanced_transformation");
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        java.lang.String str35 = builder34.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalPassword("");
        java.lang.String str38 = builder37.getmongoLocalPassword();
        builder37.mongoCollection = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet41 = builder37.excludeFields;
        boolean boolean42 = builder37.storeStatistics;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218408" + "'", str3, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218326" + "'", str5, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.includeCollection("filter");
        builder8.riverIndexName = "size";
        builder8.setmongoCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.statisticsIndexName("script");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder8.mongoClientOptions = mongoClientOptions15;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        builder0.includeCollection = "mongodb-1638820218363";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.getmongoCollection();
        builder11.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet18 = builder17.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.advancedTransformation(false);
        builder17.setimportAllCollections(false);
        builder17.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet28 = builder27.parentTypes;
        boolean boolean29 = builder27.skipInitialImport;
        java.lang.String[] strArray60 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder27.setincludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder17.includeFields((java.util.Set<java.lang.String>) strSet61);
        builder11.parentTypes = strSet61;
        builder10.parentTypes = strSet61;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder10.mongoGridFS(false);
        java.lang.String str69 = builder68.getindexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.util.Set<java.lang.String> strSet6 = builder0.includeFields;
        builder0.setstatisticsIndexName("ssl_verify_certificate");
        builder0.mongoDb = "bulk_timeout";
        builder0.riverIndexName = "servers";
        builder0.setscript("initial_timestamp");
        java.lang.String str15 = builder0.gettypeName();
        boolean boolean16 = builder0.skipInitialImport;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        int int11 = mongoDBRiverDefinition8.socketTimeout;
        java.lang.String str12 = mongoDBRiverDefinition8.riverIndexName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str14 = mongoDBRiverDefinition8.getIncludeCollection();
        java.lang.String str15 = mongoDBRiverDefinition8.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int16 = mongoDBRiverDefinition8.getConnectTimeout();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "import_all_collections" + "'", str15, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition8.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str15 = mongoDBRiverDefinition8.getDB_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index" + "'", str14, "index");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "db" + "'", str15, "db");
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getScriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl" + "'", str10, "ssl");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = builder50.mongoServers;
        int int52 = builder50.getthrottleSize();
        java.util.Set<java.lang.String> strSet53 = builder50.getexcludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(mongoClientOptions54);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean13 = mongoDBRiverDefinition8.isImportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(false);
        builder18.mongoAdminPassword = "name";
        java.lang.String str23 = builder18.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet27 = builder26.parentTypes;
        boolean boolean28 = builder26.skipInitialImport;
        java.lang.String[] strArray59 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder26.setincludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder18.includeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet60);
        java.lang.String str65 = builder16.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter66 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings67 = serializedObjectSupporter66.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings68 = serializedObjectSupporter66.deserializeObjectRiverSettings7();
        java.lang.String str69 = serializedObjectSupporter66.deserializeObjectString7();
        java.lang.String str70 = serializedObjectSupporter66.deserializeObjectString13();
        java.lang.String str71 = serializedObjectSupporter66.deserializeObjectString16();
        builder16.serializedObjectSupporter = serializedObjectSupporter66;
        java.lang.String str73 = serializedObjectSupporter66.deserializeObjectString7();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter66;
        java.lang.String str75 = mongoDBRiverDefinition8.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(riverSettings67);
        org.junit.Assert.assertNull(riverSettings68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb-1638820218326" + "'", str69, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "mongodb-1638820218408" + "'", str70, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "_river" + "'", str71, "_river");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "mongodb-1638820218326" + "'", str73, "mongodb-1638820218326");
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_COLLECTION_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.getdropCollection();
        boolean boolean13 = mongoDBRiverDefinition8.isMongoGridFS();
        boolean boolean14 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_collection" + "'", str11, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        boolean boolean8 = builder5.mongoUseSSL;
        java.lang.String str9 = builder5.gettypeName();
        java.lang.String str10 = builder5.getincludeCollection();
        builder5.setimportAllCollections(true);
        builder5.mongoDb = "mongodb-1638820218326";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.script("");
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder5.mongoClientOptions;
        boolean boolean18 = builder5.getmongoGridFS();
        boolean boolean19 = builder5.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        boolean boolean14 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str15 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str16 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        boolean boolean17 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str18 = mongoDBRiverDefinition8.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.size" + "'", str13, "null.size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        java.lang.String str7 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter8 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(serializedObjectSupporter8);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet10 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoCollection("size");
        builder12.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str16 = mongoDBRiverDefinition15.getTHROTTLE_SIZE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition15.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = mongoDBRiverDefinition15.getDEFAULT_BULK_SIZE();
        boolean boolean19 = mongoDBRiverDefinition15.getmongoGridFS();
        boolean boolean20 = mongoDBRiverDefinition15.mongoGridFS;
        java.lang.String str21 = mongoDBRiverDefinition15.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition15.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.mongoCollectionFilter(basicDBObject22);
        builder5.setriverName("exclude_fields");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "throttle_size" + "'", str16, "throttle_size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "admin" + "'", str17, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk_size" + "'", str21, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int18 = mongoDBRiverDefinition8.getThrottleSize();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        java.lang.String str20 = mongoDBRiverDefinition8.script;
        java.lang.String str21 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "flush_interval" + "'", str21, "flush_interval");
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        int int12 = mongoDBRiverDefinition8.getThrottleSize();
        java.lang.String str13 = mongoDBRiverDefinition8.mongoCollection;
        java.lang.String str14 = mongoDBRiverDefinition8.getHOST_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.skipInitialImport;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition8.getMongoServers();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition8.getExcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        java.lang.String str6 = builder2.gettypeName();
        builder2.setincludeCollection("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.typeName("collection");
        int int11 = builder10.throttleSize;
        builder10.setsocketTimeout(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        boolean boolean13 = mongoDBRiverDefinition8.getadvancedTransformation();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition8.mongoClientOptions;
        int int15 = mongoDBRiverDefinition8.throttleSize;
        java.lang.String str16 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "flush_interval" + "'", str16, "flush_interval");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        int int13 = mongoDBRiverDefinition8.throttleSize;
        java.lang.String str14 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.getdropCollection();
        boolean boolean16 = mongoDBRiverDefinition8.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition8.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "drop_collection" + "'", str14, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory8.newScript(strMap12);
        java.lang.Object obj14 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        builder15.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.mongoAdminPassword("index");
        int int24 = builder15.getconnectTimeout();
        java.lang.String str25 = builder15.getriverIndexName();
        boolean boolean26 = builder15.disableIndexRefresh;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory27 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject29 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory31 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject33 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory31.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        com.mongodb.BasicDBObject basicDBObject36 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory31.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.common.settings.Settings settings39 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory40 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject42 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript43 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory44 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject46 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript47 = docScoreNativeScriptFactory44.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject46);
        com.mongodb.BasicDBObject basicDBObject49 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript50 = docScoreNativeScriptFactory44.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.script.ExecutableScript executableScript51 = docScoreNativeScriptFactory40.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings39, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.script.ExecutableScript executableScript53 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        builder15.mongoOplogFilter = basicDBObject49;
        org.elasticsearch.script.ExecutableScript executableScript55 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = null;
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory8.newScript(strMap56);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(executableScript43);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNotNull(executableScript47);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(executableScript50);
        org.junit.Assert.assertNotNull(executableScript51);
        org.junit.Assert.assertNotNull(executableScript53);
        org.junit.Assert.assertNotNull(executableScript55);
        org.junit.Assert.assertNotNull(executableScript57);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.skipInitialImport(true);
        java.lang.String str35 = builder34.statisticsIndexName;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter36 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str37 = serializedObjectSupporter36.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings38 = serializedObjectSupporter36.deserializeObjectRiverSettings2();
        java.lang.String str39 = serializedObjectSupporter36.deserializeObjectString9();
        java.lang.String str40 = serializedObjectSupporter36.deserializeObjectString8();
        builder34.serializedObjectSupporter = serializedObjectSupporter36;
        java.lang.String str42 = serializedObjectSupporter36.deserializeObjectString5();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820218387" + "'", str37, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "mongodb-1638820218363" + "'", str39, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "_river" + "'", str40, "_river");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb-1638820218299" + "'", str42, "mongodb-1638820218299");
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoLocalUser("");
        boolean boolean5 = builder4.getmongoGridFS();
        boolean boolean6 = builder4.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder4.socketTimeout(8);
        boolean boolean9 = builder4.getstoreStatistics();
        builder4.setmongoSSLVerifyCertificate(false);
        java.util.Set<java.lang.String> strSet12 = builder4.getparentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        boolean boolean8 = builder5.mongoUseSSL;
        java.lang.String str9 = builder5.gettypeName();
        java.lang.String str10 = builder5.getincludeCollection();
        builder5.setimportAllCollections(true);
        builder5.mongoDb = "mongodb-1638820218326";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet18 = builder17.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoCollection("size");
        builder20.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet24 = mongoDBRiverDefinition23.includeFields;
        java.lang.String str25 = mongoDBRiverDefinition23.getPARENT_TYPES_FIELD();
        java.lang.String str26 = mongoDBRiverDefinition23.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = mongoDBRiverDefinition23.getMongoServers();
        builder5.setmongoServers(serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder5.typeName("concurrent_requests");
        com.mongodb.BasicDBObject basicDBObject31 = builder5.mongoOplogFilter;
        builder5.setmongoAdminPassword("name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "parent_types" + "'", str25, "parent_types");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(serverAddressList27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(basicDBObject31);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        java.lang.String str35 = builder34.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalPassword("");
        java.lang.String str38 = builder37.getmongoLocalPassword();
        builder37.mongoCollection = "disable_index_refresh";
        java.util.Set<java.lang.String> strSet41 = builder37.excludeFields;
        builder37.setmongoLocalPassword("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(strSet41);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.statisticsIndexName("disable_index_refresh");
        builder6.setskipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.advancedTransformation(false);
        builder1.mongoAdminPassword = "name";
        java.lang.String str6 = builder1.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet10 = builder9.parentTypes;
        boolean boolean11 = builder9.skipInitialImport;
        java.lang.String[] strArray42 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder9.setincludeFields((java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder1.includeFields((java.util.Set<java.lang.String>) strSet43);
        builder46.riverName = "disable_index_refresh";
        builder46.setindexName("actions");
        com.mongodb.BasicDBObject basicDBObject51 = builder46.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings52 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = riverSettings52.settings();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        java.lang.String str13 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl_verify_certificate" + "'", str13, "ssl_verify_certificate");
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        builder0.skipInitialImport = false;
        boolean boolean12 = builder0.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollection("mongodb-1638820218363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder15.script("user");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder2.setincludeFields((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = builder2.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder2.dropCollection(false);
        boolean boolean42 = builder2.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder2.riverName("mongodb-1638820217755");
        com.mongodb.BasicDBObject basicDBObject45 = builder2.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("socket_timeout");
        boolean boolean13 = builder0.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder49.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder49.riverName("advanced_transformation");
        java.util.Set<java.lang.String> strSet55 = builder49.getexcludeFields();
        boolean boolean56 = builder49.getstoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getIncludeCollection();
        boolean boolean13 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str14 = mongoDBRiverDefinition8.getRiverName();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoAdminUser();
        java.lang.String str16 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "actions" + "'", str11, "actions");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoCollectionFilter(basicDBObject15);
        builder0.mongoLocalPassword = "initial_timestamp";
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoClientOptions(mongoClientOptions21);
        builder0.setmongoLocalPassword("include_collection");
        builder0.setdropCollection(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter27 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str28 = serializedObjectSupporter27.deserializeObjectString11();
        java.lang.String str29 = serializedObjectSupporter27.deserializeObjectString17();
        java.lang.String str30 = serializedObjectSupporter27.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter27;
        org.elasticsearch.river.RiverSettings riverSettings32 = serializedObjectSupporter27.deserializeObjectRiverSettings9();
        java.lang.String str33 = serializedObjectSupporter27.deserializeObjectString14();
        java.lang.String str34 = serializedObjectSupporter27.deserializeObjectString3();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb-1638820218387" + "'", str28, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "mongodb-1638820218449" + "'", str29, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_river" + "'", str30, "_river");
        org.junit.Assert.assertNull(riverSettings32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_river" + "'", str33, "_river");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb-1638820218264" + "'", str34, "mongodb-1638820218264");
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setthrottleSize((-1));
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.storeStatistics(false);
        builder19.setmongoUseSSL(true);
        java.lang.String str22 = builder19.getincludeCollection();
        java.util.Set<java.lang.String> strSet23 = builder19.getincludeFields();
        java.util.Set<java.lang.String> strSet24 = null;
        builder19.includeFields = strSet24;
        builder19.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder19.mongoAdminUser("advanced_transformation");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getNAME_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str13 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition8.mongoCollectionFilter;
        java.lang.String str15 = mongoDBRiverDefinition8.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "exclude_fields" + "'", str13, "exclude_fields");
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "name" + "'", str15, "name");
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        builder2.setmongoGridFS(true);
        boolean boolean6 = builder2.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.disableIndexRefresh(false);
        builder2.setmongoSSLVerifyCertificate(false);
        builder2.setsocketTimeout((int) (short) 1);
        builder2.indexName = "mongodb-1638820218326";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder2.initialTimestamp;
        builder2.setmongoLocalUser("mongodb-1638820218299");
        builder2.setmongoCollection("bulk_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardTimestamp15);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        boolean boolean8 = builder5.mongoUseSSL;
        java.lang.String str9 = builder5.gettypeName();
        java.lang.String str10 = builder5.getincludeCollection();
        builder5.setimportAllCollections(true);
        builder5.mongoDb = "mongodb-1638820218326";
        java.lang.String str15 = builder5.statisticsIndexName;
        builder5.includeCollection = "options";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getPORT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getBULK_SIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition8.statisticsTypeName;
        boolean boolean20 = mongoDBRiverDefinition8.isImportAllCollections();
        com.mongodb.MongoClientOptions mongoClientOptions21 = mongoDBRiverDefinition8.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "port" + "'", str17, "port");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(mongoClientOptions21);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.isStoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition8.getInitialTimestamp();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoLocalUser();
        java.lang.String str18 = mongoDBRiverDefinition8.script;
        java.lang.String str19 = mongoDBRiverDefinition8.getMongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        int int10 = builder0.getconnectTimeout();
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoOplogFilter();
        boolean boolean12 = builder0.importAllCollections;
        builder0.setadvancedTransformation(true);
        builder0.riverIndexName = "initial_timestamp";
        builder0.settypeName("password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition8.includeFields;
        java.lang.String str10 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getScriptType();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getParentTypes();
        java.lang.String str13 = mongoDBRiverDefinition8.script;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "parent_types" + "'", str10, "parent_types");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("socket_timeout");
        java.lang.String str13 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsIndexName("secondary_read_preference");
        java.lang.String str16 = builder15.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminUser("socket_timeout");
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.getmongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str13 = mongoDBRiverDefinition8.getTYPE_FIELD();
        int int14 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        boolean boolean15 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.includeCollection("filter");
        builder8.riverIndexName = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize((int) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.riverIndexName("secondary_read_preference");
        builder14.socketTimeout = (short) 0;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getNAME_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.mongoUseSSL;
        boolean boolean13 = mongoDBRiverDefinition8.isAdvancedTransformation();
        boolean boolean14 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition8.getmongoSSLVerifyCertificate();
        boolean boolean16 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "name" + "'", str11, "name");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondary_read_preference" + "'", str17, "secondary_read_preference");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        int int12 = mongoDBRiverDefinition8.getThrottleSize();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString17();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter13.deserializeObjectRiverSettings8();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218387" + "'", str14, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218449" + "'", str15, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertNull(riverSettings18);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        int int10 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminPassword();
        int int12 = mongoDBRiverDefinition8.throttleSize;
        java.lang.String str13 = mongoDBRiverDefinition8.riverIndexName;
        boolean boolean14 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        java.lang.String str15 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "password" + "'", str15, "password");
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        builder15.mongoAdminPassword = "name";
        java.lang.String str20 = builder15.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet24 = builder23.parentTypes;
        boolean boolean25 = builder23.skipInitialImport;
        java.lang.String[] strArray56 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder15.includeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.includeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder0.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet68 = builder67.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.mongoCollection("size");
        builder70.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder70);
        java.util.Set<java.lang.String> strSet74 = mongoDBRiverDefinition73.includeFields;
        java.lang.String str75 = mongoDBRiverDefinition73.getPARENT_TYPES_FIELD();
        java.lang.String str76 = mongoDBRiverDefinition73.getScriptType();
        java.util.List<com.mongodb.ServerAddress> serverAddressList77 = mongoDBRiverDefinition73.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder64.mongoServers(serverAddressList77);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "parent_types" + "'", str75, "parent_types");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(serverAddressList77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.throttleSize((int) (byte) 1);
        builder8.mongoSecondaryReadPreference = false;
        boolean boolean11 = builder8.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.script("size");
        boolean boolean14 = builder13.mongoUseSSL;
        boolean boolean15 = builder13.getstoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.includeCollection("throttle_size");
        boolean boolean11 = builder10.getimportAllCollections();
        builder10.storeStatistics = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        int int13 = mongoDBRiverDefinition8.throttleSize;
        int int14 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        java.lang.String str15 = mongoDBRiverDefinition8.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter16 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString11();
        java.lang.String str18 = serializedObjectSupporter16.deserializeObjectString17();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString7();
        java.lang.String str20 = serializedObjectSupporter16.deserializeObjectString7();
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString11();
        java.lang.String str22 = serializedObjectSupporter16.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter16.deserializeObjectRiverSettings9();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter16;
        org.elasticsearch.river.RiverSettings riverSettings25 = serializedObjectSupporter16.deserializeObjectRiverSettings7();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218387" + "'", str17, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218449" + "'", str18, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218326" + "'", str19, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb-1638820218326" + "'", str20, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb-1638820218387" + "'", str21, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_river" + "'", str22, "_river");
        org.junit.Assert.assertNull(riverSettings23);
        org.junit.Assert.assertNull(riverSettings25);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.includeCollection("filter");
        builder8.riverIndexName = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.throttleSize((int) (byte) 0);
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder12.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressList13);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        builder2.mongoAdminPassword = "initial_timestamp";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsIndexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory23 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject25 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory23.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        builder20.setmongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray35 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder19.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet36);
        com.mongodb.BasicDBObject basicDBObject41 = builder0.getmongoOplogFilter();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.mongoClientOptions(mongoClientOptions42);
        java.lang.String str44 = builder43.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.lang.String str6 = builder0.includeCollection;
        java.lang.String str7 = builder0.script;
        java.util.Set<java.lang.String> strSet8 = builder0.parentTypes;
        builder0.setriverIndexName("mongodb-1638820218449");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getFILTER_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getLOCAL_DB_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.statisticsTypeName;
        boolean boolean15 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        boolean boolean16 = mongoDBRiverDefinition8.getmongoUseSSL();
        int int17 = mongoDBRiverDefinition8.socketTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "filter" + "'", str11, "filter");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoDb("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.dropCollection(true);
        int int10 = builder2.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.riverName("mongodb-1638820218424");
        java.util.Set<java.lang.String> strSet13 = builder2.includeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        boolean boolean2 = builder0.getadvancedTransformation();
        builder0.setmongoAdminUser("concurrent_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        builder15.mongoAdminPassword = "name";
        java.lang.String str20 = builder15.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet24 = builder23.parentTypes;
        boolean boolean25 = builder23.skipInitialImport;
        java.lang.String[] strArray56 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder15.includeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.includeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder0.mongoSecondaryReadPreference(true);
        builder0.setmongoGridFS(false);
        com.mongodb.MongoClientOptions mongoClientOptions67 = null;
        builder0.setmongoClientOptions(mongoClientOptions67);
        builder0.mongoLocalUser = "options";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        java.lang.String str17 = builder12.getindexName();
        builder12.setmongoSSLVerifyCertificate(true);
        java.lang.String str20 = builder12.getriverIndexName();
        java.lang.String str21 = builder12.riverIndexName;
        java.lang.String str22 = builder12.getstatisticsTypeName();
        builder12.skipInitialImport = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        boolean boolean36 = builder35.dropCollection;
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        builder35.setmongoClientOptions(mongoClientOptions37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        builder35.mongoSecondaryReadPreference = false;
        builder35.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoCollectionFilter(basicDBObject15);
        builder0.mongoLocalPassword = "initial_timestamp";
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder0.mongoServers;
        java.lang.String str22 = builder0.statisticsIndexName;
        builder0.setsocketTimeout((int) '#');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.mongoCollection("bulk_size");
        builder0.setimportAllCollections(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        builder2.setmongoGridFS(true);
        boolean boolean6 = builder2.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.advancedTransformation(true);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory23 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject25 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory23.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        builder20.setmongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray35 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder19.parentTypes = strSet36;
        com.mongodb.BasicDBObject basicDBObject40 = builder19.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings41 = new org.elasticsearch.river.RiverSettings(settings9, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder2.mongoOplogFilter(basicDBObject40);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        builder0.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.riverIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder9.initialTimestamp;
        builder9.riverIndexName = "script_type";
        java.util.Set<java.lang.String> strSet13 = builder9.getparentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        boolean boolean16 = mongoDBRiverDefinition8.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.riverIndexName;
        boolean boolean19 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.statisticsTypeName("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet11 = builder10.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoCollection("size");
        int int14 = builder10.getsocketTimeout();
        builder10.settypeName("initial_timestamp");
        builder10.setriverName("size");
        java.util.Set<java.lang.String> strSet19 = builder10.excludeFields;
        builder10.setscript("bulk");
        java.util.Set<java.lang.String> strSet22 = builder10.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet26 = builder25.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder25.mongoCollection("size");
        builder28.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder28);
        java.lang.String str32 = mongoDBRiverDefinition31.getTHROTTLE_SIZE_FIELD();
        boolean boolean33 = mongoDBRiverDefinition31.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject34 = mongoDBRiverDefinition31.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition31.getIncludeFields();
        java.lang.String str36 = mongoDBRiverDefinition31.getDROP_COLLECTION_FIELD();
        java.lang.String str37 = mongoDBRiverDefinition31.getUSER_FIELD();
        java.lang.String str38 = mongoDBRiverDefinition31.getSTORE_STATISTICS_FIELD();
        java.lang.String str39 = mongoDBRiverDefinition31.getPARENT_TYPES_FIELD();
        java.lang.String str40 = mongoDBRiverDefinition31.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList41 = mongoDBRiverDefinition31.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder10.mongoServers(serverAddressList41);
        builder7.setmongoServers(serverAddressList41);
        builder7.mongoLocalPassword = "mongodb-1638820218264";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "throttle_size" + "'", str32, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(basicDBObject34);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "drop_collection" + "'", str36, "drop_collection");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "user" + "'", str37, "user");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "store_statistics" + "'", str38, "store_statistics");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "parent_types" + "'", str39, "parent_types");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(serverAddressList41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoCollectionFilter(basicDBObject15);
        builder0.mongoLocalPassword = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.storeStatistics(false);
        builder22.statisticsIndexName = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoSSLVerifyCertificate(true);
        builder26.settypeName("mongodb-1638820218424");
        java.util.Set<java.lang.String> strSet31 = builder26.parentTypes;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet31);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        boolean boolean8 = builder5.mongoUseSSL;
        java.lang.String str9 = builder5.gettypeName();
        java.lang.String str10 = builder5.getincludeCollection();
        builder5.setimportAllCollections(true);
        builder5.mongoDb = "mongodb-1638820218326";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.statisticsIndexName("port");
        builder5.connectTimeout = (byte) 0;
        builder5.setmongoGridFS(true);
        boolean boolean21 = builder5.advancedTransformation;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        builder2.setriverName("ssl_verify_certificate");
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder2.mongoClientOptions;
        builder2.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.connectTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.script("throttle_size");
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder2.getmongoClientOptions();
        boolean boolean16 = builder2.skipInitialImport;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        java.lang.Object obj11 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        docScoreSearchScript0.setNextScore((-1.0f));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        builder14.mongoAdminPassword = "name";
        builder14.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str21 = builder14.getmongoLocalUser();
        builder14.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder14.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder14.mongoAdminPassword("socket_timeout");
        java.lang.String str27 = builder14.getmongoCollection();
        builder14.setstatisticsIndexName("ssl");
        builder14.connectTimeout = (byte) 100;
        java.lang.Object obj32 = docScoreSearchScript0.unwrap((java.lang.Object) builder14);
        org.bson.types.Binary binary33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder14.initialTimestamp(binary33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + (-1) + "'", obj11, (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        boolean boolean12 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str13 = mongoDBRiverDefinition8.statisticsTypeName;
        java.lang.String str14 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition8.getParentTypes();
        java.lang.String str18 = mongoDBRiverDefinition8.riverName;
        java.lang.String str19 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "skip_initial_import" + "'", str14, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "actions" + "'", str15, "actions");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "advanced_transformation" + "'", str16, "advanced_transformation");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "flush_interval" + "'", str19, "flush_interval");
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalPassword("drop_collection");
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder7.setmongoClientOptions(mongoClientOptions8);
        builder7.setscriptType("mongodb-1638820218424");
        builder7.setskipInitialImport(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString17();
        java.lang.String str16 = serializedObjectSupporter13.deserializeObjectString7();
        java.lang.String str17 = serializedObjectSupporter13.deserializeObjectString7();
        java.lang.String str18 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str19 = serializedObjectSupporter13.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings20 = serializedObjectSupporter13.deserializeObjectRiverSettings9();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter13;
        java.lang.String str22 = serializedObjectSupporter13.deserializeObjectString17();
        java.lang.String str23 = serializedObjectSupporter13.deserializeObjectString3();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218387" + "'", str14, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218449" + "'", str15, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218326" + "'", str16, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb-1638820218326" + "'", str17, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218387" + "'", str18, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_river" + "'", str19, "_river");
        org.junit.Assert.assertNull(riverSettings20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb-1638820218449" + "'", str22, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "mongodb-1638820218264" + "'", str23, "mongodb-1638820218264");
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        boolean boolean36 = builder35.getdisableIndexRefresh();
        java.lang.String str37 = builder35.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder35.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoLocalUser("host");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        java.lang.String str36 = builder32.mongoAdminPassword;
        boolean boolean37 = builder32.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder32.build();
        org.elasticsearch.common.logging.ESLogger eSLogger39 = mongoDBRiverDefinition38.getlogger();
        java.lang.String str40 = mongoDBRiverDefinition38.getCOLLECTION_FIELD();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition38.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertNotNull(eSLogger39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "collection" + "'", str40, "collection");
        org.junit.Assert.assertNotNull(basicDBObject41);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        boolean boolean13 = mongoDBRiverDefinition8.getmongoUseSSL();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        java.lang.String str15 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getOPTIONS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        int int18 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        java.lang.String str19 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gridfs" + "'", str15, "gridfs");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "options" + "'", str16, "options");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1000 + "'", int18 == 1000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.getTypeName();
        int int13 = mongoDBRiverDefinition8.getConnectTimeout();
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.riverIndexName;
        java.lang.String str16 = mongoDBRiverDefinition8.mongoLocalUser;
        boolean boolean17 = mongoDBRiverDefinition8.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str15 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str16 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_fields" + "'", str16, "include_fields");
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getUSER_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str16 = mongoDBRiverDefinition8.mongoLocalPassword;
        java.lang.String str17 = mongoDBRiverDefinition8.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "drop_collection" + "'", str13, "drop_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "import_all_collections" + "'", str17, "import_all_collections");
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        boolean boolean51 = builder2.getskipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition8.initialTimestamp;
        boolean boolean16 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoAdminUser();
        org.elasticsearch.common.logging.ESLogger eSLogger18 = mongoDBRiverDefinition8.getlogger();
        int int19 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str20 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str21 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition8.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(eSLogger18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script_type" + "'", str21, "script_type");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder5.mongoAdminUser = "actions";
        java.lang.String str8 = builder5.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.connectTimeout((int) (short) -1);
        builder10.advancedTransformation = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.disableIndexRefresh(true);
        boolean boolean15 = builder14.advancedTransformation;
        int int16 = builder14.throttleSize;
        java.lang.String str17 = builder14.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("socket_timeout");
        java.lang.String str13 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsIndexName("secondary_read_preference");
        java.lang.String str16 = builder15.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoAdminUser("socket_timeout");
        java.lang.String str19 = builder18.riverName;
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.mongoClientOptions(mongoClientOptions20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        java.lang.String str6 = builder2.gettypeName();
        builder2.setincludeCollection("mongodb-1638820218408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.typeName("collection");
        java.lang.String str11 = builder10.getindexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean16 = mongoDBRiverDefinition8.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str15 = mongoDBRiverDefinition8.getSERVERS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "servers" + "'", str15, "servers");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "flush_interval" + "'", str16, "flush_interval");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "advanced_transformation" + "'", str17, "advanced_transformation");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str15 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.indexName;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition8.getInitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "flush_interval" + "'", str15, "flush_interval");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "name" + "'", str16, "name");
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet11 = builder8.includeFields;
        boolean boolean12 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet13 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        builder16.setmongoCollectionFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray31 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        builder16.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet39 = builder38.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder38.mongoServers;
        builder35.mongoServers = serverAddressList40;
        builder0.mongoServers = serverAddressList40;
        java.lang.String str43 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.statisticsTypeName("disable_index_refresh");
        builder0.mongoLocalUser = "exclude_fields";
        int int49 = builder0.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder0.mongoSSLVerifyCertificate(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsIndexName("name");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        builder11.setmongoCollectionFilter(basicDBObject16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder21.setmongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray36 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        builder21.setparentTypes((java.util.Set<java.lang.String>) strSet37);
        builder20.parentTypes = strSet37;
        com.mongodb.BasicDBObject basicDBObject41 = builder20.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        builder9.mongoOplogFilter = basicDBObject41;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder9.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.mongoDb("gridfs");
        java.util.Set<java.lang.String> strSet48 = builder45.getparentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(strSet48);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        boolean boolean12 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition8.getRiverIndexName();
        java.lang.String str15 = mongoDBRiverDefinition8.getScriptType();
        java.lang.String str16 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "actions" + "'", str16, "actions");
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        java.lang.String str4 = builder2.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.riverIndexName("user");
        java.lang.String str7 = builder2.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray25 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet26);
        builder9.parentTypes = strSet26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder9.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        builder31.mongoClientOptions = mongoClientOptions32;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getNAME_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getNAME_FIELD();
        int int14 = mongoDBRiverDefinition8.socketTimeout;
        boolean boolean15 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "skip_initial_import" + "'", str9, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "advanced_transformation" + "'", str11, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "name" + "'", str12, "name");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        builder0.setstoreStatistics(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("socket_timeout");
        java.lang.String str13 = builder0.getmongoCollection();
        builder0.setstatisticsIndexName("ssl");
        builder0.mongoUseSSL = false;
        builder0.setscriptType("import_all_collections");
        builder0.connectTimeout = (byte) 1;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoAdminPassword("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.lang.String str6 = builder0.includeCollection;
        java.lang.String str7 = builder0.getstatisticsTypeName();
        builder0.script = "include_collection";
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = builder0.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoCollection("size");
        builder13.setscript("index");
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder13.mongoServers;
        builder0.setmongoServers(serverAddressList19);
        builder0.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serverAddressList19);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.mongoDb;
        builder0.setmongoGridFS(false);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoClientOptions(mongoClientOptions11);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        builder12.mongoClientOptions = mongoClientOptions13;
        builder12.dropCollection = false;
        int int17 = builder12.connectTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition8.getMongoClientOptions();
        boolean boolean16 = mongoDBRiverDefinition8.isMongoUseSSL();
        boolean boolean17 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition8.typeName;
        java.lang.String str19 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "password" + "'", str14, "password");
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "connect_timeout" + "'", str19, "connect_timeout");
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str13 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getStatisticsTypeName();
        java.lang.String str15 = mongoDBRiverDefinition8.riverIndexName;
        java.lang.String str16 = mongoDBRiverDefinition8.mongoAdminPassword;
        java.lang.String str17 = mongoDBRiverDefinition8.mongoCollection;
        java.lang.String str18 = mongoDBRiverDefinition8.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gridfs" + "'", str13, "gridfs");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "credentials" + "'", str18, "credentials");
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition8.getlogger();
        boolean boolean13 = mongoDBRiverDefinition8.advancedTransformation;
        int int14 = mongoDBRiverDefinition8.throttleSize;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        java.lang.String str35 = builder34.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalPassword("");
        builder37.setstatisticsIndexName("user");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.getadvancedTransformation();
        boolean boolean14 = mongoDBRiverDefinition8.dropCollection;
        java.lang.String str15 = mongoDBRiverDefinition8.getRiverIndexName();
        int int16 = mongoDBRiverDefinition8.getConnectTimeout();
        org.elasticsearch.common.logging.ESLogger eSLogger17 = mongoDBRiverDefinition8.getlogger();
        java.lang.String str18 = mongoDBRiverDefinition8.mongoLocalUser;
        boolean boolean19 = mongoDBRiverDefinition8.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(eSLogger17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        java.lang.String str35 = builder34.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalPassword("");
        java.lang.String str38 = builder37.getmongoLocalPassword();
        builder37.mongoCollection = "disable_index_refresh";
        java.lang.String str41 = builder37.mongoAdminUser;
        boolean boolean42 = builder37.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder37.advancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218387" + "'", str4, "mongodb-1638820218387");
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray25 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet26);
        builder9.parentTypes = strSet26;
        boolean boolean30 = builder9.advancedTransformation;
        builder9.setsocketTimeout(0);
        builder9.mongoCollection = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder9.build();
        boolean boolean36 = mongoDBRiverDefinition35.importAllCollections;
        int int37 = mongoDBRiverDefinition35.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1000 + "'", int37 == 1000);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet11 = builder8.includeFields;
        boolean boolean12 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet13 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        builder16.setmongoCollectionFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray31 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        builder16.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet39 = builder38.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder38.mongoServers;
        builder35.mongoServers = serverAddressList40;
        builder0.mongoServers = serverAddressList40;
        java.lang.String str43 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.statisticsTypeName("disable_index_refresh");
        boolean boolean47 = builder46.dropCollection;
        java.lang.String str48 = builder46.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        builder5.setindexName("user");
        com.mongodb.BasicDBObject basicDBObject10 = builder5.getmongoCollectionFilter();
        builder5.mongoDb = "script";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(basicDBObject10);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder2.mongoClientOptions;
        builder2.setsocketTimeout((int) (short) 10);
        builder2.throttleSize = 0;
        builder2.advancedTransformation = true;
        builder2.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(mongoClientOptions4);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalUser("mongodb-1638820218424");
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder2.setmongoClientOptions(mongoClientOptions8);
        int int10 = builder2.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.script("mongodb-1638820218299");
        java.lang.String str13 = builder2.getscript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb-1638820218299" + "'", str13, "mongodb-1638820218299");
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        java.lang.String str17 = builder12.getindexName();
        builder12.setmongoSSLVerifyCertificate(true);
        java.lang.String str20 = builder12.getriverIndexName();
        java.lang.String str21 = builder12.riverIndexName;
        java.lang.String str22 = builder12.getstatisticsTypeName();
        builder12.setmongoSSLVerifyCertificate(true);
        builder12.mongoCollection = "db";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean13 = mongoDBRiverDefinition8.getmongoUseSSL();
        java.lang.String str14 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.disableIndexRefresh;
        int int16 = mongoDBRiverDefinition8.socketTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_fields" + "'", str14, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "user");
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        java.lang.Object obj6 = null;
        docScoreSearchScript0.setNextVar("", obj6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet12 = builder11.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoCollection("size");
        int int15 = builder11.getsocketTimeout();
        builder11.settypeName("initial_timestamp");
        builder11.setriverName("size");
        java.util.Set<java.lang.String> strSet20 = builder11.excludeFields;
        java.lang.String str21 = builder11.getmongoDb();
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) str21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet25 = builder24.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject26 = builder24.mongoCollectionFilter;
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder24);
        docScoreSearchScript0.setNextScore((float) 1000);
        // The following exception was thrown during execution in test generation
        try {
            float float30 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "user" + "'", obj2, "user");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + false + "'", obj4, false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.lang.String str51 = builder2.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.mongoGridFS(false);
        boolean boolean54 = builder53.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp55 = builder53.initialTimestamp;
        int int56 = builder53.getsocketTimeout();
        builder53.setadvancedTransformation(false);
        boolean boolean59 = builder53.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(wildcardTimestamp55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        builder2.indexName = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.disableIndexRefresh(true);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.mongoOplogFilter;
        builder9.mongoCollection = "include_collection";
        boolean boolean13 = builder9.getmongoSSLVerifyCertificate();
        java.lang.String str14 = builder9.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        docScoreSearchScript0.setNextScore((float) '4');
        docScoreSearchScript0.setNextScore((float) (-1L));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        builder10.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoAdminPassword("index");
        java.util.Set<java.lang.String> strSet19 = builder10.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet23 = builder22.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.mongoCollection("size");
        builder25.setmongoAdminUser("disable_index_refresh");
        java.lang.String str28 = builder25.indexName;
        builder25.setmongoCollection("disable_index_refresh");
        builder25.mongoSSLVerifyCertificate = true;
        boolean boolean33 = builder25.getadvancedTransformation();
        java.lang.String str34 = builder25.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.advancedTransformation(false);
        builder35.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder35.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder35.mongoAdminPassword("index");
        int int44 = builder35.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder35.advancedTransformation(true);
        builder46.indexName = "port";
        builder46.setconnectTimeout((int) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet54 = builder51.includeFields;
        boolean boolean55 = builder51.getmongoGridFS();
        java.util.Set<java.lang.String> strSet56 = builder51.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder51.advancedTransformation(true);
        builder51.socketTimeout = (short) -1;
        java.lang.String str61 = builder51.indexName;
        builder51.setmongoAdminPassword("import_all_collections");
        int int64 = builder51.throttleSize;
        java.lang.String str65 = builder51.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder51.mongoSecondaryReadPreference(false);
        org.elasticsearch.common.settings.Settings settings68 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory69 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject71 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript72 = docScoreNativeScriptFactory69.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory73 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject75 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript76 = docScoreNativeScriptFactory73.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject75);
        com.mongodb.BasicDBObject basicDBObject78 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript79 = docScoreNativeScriptFactory73.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        org.elasticsearch.script.ExecutableScript executableScript80 = docScoreNativeScriptFactory69.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        org.elasticsearch.river.RiverSettings riverSettings81 = new org.elasticsearch.river.RiverSettings(settings68, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        builder51.mongoCollectionFilter = basicDBObject78;
        builder46.mongoOplogFilter = basicDBObject78;
        builder25.mongoOplogFilter = basicDBObject78;
        builder10.mongoOplogFilter = basicDBObject78;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(executableScript72);
        org.junit.Assert.assertNotNull(basicDBObject75);
        org.junit.Assert.assertNotNull(executableScript76);
        org.junit.Assert.assertNotNull(basicDBObject78);
        org.junit.Assert.assertNotNull(executableScript79);
        org.junit.Assert.assertNotNull(executableScript80);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        java.lang.String str15 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str16 = mongoDBRiverDefinition8.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.size" + "'", str13, "null.size");
        org.junit.Assert.assertNotNull(byteSizeValue14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "name" + "'", str16, "name");
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        builder15.mongoAdminPassword = "name";
        java.lang.String str20 = builder15.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet24 = builder23.parentTypes;
        boolean boolean25 = builder23.skipInitialImport;
        java.lang.String[] strArray56 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder15.includeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.includeFields = strSet57;
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder0.script("servers");
        builder66.mongoDb = "mongodb-1638820218264";
        builder66.includeCollection = "host";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet11 = builder10.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoCollection("size");
        builder13.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str17 = mongoDBRiverDefinition16.getTHROTTLE_SIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition16.getADMIN_DB_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition16.getNAME_FIELD();
        boolean boolean20 = mongoDBRiverDefinition16.mongoGridFS;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = mongoDBRiverDefinition16.getDEFAULT_BULK_SIZE();
        java.lang.Object obj22 = docScoreSearchScript0.unwrap((java.lang.Object) byteSizeValue21);
        org.apache.lucene.search.Scorer scorer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "admin" + "'", str18, "admin");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "name" + "'", str19, "name");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "5mb");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "5mb");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "5mb");
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        int int9 = builder0.getconnectTimeout();
        java.lang.String str10 = builder0.getriverIndexName();
        java.lang.String str11 = builder0.getmongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder0.mongoServers;
        builder0.connectTimeout = 'a';
        java.lang.String str15 = builder0.riverIndexName;
        boolean boolean16 = builder0.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getRiverIndexName();
        java.lang.String str13 = mongoDBRiverDefinition8.getRiverName();
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        java.lang.String str15 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.size" + "'", str14, "null.size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "password" + "'", str15, "password");
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.mongoSSLVerifyCertificate = true;
        builder0.setmongoLocalPassword("throttle_size");
        builder0.settypeName("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("filter");
        boolean boolean13 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("null.size");
        builder15.setriverName("include_collection");
        int int18 = builder15.getthrottleSize();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        java.util.Set<java.lang.String> strSet4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.includeFields(strSet4);
        builder2.setindexName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        builder8.mongoAdminPassword = "name";
        java.lang.String str13 = builder8.mongoCollection;
        java.util.Set<java.lang.String> strSet14 = builder8.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder8.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet19 = builder16.includeFields;
        boolean boolean20 = builder16.getmongoGridFS();
        java.util.Set<java.lang.String> strSet21 = builder16.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory27 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject29 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        builder24.setmongoCollectionFilter(basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder8.includeFields((java.util.Set<java.lang.String>) strSet40);
        builder2.includeFields = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.advancedTransformation(false);
        builder46.mongoAdminPassword = "name";
        java.lang.String str51 = builder46.mongoCollection;
        java.lang.String str52 = builder46.includeCollection;
        java.lang.String str53 = builder46.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory57 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject59 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory57.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        builder54.setmongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory67 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript70 = docScoreNativeScriptFactory67.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        builder64.setmongoCollectionFilter(basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder64.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet80);
        builder63.parentTypes = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder46.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder2.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder85.script("script_type");
        int int88 = builder85.socketTimeout;
        builder85.advancedTransformation = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(executableScript60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(executableScript70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.util.Set<java.lang.String> strSet6 = builder0.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder0.getinitialTimestamp();
        builder0.setadvancedTransformation(false);
        java.lang.String str10 = builder0.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoLocalPassword("exclude_fields");
        boolean boolean13 = builder0.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder2.getinitialTimestamp();
        builder2.scriptType = "servers";
        builder2.indexName = "advanced_transformation";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        builder11.setmongoCollectionFilter(basicDBObject16);
        java.lang.String str19 = builder11.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet25 = builder24.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.advancedTransformation(false);
        builder26.mongoAdminPassword = "name";
        java.lang.String str31 = builder26.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet35 = builder34.parentTypes;
        boolean boolean36 = builder34.skipInitialImport;
        java.lang.String[] strArray67 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder34.setincludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder26.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet68);
        builder11.includeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet68);
        java.lang.String str75 = builder74.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions76 = null;
        builder74.setmongoClientOptions(mongoClientOptions76);
        builder74.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder2.setscript("index");
        builder2.mongoGridFS = true;
        builder2.setstatisticsIndexName("gridfs");
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder2.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.dropCollection(false);
        boolean boolean15 = builder2.mongoGridFS;
        int int16 = builder2.socketTimeout;
        int int17 = builder2.throttleSize;
        boolean boolean18 = builder2.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str13 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getStatisticsTypeName();
        boolean boolean15 = mongoDBRiverDefinition8.getmongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.statisticsTypeName;
        java.lang.String str18 = mongoDBRiverDefinition8.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gridfs" + "'", str13, "gridfs");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "exclude_fields" + "'", str16, "exclude_fields");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_bulk_requests" + "'", str18, "concurrent_bulk_requests");
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition8.initialTimestamp;
        java.lang.String str18 = mongoDBRiverDefinition8.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "collection" + "'", str16, "collection");
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet6 = builder5.parentTypes;
        java.lang.String str7 = builder5.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject17 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject17);
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject17);
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject23 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        com.mongodb.BasicDBObject basicDBObject30 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.script.ExecutableScript executableScript32 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder5.mongoOplogFilter(basicDBObject30);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.script.ScriptService scriptService37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "concurrent_requests", riverSettings36, scriptService37);
        boolean boolean39 = mongoDBRiverDefinition38.getstoreStatistics();
        java.lang.String str40 = mongoDBRiverDefinition38.getStatisticsTypeName();
        boolean boolean41 = mongoDBRiverDefinition38.getimportAllCollections();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(executableScript32);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        int int13 = mongoDBRiverDefinition8.throttleSize;
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition8.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str16 = mongoDBRiverDefinition8.getSTORE_STATISTICS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "store_statistics" + "'", str16, "store_statistics");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        boolean boolean14 = mongoDBRiverDefinition8.getdropCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition8.getMongoServers();
        java.lang.String str16 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "throttle_size" + "'", str18, "throttle_size");
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("port", "mongodb-1638820218299");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?mongodb-1638820218299?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "local" + "'", str16, "local");
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.lang.String str5 = builder0.indexName;
        builder0.skipInitialImport = false;
        java.util.Set<java.lang.String> strSet8 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.socketTimeout(0);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.parentTypes;
        boolean boolean18 = builder16.skipInitialImport;
        java.lang.String[] strArray49 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder16.setincludeFields((java.util.Set<java.lang.String>) strSet50);
        builder12.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder12.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder12.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.advancedTransformation(false);
        builder58.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder58.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder58.mongoAdminPassword("index");
        int int67 = builder58.getconnectTimeout();
        java.lang.String str68 = builder58.getriverIndexName();
        boolean boolean69 = builder58.disableIndexRefresh;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory70 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject72 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript73 = docScoreNativeScriptFactory70.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject72);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory74 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject76 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript77 = docScoreNativeScriptFactory74.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject76);
        com.mongodb.BasicDBObject basicDBObject79 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript80 = docScoreNativeScriptFactory74.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.script.ExecutableScript executableScript81 = docScoreNativeScriptFactory70.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.common.settings.Settings settings82 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory83 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject85 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript86 = docScoreNativeScriptFactory83.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject85);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory87 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject89 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript90 = docScoreNativeScriptFactory87.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject89);
        com.mongodb.BasicDBObject basicDBObject92 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript93 = docScoreNativeScriptFactory87.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject92);
        org.elasticsearch.script.ExecutableScript executableScript94 = docScoreNativeScriptFactory83.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject92);
        org.elasticsearch.river.RiverSettings riverSettings95 = new org.elasticsearch.river.RiverSettings(settings82, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject92);
        org.elasticsearch.script.ExecutableScript executableScript96 = docScoreNativeScriptFactory70.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject92);
        builder58.mongoOplogFilter = basicDBObject92;
        builder57.setmongoOplogFilter(basicDBObject92);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder0.mongoOplogFilter(basicDBObject92);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertNotNull(executableScript73);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(executableScript77);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(executableScript80);
        org.junit.Assert.assertNotNull(executableScript81);
        org.junit.Assert.assertNotNull(basicDBObject85);
        org.junit.Assert.assertNotNull(executableScript86);
        org.junit.Assert.assertNotNull(basicDBObject89);
        org.junit.Assert.assertNotNull(executableScript90);
        org.junit.Assert.assertNotNull(basicDBObject92);
        org.junit.Assert.assertNotNull(executableScript93);
        org.junit.Assert.assertNotNull(executableScript94);
        org.junit.Assert.assertNotNull(executableScript96);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.lang.String str51 = builder2.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.mongoGridFS(false);
        builder2.setdisableIndexRefresh(true);
        java.lang.Class<?> wildcardClass56 = builder2.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray25 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet26);
        builder9.parentTypes = strSet26;
        boolean boolean30 = builder9.advancedTransformation;
        builder9.setsocketTimeout(0);
        builder9.includeCollection = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder9.mongoAdminPassword("mongodb-1638820218326");
        java.lang.String str37 = builder9.mongoDb;
        builder9.setadvancedTransformation(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "mongodb-1638820218387" + "'", str37, "mongodb-1638820218387");
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString8();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218424" + "'", str4, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218363" + "'", str8, "mongodb-1638820218363");
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString8();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        builder0.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.getmongoCollection();
        boolean boolean14 = builder12.getadvancedTransformation();
        boolean boolean15 = builder12.getmongoUseSSL();
        java.lang.String[] strArray20 = new java.lang.String[] { "secondary_read_preference", "null.size", "bulk_size", "index" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.includeFields((java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.mongoAdminPassword("mongodb-1638820218424");
        java.util.Set<java.lang.String> strSet27 = builder24.includeFields;
        java.lang.String str28 = builder24.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218424" + "'", str1, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218326" + "'", str5, "mongodb-1638820218326");
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder2.setincludeFields((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = builder2.dropCollection;
        java.lang.String str40 = builder2.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder2.riverName("type");
        java.lang.String str43 = builder2.getscriptType();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str17 = mongoDBRiverDefinition8.getNAME_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "name" + "'", str17, "name");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoAdminUser();
        int int15 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        java.lang.String str16 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27017 + "'", int15 == 27017);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "advanced_transformation" + "'", str16, "advanced_transformation");
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb-1638820217755" + "'", str10, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertNull(riverSettings12);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.Class<?> wildcardClass9 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218424" + "'", str7, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        int int10 = builder0.getconnectTimeout();
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoOplogFilter();
        boolean boolean12 = builder0.importAllCollections;
        builder0.setadvancedTransformation(true);
        java.util.Set<java.lang.String> strSet15 = builder0.includeFields;
        builder0.setriverName("options");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.throttleSize((int) (byte) 1);
        boolean boolean9 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoLocalUser("flush_interval");
        builder0.setscript("collection");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet11 = builder2.getparentTypes();
        builder2.setthrottleSize((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.statisticsIndexName("credentials");
        java.lang.String str16 = builder2.getriverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition8.getMongoServers();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter14.deserializeObjectRiverSettings4();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString16();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter14.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter14.deserializeObjectRiverSettings4();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter14;
        java.lang.String str21 = mongoDBRiverDefinition8.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
        org.junit.Assert.assertNull(riverSettings18);
        org.junit.Assert.assertNull(riverSettings19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoAdminPassword();
        boolean boolean14 = mongoDBRiverDefinition8.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition8.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.settypeName("initial_timestamp");
        builder2.setriverName("size");
        java.util.Set<java.lang.String> strSet11 = builder2.excludeFields;
        java.lang.String str12 = builder2.getmongoDb();
        boolean boolean13 = builder2.getimportAllCollections();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoOplogFilter(basicDBObject15);
        java.util.Set<java.lang.String> strSet17 = builder2.excludeFields;
        builder2.throttleSize = 0;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getHOST_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str14 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        java.lang.String str15 = mongoDBRiverDefinition8.getIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "host" + "'", str12, "host");
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "socket_timeout" + "'", str14, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "name" + "'", str15, "name");
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoCollectionFilter(basicDBObject15);
        builder0.mongoLocalPassword = "initial_timestamp";
        boolean boolean21 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.script("script_type");
        builder23.setmongoLocalPassword("user");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.getadvancedTransformation();
        boolean boolean14 = mongoDBRiverDefinition8.dropCollection;
        boolean boolean15 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter16 = mongoDBRiverDefinition8.serializedObjectSupporter;
        int int17 = mongoDBRiverDefinition8.getSocketTimeout();
        boolean boolean18 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        int int19 = mongoDBRiverDefinition8.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        boolean boolean12 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.isStoreStatistics();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str17 = mongoDBRiverDefinition8.getIncludeCollection();
        int int18 = mongoDBRiverDefinition8.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverName("flush_interval");
        builder3.importAllCollections = true;
        builder3.mongoLocalUser = "flush_interval";
        builder3.mongoAdminPassword = "host";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str15 = mongoDBRiverDefinition8.getNAME_FIELD();
        int int16 = mongoDBRiverDefinition8.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "name" + "'", str15, "name");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString10();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        java.util.Set<java.lang.String> strSet4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.includeFields(strSet4);
        builder2.setindexName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        builder8.mongoAdminPassword = "name";
        java.lang.String str13 = builder8.mongoCollection;
        java.util.Set<java.lang.String> strSet14 = builder8.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder8.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet19 = builder16.includeFields;
        boolean boolean20 = builder16.getmongoGridFS();
        java.util.Set<java.lang.String> strSet21 = builder16.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory27 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject29 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        builder24.setmongoCollectionFilter(basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder8.includeFields((java.util.Set<java.lang.String>) strSet40);
        builder2.includeFields = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.advancedTransformation(false);
        builder46.mongoAdminPassword = "name";
        java.lang.String str51 = builder46.mongoCollection;
        java.lang.String str52 = builder46.includeCollection;
        java.lang.String str53 = builder46.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory57 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject59 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory57.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        builder54.setmongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory67 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript70 = docScoreNativeScriptFactory67.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        builder64.setmongoCollectionFilter(basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder64.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet80);
        builder63.parentTypes = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder46.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder2.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter86 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str87 = serializedObjectSupporter86.deserializeObjectString11();
        java.lang.String str88 = serializedObjectSupporter86.deserializeObjectString6();
        java.lang.String str89 = serializedObjectSupporter86.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings90 = serializedObjectSupporter86.deserializeObjectRiverSettings7();
        builder85.serializedObjectSupporter = serializedObjectSupporter86;
        java.lang.String str92 = builder85.getmongoAdminUser();
        int int93 = builder85.getconnectTimeout();
        boolean boolean94 = builder85.mongoGridFS;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(executableScript60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(executableScript70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "mongodb-1638820218387" + "'", str87, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "_river" + "'", str88, "_river");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "mongodb-1638820217755" + "'", str89, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        com.mongodb.BasicDBObject basicDBObject15 = builder14.mongoOplogFilter;
        boolean boolean16 = builder14.disableIndexRefresh;
        builder14.setindexName("disable_index_refresh");
        builder14.riverIndexName = "parent_types";
        org.bson.types.BSONTimestamp bSONTimestamp21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.initialTimestamp(bSONTimestamp21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString15();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218424" + "'", str3, "mongodb-1638820218424");
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        java.lang.String str17 = builder12.getindexName();
        java.lang.String str18 = builder12.getmongoAdminPassword();
        java.lang.String str19 = builder12.getincludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        int int11 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.Class<?> wildcardClass12 = mongoDBRiverDefinition8.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        java.lang.String str6 = builder5.getindexName();
        java.lang.String str7 = builder5.mongoAdminPassword;
        boolean boolean8 = builder5.getimportAllCollections();
        com.mongodb.BasicDBObject basicDBObject9 = builder5.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject17 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject17);
        builder12.setmongoCollectionFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder12.mongoDb("mongodb-1638820218387");
        builder12.skipInitialImport = false;
        builder12.indexName = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder12.statisticsIndexName("password");
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.advancedTransformation(false);
        builder30.mongoAdminPassword = "name";
        builder30.mongoSSLVerifyCertificate = true;
        builder30.setmongoLocalPassword("throttle_size");
        builder30.settypeName("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder30.scriptType("filter");
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoClientOptions(mongoClientOptions43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.advancedTransformation(false);
        builder45.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet57 = builder56.parentTypes;
        boolean boolean58 = builder56.skipInitialImport;
        java.lang.String[] strArray89 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        builder56.setincludeFields((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder45.includeFields((java.util.Set<java.lang.String>) strSet90);
        builder42.setparentTypes((java.util.Set<java.lang.String>) strSet90);
        builder29.setincludeFields((java.util.Set<java.lang.String>) strSet90);
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet90);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.settypeName("initial_timestamp");
        builder2.setriverName("size");
        builder2.mongoLocalPassword = "socket_timeout";
        java.lang.String str13 = builder2.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder2.getmongoServers();
        builder2.setriverIndexName("bulk_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setthrottleSize((-1));
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.storeStatistics(false);
        builder19.setmongoUseSSL(true);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject30 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject33 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder19.mongoCollectionFilter = basicDBObject33;
        java.lang.String str39 = builder19.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet43 = builder42.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.advancedTransformation(false);
        java.lang.String str46 = builder45.getindexName();
        builder45.mongoDb = "throttle_size";
        java.lang.String str49 = builder45.getmongoAdminPassword();
        java.lang.String str50 = builder45.getmongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject51 = builder45.mongoCollectionFilter;
        builder19.mongoCollectionFilter = basicDBObject51;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(basicDBObject51);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setmongoAdminUser("disable_index_refresh");
        java.lang.String str8 = builder5.indexName;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoCollectionFilter(basicDBObject18);
        builder21.mongoLocalPassword = "throttle_size";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        builder10.riverIndexName = "ssl";
        builder10.scriptType = "hi!";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        boolean boolean46 = builder45.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder45.typeName("actions");
        java.lang.String str49 = builder45.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder45.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.mongoAdminPassword("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder2.mongoClientOptions;
        builder2.setsocketTimeout((int) (short) 10);
        java.lang.String str7 = builder2.indexName;
        builder2.mongoUseSSL = true;
        boolean boolean10 = builder2.getmongoSecondaryReadPreference();
        java.lang.String str11 = builder2.riverName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        java.lang.String str36 = builder32.mongoAdminPassword;
        boolean boolean37 = builder32.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder32.build();
        boolean boolean39 = mongoDBRiverDefinition38.skipInitialImport;
        org.elasticsearch.common.logging.ESLogger eSLogger40 = mongoDBRiverDefinition38.getlogger();
        java.lang.String str41 = mongoDBRiverDefinition38.getBULK_TIMEOUT_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition38.getPASSWORD_FIELD();
        java.lang.String str43 = mongoDBRiverDefinition38.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(eSLogger40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "bulk_timeout" + "'", str41, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "password" + "'", str42, "password");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "drop_collection" + "'", str43, "drop_collection");
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        int int6 = builder2.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.advancedTransformation(false);
        builder7.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder7.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoAdminPassword("index");
        java.util.Set<java.lang.String> strSet16 = builder7.excludeFields;
        builder7.connectTimeout = 10;
        java.lang.String str19 = builder7.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        builder20.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder20.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder20.mongoAdminPassword("index");
        java.util.Set<java.lang.String> strSet29 = builder20.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder20.dropCollection(false);
        builder31.mongoAdminUser = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet37 = builder34.includeFields;
        boolean boolean38 = builder34.getmongoGridFS();
        java.util.Set<java.lang.String> strSet39 = builder34.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder34.advancedTransformation(true);
        builder34.setriverIndexName("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet47 = builder46.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.advancedTransformation(false);
        builder48.mongoAdminPassword = "name";
        java.lang.String str53 = builder48.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet57 = builder56.parentTypes;
        boolean boolean58 = builder56.skipInitialImport;
        java.lang.String[] strArray89 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        builder56.setincludeFields((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder48.includeFields((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder46.excludeFields((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder34.includeFields((java.util.Set<java.lang.String>) strSet90);
        builder31.setexcludeFields((java.util.Set<java.lang.String>) strSet90);
        builder7.parentTypes = strSet90;
        builder2.excludeFields = strSet90;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("concurrent_bulk_requests", "admin", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?admin?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray25 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet26);
        builder9.parentTypes = strSet26;
        boolean boolean30 = builder9.advancedTransformation;
        builder9.setsocketTimeout(0);
        builder9.mongoCollection = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = builder9.build();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp36 = builder9.getinitialTimestamp();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder9.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition35);
        org.junit.Assert.assertNull(wildcardTimestamp36);
        org.junit.Assert.assertNotNull(serverAddressList37);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        java.lang.String str8 = builder2.mongoDb;
        builder2.mongoLocalUser = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.riverName("mongodb-1638820217755");
        builder12.script = "_river";
        builder12.mongoCollection = "mongodb-1638820218424";
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder12.mongoServers = serverAddressList18;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        boolean boolean11 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str12 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str13 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition8.getSERVERS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "parent_types" + "'", str13, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "servers" + "'", str15, "servers");
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str17 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition8.getExcludeFields();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition8.getParentTypes();
        int int20 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean21 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str22 = mongoDBRiverDefinition8.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "type" + "'", str17, "type");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "type" + "'", str22, "type");
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218326" + "'", str4, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218387" + "'", str5, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218264" + "'", str9, "mongodb-1638820218264");
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet11 = builder2.getparentTypes();
        java.lang.String str12 = builder2.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet12 = builder11.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder11.mongoServers;
        builder2.setmongoServers(serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.throttleSize((int) (short) 1);
        java.lang.String str17 = builder2.getindexName();
        builder2.setscript("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        int int11 = mongoDBRiverDefinition8.socketTimeout;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str13 = mongoDBRiverDefinition8.getRiverIndexName();
        java.lang.String str14 = mongoDBRiverDefinition8.mongoAdminPassword;
        boolean boolean15 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str16 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean17 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218424" + "'", str1, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.typeName;
        java.lang.String str14 = mongoDBRiverDefinition8.includeCollection;
        int int15 = mongoDBRiverDefinition8.socketTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.advancedTransformation(false);
        builder13.setimportAllCollections(false);
        java.lang.String str19 = builder13.mongoDb;
        builder13.mongoLocalUser = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.riverName("mongodb-1638820217755");
        builder23.script = "_river";
        builder23.mongoCollection = "mongodb-1638820218424";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder30.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.mongoCollection("size");
        int int34 = builder30.getsocketTimeout();
        builder30.setmongoSecondaryReadPreference(false);
        builder30.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder30.mongoOplogFilter(basicDBObject39);
        boolean boolean41 = builder40.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.advancedTransformation(false);
        builder44.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder44.mongoUseSSL(false);
        java.lang.String str49 = builder44.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet53 = builder52.includeFields;
        builder52.setmongoGridFS(true);
        boolean boolean56 = builder52.disableIndexRefresh;
        java.lang.String[] strArray73 = new java.lang.String[] { "socket_timeout", "mongodb-1638820218387", "flush_interval", "db", "socket_timeout", "host", "concurrent_requests", "concurrent_requests", "bulk_timeout", "disable_index_refresh", "index", "disable_index_refresh", "local", "throttle_size", "script_type", "parent_types" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder52.parentTypes((java.util.Set<java.lang.String>) strSet74);
        builder44.excludeFields = strSet74;
        builder40.excludeFields = strSet74;
        builder23.includeFields = strSet74;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet74);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        int int6 = builder5.connectTimeout;
        boolean boolean7 = builder5.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition8.getInitialTimestamp();
        java.lang.String str13 = mongoDBRiverDefinition8.script;
        int int14 = mongoDBRiverDefinition8.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getUSER_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str16 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str18 = mongoDBRiverDefinition8.getHOST_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition8.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "drop_collection" + "'", str13, "drop_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "flush_interval" + "'", str16, "flush_interval");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "localhost" + "'", str17, "localhost");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "host" + "'", str18, "host");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_bulk_requests" + "'", str19, "concurrent_bulk_requests");
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str15 = mongoDBRiverDefinition8.scriptType;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str17 = mongoDBRiverDefinition8.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "include_collection" + "'", str17, "include_collection");
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        java.lang.String str6 = builder0.mongoAdminUser;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript10 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        builder0.setmongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoAdminUser("size");
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder0.getmongoClientOptions();
        builder0.mongoCollection = "mongodb-1638820218408";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(executableScript10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mongoClientOptions14);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.connectTimeout((int) (byte) 100);
        java.util.Set<java.lang.String> strSet9 = builder0.getincludeFields();
        boolean boolean10 = builder0.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.connectTimeout((int) (byte) 100);
        builder8.importAllCollections = false;
        java.lang.String str11 = builder8.scriptType;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        builder0.importAllCollections = false;
        builder0.riverIndexName = "parent_types";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp50 = builder0.getinitialTimestamp();
        java.lang.String str51 = builder0.getmongoAdminUser();
        boolean boolean52 = builder0.getmongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject53 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(wildcardTimestamp50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(basicDBObject53);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str17 = mongoDBRiverDefinition8.getIncludeCollection();
        boolean boolean18 = mongoDBRiverDefinition8.isMongoUseSSL();
        boolean boolean19 = mongoDBRiverDefinition8.importAllCollections;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder5.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "user");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) "filter");
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((float) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoCollection("initial_timestamp");
        java.lang.String str14 = builder11.getscript();
        docScoreSearchScript0.setNextVar("bulk", (java.lang.Object) builder11);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "user" + "'", obj2, "user");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.getmongoClientOptions();
        builder0.statisticsTypeName = "bulk_timeout";
        builder0.setmongoLocalUser("user");
        builder0.setscriptType("_river");
        builder0.setmongoAdminUser("store_statistics");
        builder0.setthrottleSize((int) (byte) 0);
        builder0.setstatisticsTypeName("");
        boolean boolean19 = builder0.getmongoUseSSL();
        builder0.setsocketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoDb("localhost");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.dropCollection(true);
        int int10 = builder2.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.statisticsIndexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet16 = builder15.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoCollection("size");
        builder18.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.lang.String str22 = mongoDBRiverDefinition21.getTHROTTLE_SIZE_FIELD();
        boolean boolean23 = mongoDBRiverDefinition21.getmongoSecondaryReadPreference();
        int int24 = mongoDBRiverDefinition21.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject25 = mongoDBRiverDefinition21.mongoOplogFilter;
        com.mongodb.BasicDBObject basicDBObject26 = mongoDBRiverDefinition21.getMongoOplogFilter();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter27 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings28 = serializedObjectSupporter27.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter27.deserializeObjectRiverSettings8();
        java.lang.String str30 = serializedObjectSupporter27.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings31 = serializedObjectSupporter27.deserializeObjectRiverSettings9();
        java.lang.String str32 = serializedObjectSupporter27.deserializeObjectString7();
        mongoDBRiverDefinition21.serializedObjectSupporter = serializedObjectSupporter27;
        java.lang.String str34 = serializedObjectSupporter27.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings35 = serializedObjectSupporter27.deserializeObjectRiverSettings1();
        java.lang.String str36 = serializedObjectSupporter27.deserializeObjectString4();
        builder12.serializedObjectSupporter = serializedObjectSupporter27;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "throttle_size" + "'", str22, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNull(riverSettings28);
        org.junit.Assert.assertNull(riverSettings29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mongodb-1638820218408" + "'", str30, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb-1638820218326" + "'", str32, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb-1638820218387" + "'", str34, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_river" + "'", str36, "_river");
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        java.lang.String str6 = builder5.getindexName();
        java.lang.String str7 = builder5.getmongoDb();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(mongoClientOptions8);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.getmongoClientOptions();
        builder0.statisticsTypeName = "bulk_timeout";
        boolean boolean9 = builder0.getstoreStatistics();
        builder0.script = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsIndexName("ssl_verify_certificate");
        builder13.typeName = "actions";
        builder13.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.mongoCollectionFilter;
        java.lang.String str13 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        boolean boolean14 = mongoDBRiverDefinition8.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "socket_timeout" + "'", str13, "socket_timeout");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "advanced_transformation" + "'", str15, "advanced_transformation");
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setthrottleSize((-1));
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.storeStatistics(false);
        builder19.setmongoUseSSL(true);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject30 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject33 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder19.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder19.mongoAdminUser("mongodb-1638820217755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder40.disableIndexRefresh(false);
        builder44.mongoUseSSL = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "parent_types" + "'", str13, "parent_types");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        builder10.setincludeCollection("host");
        boolean boolean13 = builder10.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.indexName("drop_collection");
        java.util.Set<java.lang.String> strSet16 = null;
        builder10.includeFields = strSet16;
        boolean boolean18 = builder10.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.skipInitialImport;
        builder32.advancedTransformation = false;
        java.lang.String str36 = builder32.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder32.mongoSecondaryReadPreference(false);
        boolean boolean39 = builder38.getmongoSecondaryReadPreference();
        boolean boolean40 = builder38.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        builder45.mongoLocalPassword = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder45.dropCollection(false);
        boolean boolean50 = builder49.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.getmongoClientOptions();
        builder0.statisticsTypeName = "bulk_timeout";
        builder0.setmongoLocalUser("user");
        builder0.setscriptType("_river");
        builder0.setmongoAdminUser("store_statistics");
        builder0.setthrottleSize((int) (byte) 0);
        builder0.setstatisticsTypeName("");
        boolean boolean19 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter20 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(serializedObjectSupporter20);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        java.lang.String str14 = mongoDBRiverDefinition8.getBULK_TIMEOUT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition8.initialTimestamp;
        java.lang.String str16 = mongoDBRiverDefinition8.getSIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_timeout" + "'", str14, "bulk_timeout");
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder2.mongoClientOptions;
        builder2.setsocketTimeout((int) (short) 10);
        java.lang.String str7 = builder2.indexName;
        builder2.setscript("script_type");
        builder2.mongoAdminUser = "drop_collection";
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        builder2.mongoClientOptions = mongoClientOptions12;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.riverIndexName("connect_timeout");
        boolean boolean16 = builder2.advancedTransformation;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.settypeName("initial_timestamp");
        builder2.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = builder2.serializedObjectSupporter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder2.getmongoServers();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(serverAddressList12);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet10 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoCollection("size");
        builder9.setscript("index");
        docScoreSearchScript0.setNextVar("mongodb-1638820217755", (java.lang.Object) "index");
        org.apache.lucene.search.Scorer scorer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getUSER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.mongoCollection;
        boolean boolean16 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str17 = mongoDBRiverDefinition8.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet5 = builder4.parentTypes;
        boolean boolean6 = builder4.skipInitialImport;
        java.lang.String[] strArray37 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder4.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        builder0.parentTypes = strSet38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.throttleSize(100);
        java.lang.String str44 = builder0.mongoAdminUser;
        java.lang.String str45 = builder0.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.mongoCollection("size");
        builder15.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.lang.String str19 = mongoDBRiverDefinition18.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition18.initialTimestamp;
        int int21 = mongoDBRiverDefinition18.connectTimeout;
        boolean boolean22 = mongoDBRiverDefinition18.isDisableIndexRefresh();
        java.lang.String str23 = mongoDBRiverDefinition18.getMongoLocalUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter24 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str25 = serializedObjectSupporter24.deserializeObjectString11();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings27 = serializedObjectSupporter24.deserializeObjectRiverSettings3();
        java.lang.String str28 = serializedObjectSupporter24.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings29 = serializedObjectSupporter24.deserializeObjectRiverSettings3();
        mongoDBRiverDefinition18.serializedObjectSupporter = serializedObjectSupporter24;
        java.lang.Object obj31 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet36 = builder35.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoCollection("size");
        builder38.script = "skip_initial_import";
        builder38.setstoreStatistics(true);
        java.lang.String str43 = builder38.scriptType;
        docScoreSearchScript0.setNextVar("mongodb-1638820218449", (java.lang.Object) builder38);
        org.apache.lucene.search.Scorer scorer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "actions" + "'", str19, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb-1638820218387" + "'", str25, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mongodb-1638820218449" + "'", str26, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertNull(riverSettings29);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsIndexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder10.setmongoCollectionFilter(basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory23 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject25 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory23.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        builder20.setmongoCollectionFilter(basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray35 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder19.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet36);
        com.mongodb.BasicDBObject basicDBObject41 = builder0.getmongoOplogFilter();
        builder0.setmongoDb("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(basicDBObject41);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder2.setincludeFields((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = builder2.dropCollection;
        builder2.riverIndexName = "mongodb-1638820218299";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = builder2.build();
        boolean boolean43 = builder2.importAllCollections;
        java.util.Set<java.lang.String> strSet44 = builder2.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder2.riverIndexName("null.size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject13 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript14 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        builder8.setmongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray23 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.throttleSize((int) (byte) 100);
        builder29.mongoLocalPassword = "parent_types";
        boolean boolean32 = builder29.getskipInitialImport();
        builder29.setdisableIndexRefresh(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(executableScript14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        docScoreSearchScript0.setNextScore((float) (byte) 10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.advancedTransformation(false);
        builder9.mongoAdminPassword = "name";
        boolean boolean14 = builder9.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject17 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject17);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        builder9.setmongoCollectionFilter(basicDBObject24);
        builder9.mongoLocalPassword = "initial_timestamp";
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder9.mongoServers;
        java.lang.String str31 = builder9.statisticsIndexName;
        boolean boolean32 = builder9.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder9.riverIndexName("gridfs");
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) builder34);
        builder34.settypeName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.mongoGridFS(false);
        java.lang.String str40 = builder39.mongoCollection;
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_river" + "'", str9, "_river");
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString8();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820217755" + "'", str3, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218264" + "'", str4, "mongodb-1638820218264");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        int int36 = builder35.connectTimeout;
        builder35.mongoUseSSL = true;
        boolean boolean39 = builder35.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        int int8 = builder5.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString11();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter10.deserializeObjectRiverSettings2();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString17();
        mongoDBRiverDefinition9.serializedObjectSupporter = serializedObjectSupporter10;
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218387" + "'", str11, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218449" + "'", str12, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        boolean boolean14 = mongoDBRiverDefinition8.getdropCollection();
        boolean boolean15 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean16 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str17 = mongoDBRiverDefinition8.indexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "name" + "'", str17, "name");
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition8.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoLocalUser();
        java.lang.String str18 = mongoDBRiverDefinition8.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "exclude_fields" + "'", str15, "exclude_fields");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition8.statisticsTypeName;
        boolean boolean14 = mongoDBRiverDefinition8.isSkipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        java.lang.String str7 = builder0.includeCollection;
        java.util.Set<java.lang.String> strSet8 = builder0.getexcludeFields();
        boolean boolean9 = builder0.advancedTransformation;
        java.lang.String str10 = builder0.getmongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str13 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getStatisticsTypeName();
        java.lang.String str15 = mongoDBRiverDefinition8.riverIndexName;
        java.lang.String str16 = mongoDBRiverDefinition8.getNAME_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.statisticsIndexName;
        java.lang.String str18 = mongoDBRiverDefinition8.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gridfs" + "'", str13, "gridfs");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "name" + "'", str16, "name");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "credentials" + "'", str18, "credentials");
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        builder0.includeCollection = "mongodb-1638820218363";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.getmongoCollection();
        builder11.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet18 = builder17.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.advancedTransformation(false);
        builder17.setimportAllCollections(false);
        builder17.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet28 = builder27.parentTypes;
        boolean boolean29 = builder27.skipInitialImport;
        java.lang.String[] strArray60 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder27.setincludeFields((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder17.includeFields((java.util.Set<java.lang.String>) strSet61);
        builder11.parentTypes = strSet61;
        builder10.parentTypes = strSet61;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str68 = mongoDBRiverDefinition67.getPORT_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = mongoDBRiverDefinition67.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "port" + "'", str68, "port");
        org.junit.Assert.assertNotNull(byteSizeValue69);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str12 = mongoDBRiverDefinition8.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "size" + "'", str12, "size");
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        int int9 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.indexName("collection");
        builder13.setskipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet5 = builder4.parentTypes;
        boolean boolean6 = builder4.skipInitialImport;
        java.lang.String[] strArray37 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder4.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        builder0.parentTypes = strSet38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.includeCollection("drop_collection");
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder43.mongoClientOptions;
        builder43.importAllCollections = false;
        java.lang.String str49 = builder43.getmongoDb();
        builder43.setskipInitialImport(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(mongoClientOptions46);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "user");
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        java.lang.Object obj6 = null;
        docScoreSearchScript0.setNextVar("", obj6);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) "throttle_size");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript11 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj13 = docScoreSearchScript11.unwrap((java.lang.Object) "user");
        java.lang.Object obj15 = docScoreSearchScript11.unwrap((java.lang.Object) false);
        java.lang.Object obj17 = null;
        docScoreSearchScript11.setNextVar("", obj17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet23 = builder22.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder22.mongoCollection("size");
        int int26 = builder22.getsocketTimeout();
        builder22.settypeName("initial_timestamp");
        builder22.setriverName("size");
        java.util.Set<java.lang.String> strSet31 = builder22.excludeFields;
        java.lang.String str32 = builder22.getmongoDb();
        docScoreSearchScript11.setNextVar("exclude_fields", (java.lang.Object) str32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet36 = builder35.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject37 = builder35.mongoCollectionFilter;
        docScoreSearchScript11.setNextVar("", (java.lang.Object) builder35);
        java.lang.Object obj39 = docScoreSearchScript0.unwrap((java.lang.Object) builder35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "user" + "'", obj2, "user");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + false + "'", obj4, false);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "user" + "'", obj13, "user");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.util.Set<java.lang.String> strSet1 = builder0.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject2 = builder0.mongoCollectionFilter;
        builder0.setincludeCollection("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(false);
        builder8.setmongoLocalUser("port");
        java.lang.String str11 = builder8.riverIndexName;
        org.junit.Assert.assertNull(strSet1);
        org.junit.Assert.assertNotNull(basicDBObject2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet22 = builder21.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoCollection("size");
        builder24.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.lang.String str28 = mongoDBRiverDefinition27.getTHROTTLE_SIZE_FIELD();
        boolean boolean29 = mongoDBRiverDefinition27.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject30 = mongoDBRiverDefinition27.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet31 = mongoDBRiverDefinition27.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject32 = mongoDBRiverDefinition27.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.common.settings.Settings settings35 = riverSettings34.globalSettings();
        org.elasticsearch.common.settings.Settings settings36 = riverSettings34.globalSettings();
        org.elasticsearch.script.ScriptService scriptService37 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("mongodb-1638820218264", "index", riverSettings34, scriptService37);
        java.util.List<com.mongodb.ServerAddress> serverAddressList39 = mongoDBRiverDefinition38.getMongoServers();
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "throttle_size" + "'", str28, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(basicDBObject30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNull(settings35);
        org.junit.Assert.assertNull(settings36);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertNotNull(serverAddressList39);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        int int13 = mongoDBRiverDefinition8.throttleSize;
        java.lang.String str14 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "admin" + "'", str14, "admin");
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition8.includeCollection;
        java.lang.String str13 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str14 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getHOST_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "socket_timeout" + "'", str11, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "drop_collection" + "'", str14, "drop_collection");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("mongodb-1638820218299", "bulk_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?bulk_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        java.lang.String str8 = builder2.mongoDb;
        builder2.mongoLocalUser = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.riverName("mongodb-1638820217755");
        builder12.script = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoDb("concurrent_requests");
        builder12.setstatisticsIndexName("type");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.throttleSize((int) (byte) -1);
        boolean boolean8 = builder0.advancedTransformation;
        boolean boolean9 = builder0.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder12.mongoCollection("size");
        int int16 = builder12.getsocketTimeout();
        builder12.setmongoSecondaryReadPreference(false);
        builder12.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.mongoOplogFilter(basicDBObject21);
        builder22.setmongoGridFS(false);
        boolean boolean25 = builder22.getmongoUseSSL();
        java.lang.String str26 = builder22.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder22.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet32 = builder29.includeFields;
        boolean boolean33 = builder29.getmongoGridFS();
        java.util.Set<java.lang.String> strSet34 = builder29.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder29.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet41 = builder40.parentTypes;
        builder40.indexName = "disable_index_refresh";
        builder40.setriverName("ssl_verify_certificate");
        builder40.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder40.initialTimestamp;
        builder40.riverIndexName = "db";
        builder40.setscript("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str54 = builder53.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder55.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet58 = builder57.parentTypes;
        boolean boolean59 = builder57.skipInitialImport;
        java.lang.String[] strArray90 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet91 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet91, strArray90);
        builder57.setincludeFields((java.util.Set<java.lang.String>) strSet91);
        builder53.parentTypes = strSet91;
        builder40.setexcludeFields((java.util.Set<java.lang.String>) strSet91);
        builder29.includeFields = strSet91;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder28.includeFields((java.util.Set<java.lang.String>) strSet91);
        builder0.parentTypes = strSet91;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.riverName;
        boolean boolean16 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition8.isMongoSSLVerifyCertificate();
        boolean boolean18 = mongoDBRiverDefinition8.getstoreStatistics();
        java.lang.String str19 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl_verify_certificate" + "'", str19, "ssl_verify_certificate");
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        java.lang.Object obj11 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        docScoreSearchScript0.setNextScore((float) 27017);
        java.lang.Object obj15 = null;
        docScoreSearchScript0.setNextVar("mongodb-1638820218408", obj15);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + (-1) + "'", obj11, (-1));
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        builder2.indexName = "servers";
        builder2.mongoLocalUser = "script_type";
        int int10 = builder2.socketTimeout;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder2.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.riverIndexName("store_statistics");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder2.mongoClientOptions(mongoClientOptions14);
        int int16 = builder15.throttleSize;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.statisticsTypeName;
        boolean boolean8 = builder0.advancedTransformation;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        docScoreSearchScript0.setNextScore((float) '4');
        docScoreSearchScript0.setNextScore((float) (-1L));
        docScoreSearchScript0.setNextScore((float) 8);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString15();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218424" + "'", str1, "mongodb-1638820218424");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218363" + "'", str3, "mongodb-1638820218363");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820218264" + "'", str5, "mongodb-1638820218264");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218299" + "'", str8, "mongodb-1638820218299");
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoCollection();
        boolean boolean17 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition8.mongoAdminUser;
        java.lang.String str19 = mongoDBRiverDefinition8.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition8.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "import_all_collections" + "'", str19, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getmongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverName("flush_interval");
        java.lang.String str4 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("flush_interval");
        builder5.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoCollection("size");
        int int17 = builder13.getsocketTimeout();
        builder13.setmongoSecondaryReadPreference(false);
        builder13.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoOplogFilter(basicDBObject22);
        builder23.setmongoGridFS(false);
        builder23.mongoLocalUser = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder28.includeFields;
        boolean boolean32 = builder28.getmongoGridFS();
        java.util.Set<java.lang.String> strSet33 = builder28.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory39 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject41 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory39.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        builder36.setmongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray51 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet52);
        builder23.excludeFields = strSet52;
        builder5.excludeFields = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.includeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str59 = builder0.statisticsIndexName;
        builder0.typeName = "local";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder62.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet65 = builder64.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder64.mongoCollection("size");
        builder67.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder67);
        java.lang.String str71 = mongoDBRiverDefinition70.getTHROTTLE_SIZE_FIELD();
        java.lang.String str72 = mongoDBRiverDefinition70.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = mongoDBRiverDefinition70.getDEFAULT_BULK_SIZE();
        boolean boolean74 = mongoDBRiverDefinition70.getmongoGridFS();
        boolean boolean75 = mongoDBRiverDefinition70.mongoGridFS;
        boolean boolean76 = mongoDBRiverDefinition70.getmongoGridFS();
        java.lang.String str77 = mongoDBRiverDefinition70.riverIndexName;
        boolean boolean78 = mongoDBRiverDefinition70.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition70.getMongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject79);
        builder0.mongoAdminPassword = "credentials";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "throttle_size" + "'", str71, "throttle_size");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "admin" + "'", str72, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(basicDBObject79);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet7 = builder6.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.advancedTransformation(false);
        builder6.setimportAllCollections(false);
        builder6.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.parentTypes;
        boolean boolean18 = builder16.skipInitialImport;
        java.lang.String[] strArray49 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder16.setincludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder6.includeFields((java.util.Set<java.lang.String>) strSet50);
        builder0.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet60 = builder59.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.mongoCollection("size");
        org.elasticsearch.common.settings.Settings settings63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet67 = builder66.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder66.mongoCollection("size");
        builder69.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str73 = mongoDBRiverDefinition72.getTHROTTLE_SIZE_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition72.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = mongoDBRiverDefinition72.getDEFAULT_BULK_SIZE();
        boolean boolean76 = mongoDBRiverDefinition72.getmongoGridFS();
        boolean boolean77 = mongoDBRiverDefinition72.mongoGridFS;
        java.lang.String str78 = mongoDBRiverDefinition72.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition72.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings63, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder62.mongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.mongoCollectionFilter(basicDBObject79);
        java.lang.String str83 = builder82.getmongoCollection();
        builder82.setscript("collection");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "throttle_size" + "'", str73, "throttle_size");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "admin" + "'", str74, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "bulk_size" + "'", str78, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.isMongoGridFS();
        boolean boolean11 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition8.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.indexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder2.mongoAdminPassword("db");
        builder51.statisticsTypeName = "user";
        boolean boolean54 = builder51.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoCollectionFilter(basicDBObject15);
        builder0.mongoLocalPassword = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.advancedTransformation(true);
        boolean boolean27 = builder26.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder28.includeFields;
        boolean boolean32 = builder28.getmongoGridFS();
        java.util.Set<java.lang.String> strSet33 = builder28.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder28.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.connectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet40 = builder39.parentTypes;
        builder39.indexName = "disable_index_refresh";
        builder39.setriverName("ssl_verify_certificate");
        builder39.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = builder39.initialTimestamp;
        builder39.riverIndexName = "db";
        builder39.setscript("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str53 = builder52.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet57 = builder56.parentTypes;
        boolean boolean58 = builder56.skipInitialImport;
        java.lang.String[] strArray89 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        builder56.setincludeFields((java.util.Set<java.lang.String>) strSet90);
        builder52.parentTypes = strSet90;
        builder39.setexcludeFields((java.util.Set<java.lang.String>) strSet90);
        builder28.includeFields = strSet90;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder26.excludeFields((java.util.Set<java.lang.String>) strSet90);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNull(wildcardTimestamp47);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        java.util.Set<java.lang.String> strSet4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.includeFields(strSet4);
        java.lang.String str6 = builder2.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder2.getmongoClientOptions();
        java.lang.String str8 = builder2.getindexName();
        boolean boolean9 = builder2.disableIndexRefresh;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalPassword("drop_collection");
        builder2.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory20 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject22 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory20.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        builder17.setmongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder17.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject32 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript33 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        builder27.setmongoCollectionFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray42 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder27.setparentTypes((java.util.Set<java.lang.String>) strSet43);
        builder26.parentTypes = strSet43;
        builder12.parentTypes = strSet43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder12.scriptType("collection");
        builder12.setthrottleSize((-1));
        java.lang.String str52 = builder12.getmongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(executableScript33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("initial_timestamp", "mongodb-1638820218424");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?mongodb-1638820218424?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        builder0.socketTimeout = (short) -1;
        boolean boolean10 = builder0.storeStatistics;
        java.lang.String str11 = builder0.getincludeCollection();
        builder0.connectTimeout = (byte) 0;
        java.lang.String str14 = builder0.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.importAllCollections;
        java.lang.String str12 = mongoDBRiverDefinition8.getUSER_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        builder2.setmongoGridFS(true);
        boolean boolean6 = builder2.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder2.disableIndexRefresh(false);
        java.lang.String str9 = builder2.getmongoLocalPassword();
        builder2.setindexName("script");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        boolean boolean14 = mongoDBRiverDefinition8.isMongoUseSSL();
        int int15 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str16 = mongoDBRiverDefinition8.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        java.lang.String str14 = mongoDBRiverDefinition8.getIndexName();
        boolean boolean15 = mongoDBRiverDefinition8.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "name" + "'", str14, "name");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet46);
        boolean boolean50 = builder2.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder2.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter53 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings54 = serializedObjectSupporter53.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings55 = serializedObjectSupporter53.deserializeObjectRiverSettings7();
        java.lang.String str56 = serializedObjectSupporter53.deserializeObjectString7();
        builder2.serializedObjectSupporter = serializedObjectSupporter53;
        builder2.importAllCollections = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(riverSettings54);
        org.junit.Assert.assertNull(riverSettings55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "mongodb-1638820218326" + "'", str56, "mongodb-1638820218326");
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        builder2.statisticsIndexName = "store_statistics";
        builder2.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.includeCollection("mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder0.riverIndexName;
        boolean boolean4 = builder0.skipInitialImport;
        java.util.Set<java.lang.String> strSet5 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.disableIndexRefresh(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString13();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218408" + "'", str4, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
        org.junit.Assert.assertNull(riverSettings6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_river" + "'", str7, "_river");
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.riverName;
        boolean boolean16 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str18 = mongoDBRiverDefinition8.mongoDb;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition8.getScript();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition8.getTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoOplogFilter(basicDBObject11);
        java.lang.String str14 = builder0.riverName;
        java.util.Set<java.lang.String> strSet15 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet19 = builder18.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.mongoCollection("size");
        int int22 = builder18.getsocketTimeout();
        builder18.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder18.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.mongoUseSSL(true);
        builder28.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder33.advancedTransformation(false);
        builder33.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder33.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet45 = builder44.parentTypes;
        boolean boolean46 = builder44.skipInitialImport;
        java.lang.String[] strArray77 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        builder44.setincludeFields((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder33.includeFields((java.util.Set<java.lang.String>) strSet78);
        builder28.setincludeFields((java.util.Set<java.lang.String>) strSet78);
        builder0.excludeFields = strSet78;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition8.initialTimestamp;
        boolean boolean16 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoAdminUser();
        java.lang.String str18 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        java.util.Set<java.lang.String> strSet9 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.dropCollection(false);
        java.lang.String str12 = builder11.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.connectTimeout(8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        builder0.setriverIndexName("flush_interval");
        java.lang.String str10 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.disableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeCollection("skip_initial_import");
        builder0.storeStatistics = false;
        java.lang.String str17 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gridfs" + "'", str15, "gridfs");
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getPORT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition8.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "port" + "'", str17, "port");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        boolean boolean16 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str18 = mongoDBRiverDefinition8.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "filter" + "'", str18, "filter");
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        builder2.setriverName("ssl_verify_certificate");
        builder2.setmongoSecondaryReadPreference(true);
        java.lang.String str10 = builder2.getmongoCollection();
        builder2.setriverName("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        boolean boolean14 = mongoDBRiverDefinition13.dropCollection;
        int int15 = mongoDBRiverDefinition13.getThrottleSize();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition13.getMongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setthrottleSize((-1));
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder12.storeStatistics(false);
        builder19.setmongoUseSSL(true);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject26 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject30 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject33 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        builder19.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder19.disableIndexRefresh(true);
        java.lang.String str41 = builder19.getriverName();
        builder19.setmongoAdminPassword("include_collection");
        java.lang.String str44 = builder19.scriptType;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serverAddressList17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript34);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        java.lang.String str12 = mongoDBRiverDefinition8.getSTORE_STATISTICS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getIncludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition8.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "store_statistics" + "'", str12, "store_statistics");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition8.includeFields;
        java.lang.String str10 = mongoDBRiverDefinition8.statisticsIndexName;
        int int11 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        java.lang.String str12 = mongoDBRiverDefinition8.script;
        boolean boolean13 = mongoDBRiverDefinition8.isDropCollection();
        java.lang.String str14 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "collection" + "'", str14, "collection");
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        builder15.mongoAdminPassword = "name";
        java.lang.String str20 = builder15.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet24 = builder23.parentTypes;
        boolean boolean25 = builder23.skipInitialImport;
        java.lang.String[] strArray56 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder23.setincludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder15.includeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder13.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder0.includeFields = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder0.mongoSecondaryReadPreference(true);
        java.lang.String str65 = builder0.mongoAdminPassword;
        java.lang.String str66 = builder0.riverIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition8.includeCollection;
        boolean boolean13 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        boolean boolean14 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str15 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        boolean boolean16 = mongoDBRiverDefinition8.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "socket_timeout" + "'", str11, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        builder45.mongoLocalPassword = "credentials";
        int int48 = builder45.connectTimeout;
        builder45.mongoAdminUser = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder45.scriptType("bulk_size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        builder45.mongoLocalPassword = "credentials";
        builder45.setincludeCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet53 = builder50.includeFields;
        boolean boolean54 = builder50.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder50.mongoLocalUser("gridfs");
        java.util.Set<java.lang.String> strSet57 = builder50.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.advancedTransformation(false);
        builder58.mongoAdminPassword = "name";
        java.lang.String str63 = builder58.mongoCollection;
        java.lang.String str64 = builder58.includeCollection;
        java.lang.String str65 = builder58.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory69 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject71 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript72 = docScoreNativeScriptFactory69.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject71);
        builder66.setmongoCollectionFilter(basicDBObject71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder66.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder76.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory79 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject81 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript82 = docScoreNativeScriptFactory79.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject81);
        builder76.setmongoCollectionFilter(basicDBObject81);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder76.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray91 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet92 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet92, strArray91);
        builder76.setparentTypes((java.util.Set<java.lang.String>) strSet92);
        builder75.parentTypes = strSet92;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder58.includeFields((java.util.Set<java.lang.String>) strSet92);
        builder50.parentTypes = strSet92;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder45.includeFields((java.util.Set<java.lang.String>) strSet92);
        boolean boolean99 = builder45.getdropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertNotNull(executableScript72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(executableScript82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        org.elasticsearch.common.settings.Settings settings2 = null;
        com.mongodb.BasicDBObject basicDBObject4 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.river.RiverSettings riverSettings5 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject4);
        org.elasticsearch.script.ScriptService scriptService6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("import_all_collections", "mongodb-1638820218449", riverSettings5, scriptService6);
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition7.getExcludeFields();
        java.lang.String str9 = mongoDBRiverDefinition7.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "localhost" + "'", str9, "localhost");
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.typeName;
        java.lang.String str13 = mongoDBRiverDefinition8.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getDB_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "import_all_collections" + "'", str13, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "db" + "'", str14, "db");
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.skipInitialImport(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getRiverIndexName();
        int int13 = mongoDBRiverDefinition8.getSocketTimeout();
        java.lang.String str14 = mongoDBRiverDefinition8.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_bulk_requests" + "'", str14, "concurrent_bulk_requests");
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        int int13 = mongoDBRiverDefinition8.throttleSize;
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition8.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str16 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition8.getMongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.lang.String str51 = builder2.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.mongoGridFS(false);
        builder2.setdisableIndexRefresh(true);
        com.mongodb.BasicDBObject basicDBObject56 = builder2.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(basicDBObject56);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        boolean boolean14 = mongoDBRiverDefinition8.advancedTransformation;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.size" + "'", str13, "null.size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        java.lang.String str33 = builder2.getmongoAdminPassword();
        builder2.typeName = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder2.scriptType("exclude_fields");
        builder2.typeName = "concurrent_requests";
        builder2.setriverIndexName("");
        builder2.disableIndexRefresh = true;
        java.lang.String str44 = builder2.riverName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        java.util.Set<java.lang.String> strSet4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.includeFields(strSet4);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder5.initialTimestamp;
        builder5.setconnectTimeout(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str12 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gridfs" + "'", str12, "gridfs");
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("index", "type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?type? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.util.Set<java.lang.String> strSet6 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("parent_types");
        builder0.mongoLocalPassword = "mongodb-1638820218299";
        java.util.Set<java.lang.String> strSet11 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoDb("script_type");
        builder13.setmongoLocalUser("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.statisticsTypeName("host");
        boolean boolean18 = builder13.importAllCollections;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject8 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject12 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript13 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoCollectionFilter(basicDBObject15);
        builder0.mongoLocalPassword = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.storeStatistics(false);
        builder22.statisticsIndexName = "_river";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder22.disableIndexRefresh(false);
        builder22.setstatisticsIndexName("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet32 = builder31.parentTypes;
        java.lang.String str33 = builder31.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory34 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject36 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript37 = docScoreNativeScriptFactory34.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory38 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject40 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript41 = docScoreNativeScriptFactory38.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        com.mongodb.BasicDBObject basicDBObject43 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory38.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject43);
        org.elasticsearch.script.ExecutableScript executableScript45 = docScoreNativeScriptFactory34.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject43);
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory47 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject49 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript50 = docScoreNativeScriptFactory47.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject49);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject53 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript54 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject53);
        com.mongodb.BasicDBObject basicDBObject56 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript57 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory47.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory34.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder31.mongoOplogFilter(basicDBObject56);
        java.lang.String str62 = builder31.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject63 = builder31.mongoOplogFilter;
        builder22.setmongoCollectionFilter(basicDBObject63);
        com.mongodb.MongoClientOptions mongoClientOptions65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder22.mongoClientOptions(mongoClientOptions65);
        builder22.setmongoCollection("host");
        boolean boolean69 = builder22.getdropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(executableScript13);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(executableScript37);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(executableScript41);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNotNull(executableScript45);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(executableScript50);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(executableScript54);
        org.junit.Assert.assertNotNull(basicDBObject56);
        org.junit.Assert.assertNotNull(executableScript57);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(executableScript60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean16 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str17 = mongoDBRiverDefinition8.getSIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getStatisticsIndexName();
        java.lang.String str19 = mongoDBRiverDefinition8.script;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("script", "_river");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?_river?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean13 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean14 = mongoDBRiverDefinition8.isDropCollection();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        int int10 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminPassword();
        int int12 = mongoDBRiverDefinition8.throttleSize;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str14 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "localhost" + "'", str14, "localhost");
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        int int10 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminPassword();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.getParentTypes();
        int int14 = mongoDBRiverDefinition8.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition8.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        int int12 = mongoDBRiverDefinition8.getThrottleSize();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString17();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter13;
        java.lang.String str17 = mongoDBRiverDefinition8.riverName;
        boolean boolean18 = mongoDBRiverDefinition8.isDropCollection();
        java.lang.String str19 = mongoDBRiverDefinition8.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218387" + "'", str14, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218449" + "'", str15, "mongodb-1638820218449");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_bulk_requests" + "'", str19, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondary_read_preference" + "'", str20, "secondary_read_preference");
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        builder0.setdropCollection(false);
        java.lang.String str6 = builder0.mongoLocalUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.socketTimeout((int) (byte) -1);
        builder7.socketTimeout = (short) 10;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition8.getlogger();
        boolean boolean13 = mongoDBRiverDefinition8.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition8.indexName;
        java.lang.String str16 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        java.lang.String str17 = mongoDBRiverDefinition8.getDB_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "name" + "'", str15, "name");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "socket_timeout" + "'", str16, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "db" + "'", str17, "db");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.mongoDb;
        builder0.settypeName("mongodb-1638820218326");
        builder0.mongoDb = "skip_initial_import";
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoCollectionFilter;
        builder0.setscript("mongodb-1638820218408");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString13();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings1();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218387" + "'", str3, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218449" + "'", str4, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218408" + "'", str6, "mongodb-1638820218408");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_river" + "'", str8, "_river");
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218264" + "'", str3, "mongodb-1638820218264");
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition8.getIMPORT_ALL_COLLECTIONS_FIELD();
        int int12 = mongoDBRiverDefinition8.getThrottleSize();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoDb();
        java.lang.String str14 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "skip_initial_import" + "'", str14, "skip_initial_import");
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.getmongoUseSSL();
        int int16 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "admin" + "'", str17, "admin");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.settypeName("initial_timestamp");
        int int9 = builder2.socketTimeout;
        java.lang.String str10 = builder2.getscript();
        builder2.settypeName("");
        builder2.mongoGridFS = true;
        builder2.setmongoLocalPassword("servers");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition8.includeFields;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition8.getMongoServers();
        java.lang.String str16 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str17 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalPassword("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder9.getmongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        boolean boolean12 = mongoDBRiverDefinition8.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition8.mongoLocalUser;
        java.lang.String str14 = mongoDBRiverDefinition8.getStatisticsIndexName();
        java.lang.String str15 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_fields" + "'", str15, "include_fields");
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.mongoLocalPassword;
        boolean boolean14 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str15 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject13 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript14 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        builder8.setmongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray23 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder30.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = builder30.mongoServers;
        builder27.mongoServers = serverAddressList32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.skipInitialImport(true);
        builder35.mongoCollection = "disable_index_refresh";
        builder35.throttleSize = 10;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(executableScript14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        java.util.Set<java.lang.String> strSet4 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.includeFields(strSet4);
        builder2.setindexName("mongodb-1638820218449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        builder8.mongoAdminPassword = "name";
        java.lang.String str13 = builder8.mongoCollection;
        java.util.Set<java.lang.String> strSet14 = builder8.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder8.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet19 = builder16.includeFields;
        boolean boolean20 = builder16.getmongoGridFS();
        java.util.Set<java.lang.String> strSet21 = builder16.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder16.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory27 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject29 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory27.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        builder24.setmongoCollectionFilter(basicDBObject29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray39 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder8.includeFields((java.util.Set<java.lang.String>) strSet40);
        builder2.includeFields = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.advancedTransformation(false);
        builder46.mongoAdminPassword = "name";
        java.lang.String str51 = builder46.mongoCollection;
        java.lang.String str52 = builder46.includeCollection;
        java.lang.String str53 = builder46.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory57 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject59 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript60 = docScoreNativeScriptFactory57.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject59);
        builder54.setmongoCollectionFilter(basicDBObject59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory67 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject69 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript70 = docScoreNativeScriptFactory67.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        builder64.setmongoCollectionFilter(basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder64.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray79 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet80);
        builder63.parentTypes = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder46.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder2.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition86 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder2.statisticsTypeName("mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertNotNull(executableScript60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(executableScript70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        builder2.setmongoGridFS(true);
        java.lang.String str6 = builder2.getmongoDb();
        boolean boolean7 = builder2.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet11 = builder2.getparentTypes();
        java.lang.String str12 = builder2.mongoLocalUser;
        builder2.setmongoDb("port");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getFILTER_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition8.initialTimestamp;
        int int14 = mongoDBRiverDefinition8.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "filter" + "'", str11, "filter");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        boolean boolean36 = builder35.getdisableIndexRefresh();
        java.lang.String str37 = builder35.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = builder35.build();
        java.lang.String str39 = mongoDBRiverDefinition38.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str40 = mongoDBRiverDefinition38.mongoDb;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "disable_index_refresh" + "'", str39, "disable_index_refresh");
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        java.lang.String str8 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoDb("");
        builder10.mongoGridFS = true;
        java.lang.String str13 = builder10.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.importAllCollections(false);
        builder15.statisticsIndexName = "credentials";
        boolean boolean18 = builder15.skipInitialImport;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.getInitialTimestamp();
        boolean boolean11 = mongoDBRiverDefinition8.getimportAllCollections();
        int int12 = mongoDBRiverDefinition8.getSocketTimeout();
        boolean boolean13 = mongoDBRiverDefinition8.getdisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str16 = serializedObjectSupporter15.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter15.deserializeObjectRiverSettings2();
        java.lang.String str18 = serializedObjectSupporter15.deserializeObjectString9();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter15;
        java.lang.String str20 = mongoDBRiverDefinition8.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition8.getMongoClientOptions();
        boolean boolean23 = mongoDBRiverDefinition8.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb-1638820218387" + "'", str16, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218363" + "'", str18, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "concurrent_requests" + "'", str20, "concurrent_requests");
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        boolean boolean12 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.isAdvancedTransformation();
        java.lang.String str16 = mongoDBRiverDefinition8.getRiverName();
        boolean boolean17 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "drop_collection" + "'", str14, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder2.getinitialTimestamp();
        builder2.scriptType = "servers";
        builder2.indexName = "advanced_transformation";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.scriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.includeCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoCollection("store_statistics");
        builder13.throttleSize = 0;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("throttle_size", "_river");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?_river?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet11 = builder10.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoCollection("size");
        builder13.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str17 = mongoDBRiverDefinition16.getTHROTTLE_SIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition16.getGRIDFS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition16.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition16.getPORT_FIELD();
        int int21 = mongoDBRiverDefinition16.throttleSize;
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition16.mongoCollectionFilter;
        java.lang.Object obj23 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet27 = builder24.includeFields;
        boolean boolean28 = builder24.getmongoGridFS();
        builder24.setdropCollection(false);
        java.lang.Object obj31 = docScoreSearchScript0.unwrap((java.lang.Object) builder24);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gridfs" + "'", str18, "gridfs");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script_type" + "'", str19, "script_type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "port" + "'", str20, "port");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{ }");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{ }");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{ }");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        builder9.setsocketTimeout((int) (byte) 100);
        builder9.setadvancedTransformation(false);
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder9.getmongoServers();
        java.util.Set<java.lang.String> strSet15 = builder9.includeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        org.elasticsearch.common.unit.TimeValue timeValue11 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean12 = mongoDBRiverDefinition8.isDropCollection();
        java.lang.String str13 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition8.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disable_index_refresh" + "'", str14, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.settypeName("initial_timestamp");
        builder2.setriverName("size");
        java.util.Set<java.lang.String> strSet11 = builder2.excludeFields;
        java.lang.String str12 = builder2.getmongoDb();
        java.lang.String str13 = builder2.getriverIndexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder2.mongoServers;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = builder2.serializedObjectSupporter;
        java.util.Set<java.lang.String> strSet16 = builder2.getexcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoAdminUser();
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoDb();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition8.excludeFields;
        java.lang.String str18 = mongoDBRiverDefinition8.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "drop_collection" + "'", str13, "drop_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondary_read_preference" + "'", str14, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        builder0.setimportAllCollections(true);
        builder0.mongoLocalPassword = "_river";
        java.util.Set<java.lang.String> strSet12 = builder0.parentTypes;
        builder0.setconnectTimeout(8);
        builder0.setdropCollection(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory1 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript4 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject3);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        com.mongodb.BasicDBObject basicDBObject10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        com.mongodb.BasicDBObject basicDBObject23 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings13, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.elasticsearch.river.RiverSettings riverSettings28 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(executableScript4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(executableScript27);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        boolean boolean12 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.getskipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition8.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "drop_collection" + "'", str14, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder2.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.mongoUseSSL(false);
        builder6.mongoLocalUser = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder6.dropCollection(false);
        builder10.importAllCollections = true;
        com.mongodb.BasicDBObject basicDBObject13 = builder10.getmongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        boolean boolean8 = builder5.mongoUseSSL;
        java.lang.String str9 = builder5.gettypeName();
        int int10 = builder5.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.mongoSSLVerifyCertificate(false);
        builder12.setthrottleSize(32);
        builder12.setconnectTimeout(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        builder2.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoOplogFilter(basicDBObject11);
        builder12.setmongoGridFS(false);
        builder12.mongoLocalUser = "actions";
        java.lang.String str17 = builder12.getstatisticsIndexName();
        java.lang.String str18 = builder12.riverIndexName;
        builder12.statisticsTypeName = "throttle_size";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) (-1L));
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "admin");
        java.lang.Object obj7 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        docScoreSearchScript0.setNextScore((float) (byte) 100);
        java.lang.Object obj11 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoCollection("size");
        builder19.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        java.lang.String str23 = mongoDBRiverDefinition22.getTypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition22.getMongoServers();
        java.lang.Object obj25 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition22);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter26 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings27 = serializedObjectSupporter26.deserializeObjectRiverSettings4();
        java.lang.String str28 = serializedObjectSupporter26.deserializeObjectString16();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString2();
        java.lang.String str30 = serializedObjectSupporter26.deserializeObjectString18();
        mongoDBRiverDefinition22.serializedObjectSupporter = serializedObjectSupporter26;
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1L) + "'", obj2, (-1L));
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + false + "'", obj7, false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + (-1) + "'", obj11, (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(serverAddressList24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNull(riverSettings27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_river" + "'", str28, "_river");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_river" + "'", str29, "_river");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_river" + "'", str30, "_river");
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setmongoAdminUser("disable_index_refresh");
        java.lang.String str8 = builder5.indexName;
        builder5.setmongoCollection("disable_index_refresh");
        builder5.mongoSSLVerifyCertificate = true;
        boolean boolean13 = builder5.getadvancedTransformation();
        boolean boolean14 = builder5.mongoSecondaryReadPreference;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        java.lang.String[] strArray35 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder2.setincludeFields((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = builder2.dropCollection;
        builder2.riverIndexName = "mongodb-1638820218299";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet45 = builder44.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder44.mongoCollection("size");
        int int48 = builder44.getsocketTimeout();
        builder44.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder44.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet56 = builder55.parentTypes;
        boolean boolean57 = builder55.skipInitialImport;
        java.lang.String[] strArray88 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder55.setincludeFields((java.util.Set<java.lang.String>) strSet89);
        builder52.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder2.includeFields((java.util.Set<java.lang.String>) strSet89);
        builder2.mongoLocalUser = "user";
        boolean boolean96 = builder2.importAllCollections;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "parent_types" + "'", str12, "parent_types");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "flush_interval" + "'", str13, "flush_interval");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        java.lang.String str17 = builder12.getindexName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet22 = builder21.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.mongoCollection("size");
        builder24.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.includeCollection("throttle_size");
        boolean boolean30 = builder29.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.advancedTransformation(false);
        builder31.mongoAdminPassword = "name";
        java.lang.String str36 = builder31.mongoCollection;
        java.util.Set<java.lang.String> strSet37 = builder31.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp38 = builder31.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet42 = builder39.includeFields;
        boolean boolean43 = builder39.getmongoGridFS();
        java.util.Set<java.lang.String> strSet44 = builder39.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder39.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder47.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory50 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject52 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript53 = docScoreNativeScriptFactory50.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject52);
        builder47.setmongoCollectionFilter(basicDBObject52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder47.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray62 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        builder47.setparentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder39.parentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder31.includeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder29.includeFields((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder12.includeFields((java.util.Set<java.lang.String>) strSet63);
        builder69.mongoSSLVerifyCertificate = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(wildcardTimestamp38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(executableScript53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        builder2.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoOplogFilter(basicDBObject11);
        builder12.statisticsIndexName = "mongodb-1638820218424";
        int int15 = builder12.socketTimeout;
        java.lang.String str16 = builder12.getmongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        builder2.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoOplogFilter(basicDBObject11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet18 = builder17.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoCollection("size");
        builder20.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.includeCollection("throttle_size");
        boolean boolean26 = builder25.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.advancedTransformation(false);
        builder27.mongoAdminPassword = "name";
        java.lang.String str32 = builder27.mongoCollection;
        java.util.Set<java.lang.String> strSet33 = builder27.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = builder27.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet38 = builder35.includeFields;
        boolean boolean39 = builder35.getmongoGridFS();
        java.util.Set<java.lang.String> strSet40 = builder35.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder35.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory46 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject48 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript49 = docScoreNativeScriptFactory46.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject48);
        builder43.setmongoCollectionFilter(basicDBObject48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder43.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray58 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder27.includeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder25.includeFields((java.util.Set<java.lang.String>) strSet59);
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet59);
        com.mongodb.BasicDBObject basicDBObject66 = builder2.getmongoOplogFilter();
        builder2.mongoGridFS = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(executableScript49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(basicDBObject66);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str16 = mongoDBRiverDefinition8.mongoCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_bulk_requests" + "'", str13, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        builder2.setskipInitialImport(true);
        builder2.setmongoSSLVerifyCertificate(true);
        java.lang.String str13 = builder2.riverName;
        boolean boolean14 = builder2.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        java.lang.String str35 = builder34.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalPassword("");
        java.lang.String str38 = builder37.getmongoLocalPassword();
        boolean boolean39 = builder37.getadvancedTransformation();
        builder37.skipInitialImport = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        builder12.setmongoGridFS(false);
        java.lang.String str15 = builder12.riverIndexName;
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder12.setmongoClientOptions(mongoClientOptions16);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        builder0.importAllCollections = false;
        builder0.riverIndexName = "parent_types";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp50 = builder0.getinitialTimestamp();
        java.lang.String str51 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter52 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(wildcardTimestamp50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(serializedObjectSupporter52);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.mongoLocalPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        builder10.mongoAdminPassword = "name";
        java.lang.String str15 = builder10.mongoCollection;
        java.util.Set<java.lang.String> strSet16 = builder10.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder10.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet21 = builder20.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.advancedTransformation(false);
        builder22.mongoAdminPassword = "name";
        java.lang.String str27 = builder22.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder30.parentTypes;
        boolean boolean32 = builder30.skipInitialImport;
        java.lang.String[] strArray63 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        builder30.setincludeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder22.includeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet64);
        builder10.includeFields = strSet64;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder2.parentTypes((java.util.Set<java.lang.String>) strSet64);
        builder70.dropCollection = true;
        org.elasticsearch.common.settings.Settings settings73 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder74.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet77 = builder76.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.mongoCollection("size");
        builder79.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        java.lang.String str83 = mongoDBRiverDefinition82.getTHROTTLE_SIZE_FIELD();
        java.lang.String str84 = mongoDBRiverDefinition82.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue85 = mongoDBRiverDefinition82.getDEFAULT_BULK_SIZE();
        boolean boolean86 = mongoDBRiverDefinition82.getmongoGridFS();
        boolean boolean87 = mongoDBRiverDefinition82.mongoGridFS;
        boolean boolean88 = mongoDBRiverDefinition82.getmongoGridFS();
        java.lang.String str89 = mongoDBRiverDefinition82.riverIndexName;
        boolean boolean90 = mongoDBRiverDefinition82.isMongoSSLVerifyCertificate();
        com.mongodb.BasicDBObject basicDBObject91 = mongoDBRiverDefinition82.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings92 = new org.elasticsearch.river.RiverSettings(settings73, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject91);
        builder70.setmongoCollectionFilter(basicDBObject91);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "throttle_size" + "'", str83, "throttle_size");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "admin" + "'", str84, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(basicDBObject91);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet5 = builder4.parentTypes;
        boolean boolean6 = builder4.skipInitialImport;
        java.lang.String[] strArray37 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder4.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        builder0.parentTypes = strSet38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.throttleSize(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.mongoSecondaryReadPreference(false);
        builder45.storeStatistics = true;
        java.lang.String str48 = builder45.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.typeName;
        java.lang.String str14 = mongoDBRiverDefinition8.statisticsTypeName;
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean16 = mongoDBRiverDefinition8.getskipInitialImport();
        java.lang.String str17 = mongoDBRiverDefinition8.getSIZE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        builder6.setmongoAdminUser("throttle_size");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder6.mongoClientOptions = mongoClientOptions9;
        builder6.setriverIndexName("script_type");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter13.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter13.deserializeObjectRiverSettings5();
        builder6.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings7();
        org.elasticsearch.river.RiverSettings riverSettings18 = serializedObjectSupporter13.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(riverSettings14);
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertNull(riverSettings18);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.disableIndexRefresh(true);
        boolean boolean15 = builder14.advancedTransformation;
        int int16 = builder14.throttleSize;
        java.lang.String str17 = builder14.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = builder14.build();
        int int19 = mongoDBRiverDefinition18.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1000 + "'", int19 == 1000);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        java.lang.String str35 = builder34.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder34.mongoLocalPassword("");
        builder37.mongoAdminPassword = "type";
        builder37.socketTimeout = (short) -1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder37.scriptType("mongodb-1638820217755");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        builder2.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject11 = builder2.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.advancedTransformation(true);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = builder2.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        builder2.mongoAdminPassword = "port";
        java.lang.String str8 = builder2.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.typeName("flush_interval");
        java.lang.String str11 = builder10.statisticsTypeName;
        java.lang.String str12 = builder10.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str15 = mongoDBRiverDefinition8.getStatisticsIndexName();
        boolean boolean16 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition8.getRiverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory11 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject13 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript14 = docScoreNativeScriptFactory11.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        builder8.setmongoCollectionFilter(basicDBObject13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray23 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder8.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder30.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = builder30.mongoServers;
        builder27.mongoServers = serverAddressList32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.skipInitialImport(true);
        java.lang.String str36 = builder27.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder27.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(executableScript14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218299" + "'", str7, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings8);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("options", "script");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str12 = mongoDBRiverDefinition8.mongoAdminPassword;
        java.lang.String str13 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.advancedTransformation;
        int int15 = mongoDBRiverDefinition8.getSocketTimeout();
        boolean boolean16 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean17 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition8.getStatisticsIndexName();
        int int19 = mongoDBRiverDefinition8.getConnectTimeout();
        boolean boolean20 = mongoDBRiverDefinition8.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "actions" + "'", str13, "actions");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString16();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString18();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString18();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_river" + "'", str2, "_river");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb-1638820218299" + "'", str4, "mongodb-1638820218299");
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverName("flush_interval");
        boolean boolean4 = builder3.getimportAllCollections();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter5 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString11();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString17();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings9 = serializedObjectSupporter5.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings10 = serializedObjectSupporter5.deserializeObjectRiverSettings6();
        org.elasticsearch.river.RiverSettings riverSettings11 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        java.lang.String str12 = serializedObjectSupporter5.deserializeObjectString18();
        builder3.serializedObjectSupporter = serializedObjectSupporter5;
        org.elasticsearch.river.RiverSettings riverSettings14 = serializedObjectSupporter5.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb-1638820218449" + "'", str7, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb-1638820218326" + "'", str8, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings9);
        org.junit.Assert.assertNull(riverSettings10);
        org.junit.Assert.assertNull(riverSettings11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_river" + "'", str12, "_river");
        org.junit.Assert.assertNull(riverSettings14);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        int int11 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition8.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.size" + "'", str14, "null.size");
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet7 = builder6.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.advancedTransformation(false);
        builder6.setimportAllCollections(false);
        builder6.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.parentTypes;
        boolean boolean18 = builder16.skipInitialImport;
        java.lang.String[] strArray49 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder16.setincludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder6.includeFields((java.util.Set<java.lang.String>) strSet50);
        builder0.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet60 = builder59.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder59.mongoCollection("size");
        org.elasticsearch.common.settings.Settings settings63 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet67 = builder66.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder66.mongoCollection("size");
        builder69.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder69);
        java.lang.String str73 = mongoDBRiverDefinition72.getTHROTTLE_SIZE_FIELD();
        java.lang.String str74 = mongoDBRiverDefinition72.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = mongoDBRiverDefinition72.getDEFAULT_BULK_SIZE();
        boolean boolean76 = mongoDBRiverDefinition72.getmongoGridFS();
        boolean boolean77 = mongoDBRiverDefinition72.mongoGridFS;
        java.lang.String str78 = mongoDBRiverDefinition72.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject79 = mongoDBRiverDefinition72.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings63, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder62.mongoCollectionFilter(basicDBObject79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.mongoCollectionFilter(basicDBObject79);
        builder0.statisticsTypeName = "collection";
        builder0.setincludeCollection("null.size");
        java.lang.String str87 = builder0.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "throttle_size" + "'", str73, "throttle_size");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "admin" + "'", str74, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "bulk_size" + "'", str78, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        int int12 = mongoDBRiverDefinition8.getThrottleSize();
        boolean boolean13 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str14 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.getskipInitialImport();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition8.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        builder0.setimportAllCollections(true);
        builder0.mongoLocalPassword = "_river";
        java.util.Set<java.lang.String> strSet12 = builder0.parentTypes;
        java.lang.String str13 = builder0.mongoLocalUser;
        boolean boolean14 = builder0.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        builder32.setmongoLocalUser("local");
        builder32.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter37 = builder32.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder32.throttleSize((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(serializedObjectSupporter37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        int int11 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition8.scriptType;
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition8.mongoClientOptions;
        int int14 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        java.lang.String str7 = builder2.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.socketTimeout((int) (short) -1);
        builder2.setscriptType("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.mongoAdminPassword("exclude_fields");
        builder13.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.mongoLocalPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        builder10.mongoAdminPassword = "name";
        java.lang.String str15 = builder10.mongoCollection;
        java.util.Set<java.lang.String> strSet16 = builder10.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder10.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet21 = builder20.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.advancedTransformation(false);
        builder22.mongoAdminPassword = "name";
        java.lang.String str27 = builder22.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder30.parentTypes;
        boolean boolean32 = builder30.skipInitialImport;
        java.lang.String[] strArray63 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        builder30.setincludeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder22.includeFields((java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder20.excludeFields((java.util.Set<java.lang.String>) strSet64);
        builder10.includeFields = strSet64;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder2.parentTypes((java.util.Set<java.lang.String>) strSet64);
        int int71 = builder70.getthrottleSize();
        boolean boolean72 = builder70.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        java.lang.String str12 = mongoDBRiverDefinition8.getUSER_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder0.mongoClientOptions;
        boolean boolean6 = builder0.mongoUseSSL;
        builder0.mongoAdminPassword = "size";
        builder0.setstatisticsTypeName("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.getMongoCollectionFilter();
        java.lang.String str14 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.mongoDb;
        java.lang.String str16 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str17 = mongoDBRiverDefinition8.riverName;
        java.lang.String str18 = mongoDBRiverDefinition8.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "advanced_transformation" + "'", str14, "advanced_transformation");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_collection" + "'", str18, "include_collection");
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder2.statisticsIndexName("password");
        builder34.advancedTransformation = true;
        builder34.setmongoLocalUser("throttle_size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(true);
        builder0.socketTimeout = (short) -1;
        java.lang.String str10 = builder0.indexName;
        builder0.setmongoAdminPassword("import_all_collections");
        int int13 = builder0.throttleSize;
        java.lang.String str14 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        builder0.mongoCollectionFilter = basicDBObject27;
        builder0.setscriptType("flush_interval");
        com.mongodb.BasicDBObject basicDBObject34 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNull(basicDBObject34);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString16();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_river" + "'", str5, "_river");
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str17 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition8.getExcludeFields();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition8.getParentTypes();
        int int20 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str21 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "type" + "'", str17, "type");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script" + "'", str21, "script");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "exclude_fields" + "'", str22, "exclude_fields");
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.getadvancedTransformation();
        boolean boolean14 = mongoDBRiverDefinition8.dropCollection;
        boolean boolean15 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.script;
        java.lang.String str18 = mongoDBRiverDefinition8.getScriptType();
        boolean boolean19 = mongoDBRiverDefinition8.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str13 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str15 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.script;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition8.getIncludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "localhost" + "'", str12, "localhost");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "password" + "'", str15, "password");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        builder2.statisticsIndexName = "store_statistics";
        builder2.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.importAllCollections(false);
        java.lang.String str10 = builder9.riverName;
        java.lang.String str11 = builder9.getincludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        java.lang.String str13 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        int int14 = mongoDBRiverDefinition8.getSocketTimeout();
        java.lang.String str15 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.mongoAdminUser;
        boolean boolean17 = mongoDBRiverDefinition8.getmongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1000 + "'", int12 == 1000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "exclude_fields" + "'", str15, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        int int11 = mongoDBRiverDefinition8.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition8.mongoOplogFilter;
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.getMongoOplogFilter();
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean15 = mongoDBRiverDefinition8.isDropCollection();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition8.getlogger();
        java.lang.String str17 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.includeCollection;
        boolean boolean19 = mongoDBRiverDefinition8.advancedTransformation;
        java.lang.String str20 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "exclude_fields" + "'", str20, "exclude_fields");
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString17();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.elasticsearch.river.RiverSettings riverSettings4 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings5 = serializedObjectSupporter0.deserializeObjectRiverSettings6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        org.elasticsearch.river.RiverSettings riverSettings8 = serializedObjectSupporter0.deserializeObjectRiverSettings3();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString9();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str11 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "mongodb-1638820218387" + "'", str1, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mongodb-1638820218449" + "'", str2, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb-1638820218326" + "'", str3, "mongodb-1638820218326");
        org.junit.Assert.assertNull(riverSettings4);
        org.junit.Assert.assertNull(riverSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb-1638820218387" + "'", str6, "mongodb-1638820218387");
        org.junit.Assert.assertNull(riverSettings7);
        org.junit.Assert.assertNull(riverSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb-1638820218363" + "'", str9, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_river" + "'", str10, "_river");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_river" + "'", str11, "_river");
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.lang.String str51 = builder2.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.mongoGridFS(false);
        com.mongodb.MongoClientOptions mongoClientOptions54 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoClientOptions(mongoClientOptions54);
        int int56 = builder55.getsocketTimeout();
        java.lang.String str57 = builder55.mongoAdminPassword;
        java.lang.String str58 = builder55.getriverIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoLocalUser("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        builder8.mongoAdminPassword = "name";
        boolean boolean13 = builder8.mongoSecondaryReadPreference;
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        builder8.setdisableIndexRefresh(false);
        java.lang.String str17 = builder8.gettypeName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder8.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.mongoOplogFilter(basicDBObject27);
        com.mongodb.BasicDBObject basicDBObject32 = builder7.getmongoOplogFilter();
        java.lang.String str33 = builder7.getindexName();
        java.lang.String str34 = builder7.indexName;
        int int35 = builder7.getthrottleSize();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder7.mongoClientOptions;
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        builder7.mongoClientOptions = mongoClientOptions37;
        builder7.indexName = "type";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(mongoClientOptions36);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setmongoAdminUser("disable_index_refresh");
        java.lang.String str8 = builder5.indexName;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript19 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder5.mongoCollectionFilter(basicDBObject18);
        java.lang.String str22 = builder21.riverName;
        builder21.includeCollection = "mongodb-1638820218424";
        java.lang.String str25 = builder21.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = builder21.build();
        java.lang.String str27 = mongoDBRiverDefinition26.getBULK_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript19);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bulk" + "'", str27, "bulk");
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter14 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString11();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString6();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter14;
        boolean boolean18 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb-1638820218387" + "'", str15, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_river" + "'", str16, "_river");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.lang.String str12 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoAdminUser();
        boolean boolean14 = mongoDBRiverDefinition8.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "socket_timeout" + "'", str15, "socket_timeout");
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition8.mongoLocalPassword;
        java.lang.String str15 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "actions" + "'", str15, "actions");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl_verify_certificate" + "'", str16, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        boolean boolean33 = builder32.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.mongoLocalPassword("_river");
        java.lang.String str36 = builder35.getincludeCollection();
        com.mongodb.BasicDBObject basicDBObject37 = builder35.getmongoOplogFilter();
        boolean boolean38 = builder35.mongoGridFS;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "user");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) "filter");
        docScoreSearchScript0.setNextScore((float) 1L);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "user" + "'", obj2, "user");
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.excludeFields;
        boolean boolean14 = mongoDBRiverDefinition8.isMongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition8.isStoreStatistics();
        java.lang.String str16 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.mongoAdminPassword;
        boolean boolean18 = mongoDBRiverDefinition8.isMongoGridFS();
        boolean boolean19 = mongoDBRiverDefinition8.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "collection" + "'", str16, "collection");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getIncludeCollection();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter15 = null;
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter15;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        builder0.skipInitialImport = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.getmongoCollection();
        boolean boolean14 = builder12.getadvancedTransformation();
        boolean boolean15 = builder12.getmongoUseSSL();
        java.lang.String[] strArray20 = new java.lang.String[] { "secondary_read_preference", "null.size", "bulk_size", "index" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.includeFields((java.util.Set<java.lang.String>) strSet21);
        builder24.script = "exclude_fields";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        com.mongodb.BasicDBObject basicDBObject5 = builder2.getmongoOplogFilter();
        builder2.setscriptType("type");
        java.lang.String str8 = builder2.getmongoLocalPassword();
        builder2.setimportAllCollections(true);
        java.lang.String str11 = builder2.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.mongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "type" + "'", str11, "type");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        boolean boolean4 = builder0.getmongoGridFS();
        java.util.Set<java.lang.String> strSet5 = builder0.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder0.getmongoClientOptions();
        builder0.statisticsTypeName = "bulk_timeout";
        builder0.setmongoLocalUser("user");
        builder0.setscriptType("_river");
        builder0.setmongoAdminUser("store_statistics");
        builder0.setthrottleSize((int) (byte) 0);
        builder0.setriverName("filter");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(mongoClientOptions6);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverName("flush_interval");
        builder3.setdisableIndexRefresh(true);
        builder3.setmongoLocalPassword("connect_timeout");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "user");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) "filter");
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.getmongoCollection();
        builder9.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet16 = builder15.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.advancedTransformation(false);
        builder15.setimportAllCollections(false);
        builder15.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet26 = builder25.parentTypes;
        boolean boolean27 = builder25.skipInitialImport;
        java.lang.String[] strArray58 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder25.setincludeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder15.includeFields((java.util.Set<java.lang.String>) strSet59);
        builder9.parentTypes = strSet59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder9.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet69 = builder68.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder68.mongoCollection("size");
        org.elasticsearch.common.settings.Settings settings72 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet76 = builder75.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder75.mongoCollection("size");
        builder78.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder78);
        java.lang.String str82 = mongoDBRiverDefinition81.getTHROTTLE_SIZE_FIELD();
        java.lang.String str83 = mongoDBRiverDefinition81.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue84 = mongoDBRiverDefinition81.getDEFAULT_BULK_SIZE();
        boolean boolean85 = mongoDBRiverDefinition81.getmongoGridFS();
        boolean boolean86 = mongoDBRiverDefinition81.mongoGridFS;
        java.lang.String str87 = mongoDBRiverDefinition81.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject88 = mongoDBRiverDefinition81.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings89 = new org.elasticsearch.river.RiverSettings(settings72, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder71.mongoCollectionFilter(basicDBObject88);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder9.mongoCollectionFilter(basicDBObject88);
        docScoreSearchScript0.setNextVar("script_type", (java.lang.Object) builder9);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "user" + "'", obj2, "user");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "throttle_size" + "'", str82, "throttle_size");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "admin" + "'", str83, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "bulk_size" + "'", str87, "bulk_size");
        org.junit.Assert.assertNotNull(basicDBObject88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        boolean boolean14 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str15 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str16 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        boolean boolean17 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        java.lang.String str19 = mongoDBRiverDefinition8.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.size" + "'", str13, "null.size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "connect_timeout" + "'", str18, "connect_timeout");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        builder2.statisticsIndexName = "store_statistics";
        builder2.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.importAllCollections(false);
        boolean boolean10 = builder9.getadvancedTransformation();
        builder9.setdropCollection(false);
        java.util.Set<java.lang.String> strSet13 = builder9.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.mongoCollection("size");
        int int20 = builder16.getsocketTimeout();
        builder16.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.mongoUseSSL(true);
        builder26.setdisableIndexRefresh(false);
        java.lang.String str31 = builder26.getindexName();
        com.mongodb.BasicDBObject basicDBObject32 = builder26.getmongoCollectionFilter();
        boolean boolean33 = builder26.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet37 = builder36.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder36.mongoCollection("size");
        builder39.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.lang.String str43 = mongoDBRiverDefinition42.getTHROTTLE_SIZE_FIELD();
        java.lang.String str44 = mongoDBRiverDefinition42.getGRIDFS_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition42.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition42.getPORT_FIELD();
        int int47 = mongoDBRiverDefinition42.throttleSize;
        com.mongodb.BasicDBObject basicDBObject48 = mongoDBRiverDefinition42.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder26.mongoOplogFilter(basicDBObject48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder9.mongoOplogFilter(basicDBObject48);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "password" + "'", str31, "password");
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "throttle_size" + "'", str43, "throttle_size");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "gridfs" + "'", str44, "gridfs");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "script_type" + "'", str45, "script_type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "port" + "'", str46, "port");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.mongoCollectionFilter;
        java.lang.String str14 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoAdminUser();
        java.lang.String str16 = mongoDBRiverDefinition8.getTYPE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "throttle_size" + "'", str14, "throttle_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getPORT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "port" + "'", str17, "port");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ssl_verify_certificate" + "'", str18, "ssl_verify_certificate");
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSCRIPT_TYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str14 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str13 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition8.mongoCollectionFilter;
        boolean boolean19 = mongoDBRiverDefinition8.isMongoUseSSL();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition8.initialTimestamp;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardTimestamp20);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        boolean boolean10 = builder8.skipInitialImport;
        java.lang.String[] strArray41 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.includeFields((java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder0.mongoSSLVerifyCertificate(false);
        builder47.dropCollection = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("actions", "advanced_transformation");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?advanced_transformation?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        com.mongodb.BasicDBObject basicDBObject5 = builder2.getmongoOplogFilter();
        builder2.setscriptType("type");
        java.lang.String str8 = builder2.getmongoLocalPassword();
        builder2.advancedTransformation = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder2.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(basicDBObject5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.mongoLocalPassword;
        java.lang.String str14 = mongoDBRiverDefinition8.getSIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str16 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "port" + "'", str12, "port");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "size" + "'", str14, "size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "flush_interval" + "'", str17, "flush_interval");
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getGRIDFS_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        java.lang.String str12 = mongoDBRiverDefinition8.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.getIncludeFields();
        int int14 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition8.getExcludeFields();
        java.lang.String str16 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gridfs" + "'", str10, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings3 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertNull(riverSettings3);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        java.lang.String str13 = mongoDBRiverDefinition8.mongoCollection;
        java.lang.String str14 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.size" + "'", str11, "null.size");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "size" + "'", str13, "size");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index" + "'", str14, "index");
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean13 = mongoDBRiverDefinition8.isImportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.advancedTransformation(false);
        builder18.mongoAdminPassword = "name";
        java.lang.String str23 = builder18.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet27 = builder26.parentTypes;
        boolean boolean28 = builder26.skipInitialImport;
        java.lang.String[] strArray59 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder26.setincludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder18.includeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder16.excludeFields((java.util.Set<java.lang.String>) strSet60);
        java.lang.String str65 = builder16.mongoLocalPassword;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter66 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings67 = serializedObjectSupporter66.deserializeObjectRiverSettings4();
        org.elasticsearch.river.RiverSettings riverSettings68 = serializedObjectSupporter66.deserializeObjectRiverSettings7();
        java.lang.String str69 = serializedObjectSupporter66.deserializeObjectString7();
        java.lang.String str70 = serializedObjectSupporter66.deserializeObjectString13();
        java.lang.String str71 = serializedObjectSupporter66.deserializeObjectString16();
        builder16.serializedObjectSupporter = serializedObjectSupporter66;
        java.lang.String str73 = serializedObjectSupporter66.deserializeObjectString7();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter66;
        java.lang.String str75 = serializedObjectSupporter66.deserializeObjectString10();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(riverSettings67);
        org.junit.Assert.assertNull(riverSettings68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "mongodb-1638820218326" + "'", str69, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "mongodb-1638820218408" + "'", str70, "mongodb-1638820218408");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "_river" + "'", str71, "_river");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "mongodb-1638820218326" + "'", str73, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "_river" + "'", str75, "_river");
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean16 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str17 = mongoDBRiverDefinition8.getSIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getStatisticsIndexName();
        java.lang.String str19 = mongoDBRiverDefinition8.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_requests" + "'", str19, "concurrent_requests");
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("include_fields");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        boolean boolean12 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        java.lang.String str13 = mongoDBRiverDefinition8.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getSCRIPT_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition8.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_requests" + "'", str13, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl_verify_certificate" + "'", str16, "ssl_verify_certificate");
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.throttleSize((int) (byte) 1);
        builder8.mongoSecondaryReadPreference = false;
        java.lang.String str11 = builder8.getstatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        builder0.skipInitialImport = false;
        builder0.mongoLocalUser = "store_statistics";
        java.lang.String str14 = builder0.scriptType;
        java.lang.String str15 = builder0.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.elasticsearch.river.RiverSettings riverSettings6 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertNull(riverSettings6);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.util.Set<java.lang.String> strSet6 = builder0.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder0.getinitialTimestamp();
        builder0.scriptType = "mongodb-1638820218326";
        builder0.mongoGridFS = true;
        boolean boolean12 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.typeName("filter");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        builder0.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet7 = builder6.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.advancedTransformation(false);
        builder6.setimportAllCollections(false);
        builder6.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet17 = builder16.parentTypes;
        boolean boolean18 = builder16.skipInitialImport;
        java.lang.String[] strArray49 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder16.setincludeFields((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder6.includeFields((java.util.Set<java.lang.String>) strSet50);
        builder0.parentTypes = strSet50;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder0.mongoSSLVerifyCertificate(true);
        com.mongodb.MongoClientOptions mongoClientOptions57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoClientOptions(mongoClientOptions57);
        builder56.advancedTransformation = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        int int9 = builder2.socketTimeout;
        builder2.setmongoAdminUser("import_all_collections");
        boolean boolean12 = builder2.getmongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getCOLLECTION_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter12 = mongoDBRiverDefinition8.serializedObjectSupporter;
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter13 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString11();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString6();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter13.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings17 = serializedObjectSupporter13.deserializeObjectRiverSettings7();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter13;
        org.elasticsearch.river.RiverSettings riverSettings19 = serializedObjectSupporter13.deserializeObjectRiverSettings4();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "collection" + "'", str10, "collection");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "drop_collection" + "'", str11, "drop_collection");
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218387" + "'", str14, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_river" + "'", str15, "_river");
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertNull(riverSettings17);
        org.junit.Assert.assertNull(riverSettings19);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setmongoAdminUser("disable_index_refresh");
        java.lang.String str8 = builder5.indexName;
        builder5.setmongoCollection("disable_index_refresh");
        builder5.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder5.connectTimeout((int) (short) 10);
        builder14.riverName = "script_type";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.script = "skip_initial_import";
        builder5.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.scriptType("_river");
        builder5.setstatisticsTypeName("initial_timestamp");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet12 = builder11.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder11.mongoServers;
        builder2.setmongoServers(serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.throttleSize((int) (short) 1);
        builder16.mongoAdminPassword = "drop_collection";
        builder16.setstoreStatistics(true);
        boolean boolean21 = builder16.dropCollection;
        java.lang.String str22 = builder16.riverName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("mongodb-1638820218449", "drop_collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?drop_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.setmongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter11 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings12 = serializedObjectSupporter11.deserializeObjectRiverSettings4();
        java.lang.String str13 = serializedObjectSupporter11.deserializeObjectString16();
        java.lang.String str14 = serializedObjectSupporter11.deserializeObjectString16();
        org.elasticsearch.river.RiverSettings riverSettings15 = serializedObjectSupporter11.deserializeObjectRiverSettings8();
        org.elasticsearch.river.RiverSettings riverSettings16 = serializedObjectSupporter11.deserializeObjectRiverSettings5();
        java.lang.String str17 = serializedObjectSupporter11.deserializeObjectString8();
        java.lang.String str18 = serializedObjectSupporter11.deserializeObjectString3();
        builder0.serializedObjectSupporter = serializedObjectSupporter11;
        builder0.setindexName("name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(riverSettings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_river" + "'", str13, "_river");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_river" + "'", str14, "_river");
        org.junit.Assert.assertNull(riverSettings15);
        org.junit.Assert.assertNull(riverSettings16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_river" + "'", str17, "_river");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218264" + "'", str18, "mongodb-1638820218264");
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        builder0.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str7 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet11 = builder8.includeFields;
        boolean boolean12 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet13 = builder8.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject21 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        builder16.setmongoCollectionFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray31 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        builder16.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet39 = builder38.parentTypes;
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder38.mongoServers;
        builder35.mongoServers = serverAddressList40;
        builder0.mongoServers = serverAddressList40;
        java.lang.String str43 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.statisticsTypeName("disable_index_refresh");
        builder46.setthrottleSize((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        int int11 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition8.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.parentTypes;
        boolean boolean14 = mongoDBRiverDefinition8.mongoGridFS;
        boolean boolean15 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoCollection("initial_timestamp");
        boolean boolean3 = builder0.getskipInitialImport();
        builder0.riverName = "connect_timeout";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.riverName;
        boolean boolean12 = mongoDBRiverDefinition8.storeStatistics;
        java.lang.String str13 = mongoDBRiverDefinition8.statisticsTypeName;
        java.lang.String str14 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        int int16 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        boolean boolean17 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str18 = mongoDBRiverDefinition8.getScript();
        java.lang.String str19 = mongoDBRiverDefinition8.mongoLocalPassword;
        int int20 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "skip_initial_import" + "'", str14, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverName("flush_interval");
        builder3.importAllCollections = true;
        builder3.mongoLocalUser = "flush_interval";
        builder3.importAllCollections = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setmongoAdminUser("disable_index_refresh");
        builder5.mongoDb = "hi!";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        builder10.mongoAdminPassword = "name";
        builder10.mongoSSLVerifyCertificate = true;
        builder10.setmongoLocalPassword("throttle_size");
        builder10.settypeName("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder10.scriptType("filter");
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.advancedTransformation(false);
        builder25.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet37 = builder36.parentTypes;
        boolean boolean38 = builder36.skipInitialImport;
        java.lang.String[] strArray69 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder36.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder25.includeFields((java.util.Set<java.lang.String>) strSet70);
        builder22.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder5.riverIndexName("bulk");
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        builder77.setmongoClientOptions(mongoClientOptions78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean15 = mongoDBRiverDefinition8.getdropCollection();
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str17 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean19 = mongoDBRiverDefinition8.isAdvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean15 = mongoDBRiverDefinition8.dropCollection;
        java.lang.String str16 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getBULK_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "exclude_fields" + "'", str16, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk" + "'", str17, "bulk");
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getUSER_FIELD();
        boolean boolean15 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str16 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition8.getScript();
        int int19 = mongoDBRiverDefinition8.socketTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "drop_collection" + "'", str13, "drop_collection");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "flush_interval" + "'", str16, "flush_interval");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet5 = builder4.parentTypes;
        boolean boolean6 = builder4.skipInitialImport;
        java.lang.String[] strArray37 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder4.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        builder0.parentTypes = strSet38;
        java.lang.String str42 = builder0.getmongoLocalPassword();
        java.lang.String str43 = builder0.getmongoLocalPassword();
        builder0.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder0.mongoDb("concurrent_requests");
        java.lang.String str48 = builder47.gettypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(false);
        builder0.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet13 = null;
        builder0.includeFields = strSet13;
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.advancedTransformation(false);
        builder16.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder16.mongoUseSSL(false);
        builder22.setmongoAdminUser("throttle_size");
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        builder22.mongoClientOptions = mongoClientOptions25;
        builder22.setriverIndexName("script_type");
        com.mongodb.BasicDBObject basicDBObject30 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        builder22.mongoCollectionFilter = basicDBObject30;
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        builder0.mongoCollectionFilter = basicDBObject30;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject30);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(false);
        builder0.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet13 = null;
        builder0.includeFields = strSet13;
        builder0.setstatisticsTypeName("flush_interval");
        boolean boolean17 = builder0.mongoGridFS;
        java.lang.String str18 = builder0.getindexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        builder2.setriverName("ssl_verify_certificate");
        builder2.setmongoSecondaryReadPreference(true);
        java.lang.String str10 = builder2.getmongoCollection();
        builder2.setincludeCollection("hi!");
        builder2.setthrottleSize((int) (byte) -1);
        builder2.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.typeName("skip_initial_import");
        builder2.setmongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        int int11 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str13 = mongoDBRiverDefinition8.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition8.getPORT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoDb();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoDb();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "port" + "'", str14, "port");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str14 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str18 = mongoDBRiverDefinition8.riverIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getDB_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition8.getUSER_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.isMongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition8.getTYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.statisticsIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "db" + "'", str10, "db");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter0 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings1 = serializedObjectSupporter0.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings2 = serializedObjectSupporter0.deserializeObjectRiverSettings5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        org.elasticsearch.river.RiverSettings riverSettings7 = serializedObjectSupporter0.deserializeObjectRiverSettings8();
        org.junit.Assert.assertNull(riverSettings1);
        org.junit.Assert.assertNull(riverSettings2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "_river" + "'", str3, "_river");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_river" + "'", str4, "_river");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb-1638820217755" + "'", str5, "mongodb-1638820217755");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_river" + "'", str6, "_river");
        org.junit.Assert.assertNull(riverSettings7);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.typeName;
        java.lang.String str14 = mongoDBRiverDefinition8.includeCollection;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition8.mongoCollectionFilter;
        java.lang.String str16 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        int int17 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "actions" + "'", str16, "actions");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1000 + "'", int17 == 1000);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.initialTimestamp;
        boolean boolean11 = mongoDBRiverDefinition8.isMongoUseSSL();
        boolean boolean12 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition8.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "advanced_transformation" + "'", str13, "advanced_transformation");
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.getInitialTimestamp();
        boolean boolean11 = mongoDBRiverDefinition8.getimportAllCollections();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getParentTypes();
        java.lang.String str13 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.isDropCollection();
        int int15 = mongoDBRiverDefinition8.socketTimeout;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition8.includeFields;
        java.lang.String str17 = mongoDBRiverDefinition8.getPASSWORD_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "parent_types" + "'", str13, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        java.lang.String str4 = builder2.getriverIndexName();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory5 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject7 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory9 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject14 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory9.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings17 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory22 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript25 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory22.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.RiverSettings riverSettings30 = new org.elasticsearch.river.RiverSettings(settings17, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory5.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.mongoOplogFilter(basicDBObject27);
        builder32.setmongoLocalUser("local");
        int int35 = builder32.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.advancedTransformation(false);
        builder36.mongoAdminPassword = "name";
        java.lang.String str41 = builder36.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet45 = builder44.parentTypes;
        boolean boolean46 = builder44.skipInitialImport;
        java.lang.String[] strArray77 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        builder44.setincludeFields((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder36.includeFields((java.util.Set<java.lang.String>) strSet78);
        boolean boolean82 = builder81.getmongoSecondaryReadPreference();
        java.lang.String str83 = builder81.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder81.script("skip_initial_import");
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter86 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str87 = serializedObjectSupporter86.deserializeObjectString11();
        java.lang.String str88 = serializedObjectSupporter86.deserializeObjectString17();
        java.lang.String str89 = serializedObjectSupporter86.deserializeObjectString7();
        java.lang.String str90 = serializedObjectSupporter86.deserializeObjectString11();
        builder85.serializedObjectSupporter = serializedObjectSupporter86;
        java.lang.String str92 = serializedObjectSupporter86.deserializeObjectString14();
        builder32.serializedObjectSupporter = serializedObjectSupporter86;
        boolean boolean94 = builder32.getadvancedTransformation();
        builder32.mongoAdminUser = "throttle_size";
        java.lang.String str97 = builder32.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder32.indexName("mongodb-1638820218326");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript25);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "mongodb-1638820218387" + "'", str87, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "mongodb-1638820218449" + "'", str88, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "mongodb-1638820218326" + "'", str89, "mongodb-1638820218326");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "mongodb-1638820218387" + "'", str90, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "_river" + "'", str92, "_river");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.advancedTransformation(false);
        builder4.mongoAdminPassword = "name";
        java.lang.String str9 = builder4.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder4.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet46);
        java.lang.String str51 = builder2.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder2.riverIndexName("mongodb-1638820218424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder2.script("_river");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = builder2.build();
        boolean boolean59 = mongoDBRiverDefinition58.getdisableIndexRefresh();
        boolean boolean60 = mongoDBRiverDefinition58.getdisableIndexRefresh();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        com.mongodb.BasicDBObject basicDBObject9 = builder8.mongoOplogFilter;
        builder8.setmongoAdminPassword("concurrent_requests");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject9);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str12 = mongoDBRiverDefinition8.mongoAdminPassword;
        java.lang.String str13 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition8.advancedTransformation;
        int int15 = mongoDBRiverDefinition8.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition8.getCREDENTIALS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "actions" + "'", str13, "actions");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "credentials" + "'", str16, "credentials");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSOCKET_TIMEOUT();
        java.lang.String str13 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "socket_timeout" + "'", str12, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        int int8 = builder5.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter10 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str11 = serializedObjectSupporter10.deserializeObjectString11();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString17();
        org.elasticsearch.river.RiverSettings riverSettings13 = serializedObjectSupporter10.deserializeObjectRiverSettings2();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString17();
        mongoDBRiverDefinition9.serializedObjectSupporter = serializedObjectSupporter10;
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb-1638820218387" + "'", str11, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb-1638820218449" + "'", str12, "mongodb-1638820218449");
        org.junit.Assert.assertNull(riverSettings13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mongodb-1638820218449" + "'", str14, "mongodb-1638820218449");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.mongoCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.mongoLocalUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.statisticsIndexName("disable_index_refresh");
        java.lang.String str7 = builder2.getmongoLocalPassword();
        java.lang.Class<?> wildcardClass8 = builder2.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        builder2.indexName = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoDb("localhost");
        int int8 = builder7.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder7.statisticsIndexName("collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        builder11.setmongoCollectionFilter(basicDBObject16);
        java.lang.String str19 = builder11.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet25 = builder24.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.advancedTransformation(false);
        builder26.mongoAdminPassword = "name";
        java.lang.String str31 = builder26.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet35 = builder34.parentTypes;
        boolean boolean36 = builder34.skipInitialImport;
        java.lang.String[] strArray67 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder34.setincludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder26.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet68);
        builder11.includeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder10.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder10.socketTimeout(1000);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder10.mongoLocalPassword("collection");
        java.lang.String str79 = builder78.getriverIndexName();
        org.bson.types.Binary binary80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder78.initialTimestamp(binary80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        boolean boolean5 = builder0.mongoSecondaryReadPreference;
        java.lang.String str6 = builder0.mongoAdminUser;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject9 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript10 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        builder0.setmongoCollectionFilter(basicDBObject9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.riverName("hi!");
        builder0.typeName = "mongodb-1638820218363";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(executableScript10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        boolean boolean14 = mongoDBRiverDefinition8.storeStatistics;
        boolean boolean15 = mongoDBRiverDefinition8.getdropCollection();
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str17 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition8.getParentTypes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoDb("mongodb-1638820218387");
        builder0.skipInitialImport = false;
        builder0.indexName = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsIndexName("password");
        java.lang.String str16 = builder15.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.riverIndexName("mongodb-1638820218299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.socketTimeout((int) (short) 10);
        java.util.Set<java.lang.String> strSet21 = builder15.excludeFields;
        java.lang.String str22 = builder15.riverIndexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb-1638820218299" + "'", str22, "mongodb-1638820218299");
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        java.lang.String str5 = builder0.mongoCollection;
        java.util.Set<java.lang.String> strSet6 = builder0.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder0.getinitialTimestamp();
        builder0.scriptType = "mongodb-1638820218326";
        java.lang.String str10 = builder0.mongoCollection;
        boolean boolean11 = builder0.getmongoSSLVerifyCertificate();
        builder0.setriverIndexName("gridfs");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean13 = mongoDBRiverDefinition8.isImportAllCollections();
        boolean boolean14 = mongoDBRiverDefinition8.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition8.getStatisticsIndexName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp10 = mongoDBRiverDefinition8.getInitialTimestamp();
        boolean boolean11 = mongoDBRiverDefinition8.getimportAllCollections();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getParentTypes();
        java.lang.String str13 = mongoDBRiverDefinition8.getPARENT_TYPES_FIELD();
        int int14 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        boolean boolean15 = mongoDBRiverDefinition8.mongoGridFS;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertNull(wildcardTimestamp10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "parent_types" + "'", str13, "parent_types");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1000 + "'", int14 == 1000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        int int6 = builder2.getsocketTimeout();
        builder2.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.indexName("password");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        java.lang.String str17 = builder12.getindexName();
        boolean boolean18 = builder12.getadvancedTransformation();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        boolean boolean12 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getBULK_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str16 = mongoDBRiverDefinition8.getUSER_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean18 = mongoDBRiverDefinition8.getimportAllCollections();
        java.lang.String str19 = mongoDBRiverDefinition8.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "drop_collection" + "'", str14, "drop_collection");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "size" + "'", str15, "size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disable_index_refresh" + "'", str19, "disable_index_refresh");
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition8.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoLocalUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) "user");
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet9 = builder8.parentTypes;
        builder8.indexName = "disable_index_refresh";
        builder8.setriverName("ssl_verify_certificate");
        builder8.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder8.initialTimestamp;
        builder8.riverIndexName = "db";
        docScoreSearchScript0.setNextVar("null.size", (java.lang.Object) builder8);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        docScoreSearchScript0.setNextScore((-1.0f));
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore(0.0f);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "user" + "'", obj2, "user");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + false + "'", obj4, false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(wildcardTimestamp16);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        int int12 = mongoDBRiverDefinition8.getThrottleSize();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.size" + "'", str13, "null.size");
        org.junit.Assert.assertNotNull(timeValue14);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        int int10 = mongoDBRiverDefinition8.connectTimeout;
        java.lang.String str11 = mongoDBRiverDefinition8.getMongoAdminPassword();
        org.elasticsearch.common.unit.TimeValue timeValue12 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str13 = mongoDBRiverDefinition8.scriptType;
        java.lang.String str14 = mongoDBRiverDefinition8.indexName;
        boolean boolean15 = mongoDBRiverDefinition8.getimportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition8.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "name" + "'", str14, "name");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        boolean boolean14 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str15 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        java.lang.String str16 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition8.mongoCollectionFilter;
        java.lang.String str18 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        boolean boolean19 = mongoDBRiverDefinition8.isMongoUseSSL();
        boolean boolean20 = mongoDBRiverDefinition8.isSkipInitialImport();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "null.size" + "'", str13, "null.size");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "localhost" + "'", str18, "localhost");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        boolean boolean11 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str12 = mongoDBRiverDefinition8.getHOST_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition8.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoAdminUser();
        java.lang.String str15 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getSSL_CONNECTION_FIELD();
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter17 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString11();
        java.lang.String str19 = serializedObjectSupporter17.deserializeObjectString17();
        java.lang.String str20 = serializedObjectSupporter17.deserializeObjectString4();
        java.lang.String str21 = serializedObjectSupporter17.deserializeObjectString16();
        mongoDBRiverDefinition8.serializedObjectSupporter = serializedObjectSupporter17;
        org.elasticsearch.river.RiverSettings riverSettings23 = serializedObjectSupporter17.deserializeObjectRiverSettings3();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "host" + "'", str12, "host");
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "actions" + "'", str15, "actions");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl" + "'", str16, "ssl");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb-1638820218387" + "'", str18, "mongodb-1638820218387");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb-1638820218449" + "'", str19, "mongodb-1638820218449");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_river" + "'", str20, "_river");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_river" + "'", str21, "_river");
        org.junit.Assert.assertNull(riverSettings23);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder2.getinitialTimestamp();
        builder2.scriptType = "servers";
        builder2.indexName = "advanced_transformation";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory14 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject16 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory14.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        builder11.setmongoCollectionFilter(basicDBObject16);
        java.lang.String str19 = builder11.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder11.mongoClientOptions(mongoClientOptions20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet25 = builder24.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.advancedTransformation(false);
        builder26.mongoAdminPassword = "name";
        java.lang.String str31 = builder26.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet35 = builder34.parentTypes;
        boolean boolean36 = builder34.skipInitialImport;
        java.lang.String[] strArray67 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        builder34.setincludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder26.includeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder24.excludeFields((java.util.Set<java.lang.String>) strSet68);
        builder11.includeFields = strSet68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.river.mongodb.SerializedObjectSupporter serializedObjectSupporter75 = new org.elasticsearch.river.mongodb.SerializedObjectSupporter();
        org.elasticsearch.river.RiverSettings riverSettings76 = serializedObjectSupporter75.deserializeObjectRiverSettings9();
        org.elasticsearch.river.RiverSettings riverSettings77 = serializedObjectSupporter75.deserializeObjectRiverSettings5();
        builder2.serializedObjectSupporter = serializedObjectSupporter75;
        java.lang.String str79 = serializedObjectSupporter75.deserializeObjectString6();
        java.lang.String str80 = serializedObjectSupporter75.deserializeObjectString9();
        java.lang.String str81 = serializedObjectSupporter75.deserializeObjectString16();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(riverSettings76);
        org.junit.Assert.assertNull(riverSettings77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "_river" + "'", str79, "_river");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "mongodb-1638820218363" + "'", str80, "mongodb-1638820218363");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_river" + "'", str81, "_river");
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean10 = mongoDBRiverDefinition8.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition8.getIncludeFields();
        java.lang.String str13 = mongoDBRiverDefinition8.typeName;
        java.lang.String str14 = mongoDBRiverDefinition8.statisticsIndexName;
        int int15 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder49.statisticsTypeName("bulk_size");
        boolean boolean52 = builder49.getdropCollection();
        builder49.setmongoLocalUser("mongodb-1638820218326");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.parentTypes;
        boolean boolean4 = builder2.skipInitialImport;
        com.mongodb.MongoClientOptions mongoClientOptions5 = builder2.getmongoClientOptions();
        builder2.indexName = "servers";
        builder2.mongoLocalUser = "script_type";
        int int10 = builder2.socketTimeout;
        java.lang.String str11 = builder2.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet15 = builder14.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.mongoCollection("size");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder14.getinitialTimestamp();
        builder14.scriptType = "servers";
        builder14.indexName = "advanced_transformation";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory26 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject28 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory26.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject28);
        builder23.setmongoCollectionFilter(basicDBObject28);
        java.lang.String str31 = builder23.getriverIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder23.mongoClientOptions(mongoClientOptions32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet37 = builder36.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder38.advancedTransformation(false);
        builder38.mongoAdminPassword = "name";
        java.lang.String str43 = builder38.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet47 = builder46.parentTypes;
        boolean boolean48 = builder46.skipInitialImport;
        java.lang.String[] strArray79 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder46.setincludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder38.includeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder23.includeFields = strSet80;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder2.excludeFields((java.util.Set<java.lang.String>) strSet80);
        java.lang.String str88 = builder2.getmongoCollection();
        builder2.mongoDb = "mongodb-1638820218424";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(mongoClientOptions5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = mongoDBRiverDefinition8.getDEFAULT_BULK_SIZE();
        boolean boolean12 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean13 = mongoDBRiverDefinition8.mongoGridFS;
        java.lang.String str14 = mongoDBRiverDefinition8.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.typeName;
        java.lang.String str16 = mongoDBRiverDefinition8.getMongoCollection();
        java.lang.String str17 = mongoDBRiverDefinition8.getTYPE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition8.isMongoGridFS();
        java.lang.String str19 = mongoDBRiverDefinition8.getUSER_FIELD();
        boolean boolean20 = mongoDBRiverDefinition8.mongoSSLVerifyCertificate;
        java.lang.String str21 = mongoDBRiverDefinition8.getUSER_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "exclude_fields" + "'", str14, "exclude_fields");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "type" + "'", str17, "type");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "user" + "'", str19, "user");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "user" + "'", str21, "user");
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        builder0.mongoAdminPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.dropCollection(false);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoClientOptions(mongoClientOptions11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.getmongoClientOptions();
        builder14.setriverIndexName("name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mongoClientOptions15);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str9 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getINDEX_OBJECT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "admin" + "'", str10, "admin");
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index" + "'", str13, "index");
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.mongoCollection("size");
        builder5.setindexName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        boolean boolean9 = mongoDBRiverDefinition8.getadvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition8.getDEFAULT_DB_HOST();
        java.lang.String str11 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.getadvancedTransformation();
        boolean boolean14 = mongoDBRiverDefinition8.dropCollection;
        org.elasticsearch.common.logging.ESLogger eSLogger15 = mongoDBRiverDefinition8.getlogger();
        java.lang.String str16 = mongoDBRiverDefinition8.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "include_fields" + "'", str11, "include_fields");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(eSLogger15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_size" + "'", str16, "bulk_size");
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject5 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript6 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject5);
        builder0.setmongoCollectionFilter(basicDBObject5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.statisticsIndexName("name");
        builder9.scriptType = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.advancedTransformation(false);
        builder14.mongoAdminPassword = "name";
        builder14.setmongoAdminPassword("mongodb-1638820218326");
        java.lang.String str21 = builder14.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder14.mongoUseSSL(false);
        builder14.mongoAdminPassword = "advanced_transformation";
        boolean boolean26 = builder14.mongoGridFS;
        builder14.mongoCollection = "bulk_timeout";
        builder14.riverIndexName = "db";
        java.lang.String[] strArray54 = new java.lang.String[] { "disable_index_refresh", "hi!", "advanced_transformation", "initial_timestamp", "index", "include_collection", "mongodb-1638820218449", "exclude_fields", "", "null.size", "concurrent_requests", "admin", "local", "index", "advanced_transformation", "mongodb-1638820218299", "initial_timestamp", "drop_collection", "throttle_size", "parent_types", "skip_initial_import", "mongodb-1638820218424", "mongodb-1638820218424" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder14.excludeFields((java.util.Set<java.lang.String>) strSet55);
        builder9.excludeFields = strSet55;
        builder9.setconnectTimeout(32);
        java.lang.String str61 = builder9.mongoAdminPassword;
        builder9.riverIndexName = "";
        com.mongodb.BasicDBObject basicDBObject64 = builder9.mongoCollectionFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNotNull(executableScript6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(basicDBObject64);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.riverName("flush_interval");
        java.lang.String str4 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.riverName("flush_interval");
        builder5.setmongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet14 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoCollection("size");
        int int17 = builder13.getsocketTimeout();
        builder13.setmongoSecondaryReadPreference(false);
        builder13.setskipInitialImport(true);
        com.mongodb.BasicDBObject basicDBObject22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder13.mongoOplogFilter(basicDBObject22);
        builder23.setmongoGridFS(false);
        builder23.mongoLocalUser = "actions";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet31 = builder28.includeFields;
        boolean boolean32 = builder28.getmongoGridFS();
        java.util.Set<java.lang.String> strSet33 = builder28.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder28.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.advancedTransformation(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory39 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        com.mongodb.BasicDBObject basicDBObject41 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory39.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        builder36.setmongoCollectionFilter(basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.mongoDb("mongodb-1638820218387");
        java.lang.String[] strArray51 = new java.lang.String[] { "throttle_size", "", "db", "db", "local" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet52);
        builder23.excludeFields = strSet52;
        builder5.excludeFields = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder0.includeFields((java.util.Set<java.lang.String>) strSet52);
        boolean boolean59 = builder58.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = builder49.build();
        java.util.Set<java.lang.String> strSet51 = mongoDBRiverDefinition50.excludeFields;
        boolean boolean52 = mongoDBRiverDefinition50.mongoGridFS;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition50);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet3 = builder2.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.advancedTransformation(false);
        builder2.setimportAllCollections(false);
        builder2.riverName = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.advancedTransformation(false);
        java.util.Set<java.lang.String> strSet13 = builder12.parentTypes;
        boolean boolean14 = builder12.skipInitialImport;
        java.lang.String[] strArray45 = new java.lang.String[] { "disable_index_refresh", "port", "secondary_read_preference", "import_all_collections", "bulk_timeout", "type", "script", "mongodb-1638820218449", "options", "gridfs", "port", "throttle_size", "ssl", "concurrent_bulk_requests", "hi!", "advanced_transformation", "bulk_size", "local", "name", "exclude_fields", "import_all_collections", "script_type", "socket_timeout", "type", "store_statistics", "store_statistics", "servers", "localhost", "ssl", "ssl_verify_certificate" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder12.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder2.includeFields((java.util.Set<java.lang.String>) strSet46);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder2.mongoClientOptions;
        builder2.mongoLocalPassword = "credentials";
        boolean boolean53 = builder2.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(mongoClientOptions50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.advancedTransformation(false);
        java.lang.String str3 = builder2.riverIndexName;
        builder2.statisticsIndexName = "store_statistics";
        builder2.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.dropCollection(false);
        builder2.advancedTransformation = true;
        builder2.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder2.mongoUseSSL(false);
        java.lang.String str18 = builder17.gettypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
    }
}

