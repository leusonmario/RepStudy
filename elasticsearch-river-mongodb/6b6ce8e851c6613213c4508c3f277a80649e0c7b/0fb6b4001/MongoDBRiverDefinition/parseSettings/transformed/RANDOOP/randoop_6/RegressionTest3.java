import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        java.lang.String str12 = builder0.mongoAdminUser;
        builder0.mongoCollection = "secondary_read_preference";
        java.lang.String str15 = builder0.getriverName();
        boolean boolean16 = builder0.dropCollection;
        builder0.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        builder0.setmongoLocalPassword("advanced_transformation");
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder0.getmongoServers();
        java.lang.String str22 = builder0.mongoAdminUser;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder0.mongoClientOptions;
        java.lang.String str24 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoSSLVerifyCertificate(true);
        builder25.script = "import_all_collections";
        boolean boolean33 = builder25.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.mongoAdminUser("bulk_size");
        int int36 = builder35.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoLocalUser("parent_types");
        java.util.List<com.mongodb.ServerAddress> serverAddressList39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoServers(serverAddressList39);
        java.lang.String str41 = builder35.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder42.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet45 = builder42.excludeFields;
        builder42.setmongoCollection("hi!");
        boolean boolean48 = builder42.importAllCollections;
        builder42.setconnectTimeout((int) (short) 10);
        builder42.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder53.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet56 = builder53.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.mongoSSLVerifyCertificate(true);
        boolean boolean59 = builder53.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        com.mongodb.BasicDBObject basicDBObject64 = builder60.getmongoCollectionFilter();
        java.lang.String str65 = builder60.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray66 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList67 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList67, serverAddressArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder60.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList67);
        java.lang.String str70 = builder60.mongoAdminPassword;
        java.lang.String[] strArray75 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        builder60.setincludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet76);
        builder42.includeFields = strSet76;
        builder35.setexcludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.includeFields((java.util.Set<java.lang.String>) strSet76);
        java.lang.String str83 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "options" + "'", str22, "options");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "options" + "'", str24, "options");
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(serverAddressArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.mongoClientOptions;
        java.lang.String str15 = builder13.getstatisticsIndexName();
        builder13.includeCollection = "script_type";
        org.bson.types.Binary binary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.initialTimestamp(binary18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoLocalUser("bulk_size");
        builder0.mongoLocalPassword = "include_fields";
        builder0.mongoCollection = "store_statistics";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        int int9 = builder0.throttleSize;
        builder0.mongoCollection = "secondary_read_preference";
        java.lang.String str12 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        java.lang.String str17 = builder13.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("script");
        java.lang.String[] strArray52 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet53);
        java.util.Set<java.lang.String> strSet57 = builder13.parentTypes;
        builder0.parentTypes = strSet57;
        builder0.setstatisticsTypeName("localhost");
        boolean boolean61 = builder0.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean15 = mongoDBRiverDefinition9.getstoreStatistics();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder10.setmongoSecondaryReadPreference(false);
        boolean boolean13 = builder10.getmongoSSLVerifyCertificate();
        java.lang.String str14 = builder10.getriverIndexName();
        builder10.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoUseSSL(true);
        builder10.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = builder10.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.script("script");
        com.mongodb.BasicDBObject basicDBObject28 = builder27.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder27.typeName("connect_timeout");
        boolean boolean31 = builder27.mongoGridFS;
        java.lang.String str32 = builder27.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder27.typeName("concurrent_requests");
        boolean boolean35 = builder34.skipInitialImport;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory36 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder37.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet40 = builder37.excludeFields;
        com.mongodb.BasicDBObject basicDBObject41 = builder37.getmongoCollectionFilter();
        java.lang.String str42 = builder37.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray43 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList44 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList44, serverAddressArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder37.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList44);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder37.getmongoClientOptions();
        builder37.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder50.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet53 = builder50.excludeFields;
        com.mongodb.BasicDBObject basicDBObject54 = builder50.getmongoCollectionFilter();
        builder37.setmongoOplogFilter(basicDBObject54);
        org.elasticsearch.script.ExecutableScript executableScript56 = docScoreNativeScriptFactory36.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        builder34.setmongoOplogFilter(basicDBObject54);
        builder0.setmongoCollectionFilter(basicDBObject54);
        builder0.script = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder0.socketTimeout((int) '#');
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(serverAddressArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(mongoClientOptions47);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript56);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoLocalUser;
        java.lang.String str17 = mongoDBRiverDefinition9.statisticsTypeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str15 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        int int19 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str20 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_collection" + "'", str16, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script" + "'", str20, "script");
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder24.setskipInitialImport(true);
        builder24.setscript("");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoOplogFilter();
        boolean boolean14 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_collection" + "'", str15, "include_collection");
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str18 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str19 = mongoDBRiverDefinition9.getDB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "store_statistics" + "'", str13, "store_statistics");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "admin" + "'", str15, "admin");
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "connect_timeout" + "'", str18, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "db" + "'", str19, "db");
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        builder2.mongoDb = "script";
        boolean boolean6 = builder2.getmongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder2.mongoClientOptions = mongoClientOptions7;
        com.mongodb.BasicDBObject basicDBObject9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoOplogFilter(basicDBObject9);
        java.lang.String str11 = builder2.getriverName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        builder9.mongoAdminPassword = "include_collection";
        java.lang.String str24 = builder9.scriptType;
        boolean boolean25 = builder9.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("script");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.mongoOplogFilter(basicDBObject45);
        builder46.setmongoCollection("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder46.mongoDb("host");
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder46.mongoClientOptions;
        java.lang.String str52 = builder46.getincludeCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean14 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean15 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean16 = mongoDBRiverDefinition9.isAdvancedTransformation();
        org.elasticsearch.common.logging.ESLogger eSLogger17 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str18 = mongoDBRiverDefinition9.getDB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(eSLogger17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(false);
        builder11.setmongoLocalPassword("host");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(true);
        builder9.mongoLocalUser = "size";
        boolean boolean12 = builder9.getimportAllCollections();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.getmongoUseSSL();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.advancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder0.setmongoClientOptions(mongoClientOptions6);
        java.util.Set<java.lang.String> strSet8 = builder0.includeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean16 = mongoDBRiverDefinition9.disableIndexRefresh;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "skip_initial_import" + "'", str13, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "servers" + "'", str14, "servers");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        int int25 = builder22.getsocketTimeout();
        java.lang.String str26 = builder22.riverIndexName;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("include_fields");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str15 = mongoDBRiverDefinition9.getIncludeCollection();
        boolean boolean16 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("null.null", "collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.riverName;
        java.lang.String str18 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_collection" + "'", str15, "include_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "host" + "'", str16, "host");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        builder8.includeCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder15.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet18 = builder15.excludeFields;
        com.mongodb.BasicDBObject basicDBObject19 = builder15.getmongoCollectionFilter();
        java.lang.String str20 = builder15.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList22);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder15.getmongoClientOptions();
        builder15.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        builder15.setmongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder8.mongoOplogFilter(basicDBObject32);
        com.mongodb.BasicDBObject basicDBObject35 = builder8.mongoCollectionFilter;
        builder8.setscript("credentials");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoDb;
        java.lang.String str15 = mongoDBRiverDefinition9.mongoLocalPassword;
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.riverIndexName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoAdminUser("credentials");
        java.util.Set<java.lang.String> strSet17 = builder9.getincludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        builder0.setmongoUseSSL(false);
        boolean boolean18 = builder0.getdropCollection();
        boolean boolean19 = builder0.mongoSSLVerifyCertificate;
        builder0.setskipInitialImport(false);
        builder0.riverIndexName = "bulk_timeout";
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(1);
        java.util.Set<java.lang.String> strSet16 = builder15.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder15.initialTimestamp;
        builder15.socketTimeout = (short) 10;
        builder15.settypeName("bulk_size");
        org.bson.types.Binary binary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.initialTimestamp(binary22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder2.mongoCollection = "servers";
        int int19 = builder2.throttleSize;
        builder2.throttleSize = 0;
        builder2.statisticsIndexName = "include_collection";
        builder2.storeStatistics = false;
        builder2.script = "initial_timestamp";
        java.lang.String str28 = builder2.scriptType;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoLocalPassword("type");
        boolean boolean9 = builder0.getimportAllCollections();
        boolean boolean10 = builder0.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = builder2.getadvancedTransformation();
        boolean boolean39 = builder2.mongoSecondaryReadPreference;
        boolean boolean40 = builder2.getdisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject41 = builder2.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder2.riverIndexName("credentials");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = builder2.getinitialTimestamp();
        builder2.mongoGridFS = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(wildcardTimestamp44);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        boolean boolean13 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminPassword("bulk");
        builder0.setmongoUseSSL(true);
        java.lang.String str18 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.storeStatistics(true);
        boolean boolean23 = builder20.getdropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.lang.String str19 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondary_read_preference" + "'", str17, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disable_index_refresh" + "'", str19, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk_timeout" + "'", str20, "bulk_timeout");
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        com.mongodb.BasicDBObject basicDBObject6 = builder2.getmongoOplogFilter();
        builder2.mongoUseSSL = false;
        builder2.indexName = "bulk_size";
        boolean boolean11 = builder2.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet12 = builder2.includeFields;
        builder2.socketTimeout = 10;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.typeName;
        boolean boolean17 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean18 = mongoDBRiverDefinition9.importAllCollections;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean14 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoAdminPassword;
        org.elasticsearch.common.logging.ESLogger eSLogger18 = mongoDBRiverDefinition9.getlogger();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "options" + "'", str16, "options");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(eSLogger18);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        boolean boolean22 = builder21.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.connectTimeout((int) '4');
        builder21.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean11 = mongoDBRiverDefinition8.getdropCollection();
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.includeFields;
        java.lang.String str14 = mongoDBRiverDefinition8.getLOCAL_DB_FIELD();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition8.excludeFields;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "local" + "'", str14, "local");
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = builder22.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder22.mongoSSLVerifyCertificate(true);
        builder27.setmongoCollection("connect_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        int int15 = mongoDBRiverDefinition9.connectTimeout;
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str20 = mongoDBRiverDefinition9.riverName;
        java.lang.String str21 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "admin" + "'", str18, "admin");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk_timeout" + "'", str21, "bulk_timeout");
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoGridFS(true);
        java.lang.String str3 = builder0.indexName;
        builder0.storeStatistics = false;
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.riverName;
        boolean boolean15 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean17 = mongoDBRiverDefinition9.skipInitialImport;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.throttleSize = '#';
        builder13.mongoDb = "credentials";
        builder13.riverIndexName = "local";
        boolean boolean20 = builder13.getdisableIndexRefresh();
        boolean boolean21 = builder13.dropCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean14 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        int int13 = mongoDBRiverDefinition9.getConnectTimeout();
        int int14 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "local" + "'", str12, "local");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_bulk_requests" + "'", str15, "concurrent_bulk_requests");
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.BasicDBObject basicDBObject10 = builder9.mongoOplogFilter;
        builder9.setscriptType("script");
        java.lang.String str13 = builder9.gettypeName();
        java.lang.String str14 = builder9.script;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(basicDBObject10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.riverIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.riverName("secondary_read_preference");
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder0.storeStatistics(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str13 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.importAllCollections;
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str16 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getDB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "skip_initial_import" + "'", str16, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        org.elasticsearch.common.logging.ESLogger eSLogger3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.logger;
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) eSLogger3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        builder6.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean14 = builder6.getmongoUseSSL();
        java.lang.String str15 = builder6.indexName;
        java.util.Set<java.lang.String> strSet16 = builder6.getexcludeFields();
        docScoreSearchScript0.setNextVar("hi!", (java.lang.Object) builder6);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        java.lang.String str24 = builder20.getmongoLocalPassword();
        builder20.mongoGridFS = false;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder20.mongoClientOptions = mongoClientOptions27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp37 = builder32.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        builder31.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder31.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder20.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder56.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet59 = builder56.excludeFields;
        java.lang.String str60 = builder56.getmongoLocalPassword();
        builder56.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder56.mongoAdminUser("");
        builder64.mongoCollection = "hi!";
        builder64.mongoUseSSL = true;
        builder64.throttleSize = (short) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder64.mongoSecondaryReadPreference(true);
        java.lang.Object obj73 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext74 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNotNull(eSLogger3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNull(wildcardTimestamp37);
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + true + "'", obj73, true);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        int int19 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str20 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str21 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str22 = mongoDBRiverDefinition9.scriptType;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index" + "'", str21, "index");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str17 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.includeCollection;
        int int19 = mongoDBRiverDefinition9.connectTimeout;
        java.lang.String str20 = mongoDBRiverDefinition9.getTypeName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl" + "'", str15, "ssl");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gridfs" + "'", str17, "gridfs");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        java.lang.String str16 = builder15.statisticsTypeName;
        java.util.Set<java.lang.String> strSet17 = builder15.getincludeFields();
        java.lang.String str18 = builder15.mongoLocalUser;
        boolean boolean19 = builder15.advancedTransformation;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "credentials" + "'", str18, "credentials");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean18 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.lang.String str6 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("user");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder8.mongoClientOptions = mongoClientOptions9;
        boolean boolean11 = builder8.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.advancedTransformation(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory16 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = null;
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory16.newScript(strMap17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        builder12.setmongoOplogFilter(basicDBObject23);
        java.lang.String str26 = builder12.getmongoAdminPassword();
        java.lang.String str27 = builder12.statisticsIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        java.lang.String str9 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("options");
        java.lang.String str12 = builder11.typeName;
        boolean boolean13 = builder11.disableIndexRefresh;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout((int) (short) 1);
        java.lang.String str13 = builder0.script;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        java.lang.String str9 = builder0.indexName;
        boolean boolean10 = builder0.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder24.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("script");
        java.lang.String[] strArray64 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder32.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet65);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        int int70 = builder24.getsocketTimeout();
        java.lang.String str71 = builder24.getriverName();
        builder24.riverName = "options";
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getNAME_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.getmongoUseSSL();
        java.lang.String str22 = mongoDBRiverDefinition9.script;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "name" + "'", str20, "name");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(true);
        int int10 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str12 = mongoDBRiverDefinition11.getStatisticsTypeName();
        java.lang.String str13 = mongoDBRiverDefinition11.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder13.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.statisticsIndexName("socket_timeout");
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder16.mongoOplogFilter = basicDBObject17;
        builder16.setscriptType("concurrent_requests");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        java.lang.String str17 = builder7.mongoAdminPassword;
        java.lang.String[] strArray22 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet23);
        int int27 = builder26.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject28 = builder26.getmongoOplogFilter();
        builder26.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.script("host");
        boolean boolean33 = builder32.dropCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("null.initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject1);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        int int12 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str13 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "servers" + "'", str15, "servers");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoLocalUser("bulk_size");
        int int30 = builder29.getsocketTimeout();
        builder29.setimportAllCollections(false);
        builder29.connectTimeout = (byte) 100;
        builder29.setimportAllCollections(false);
        java.util.Set<java.lang.String> strSet37 = builder29.excludeFields;
        boolean boolean38 = builder29.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.script("script");
        java.lang.String[] strArray59 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder27.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder22.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder22.riverName = "null.initial_timestamp";
        java.lang.String str66 = builder22.script;
        boolean boolean67 = builder22.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextVar("connect_timeout", (java.lang.Object) "type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        builder7.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder19.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder19.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.indexName("");
        java.lang.String str32 = builder7.getstatisticsIndexName();
        builder7.mongoAdminPassword = "disable_index_refresh";
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder7.mongoClientOptions(mongoClientOptions35);
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) mongoClientOptions35);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript41 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj43 = docScoreSearchScript41.unwrap((java.lang.Object) true);
        org.elasticsearch.common.logging.ESLogger eSLogger44 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.logger;
        java.lang.Object obj45 = docScoreSearchScript41.unwrap((java.lang.Object) eSLogger44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        com.mongodb.BasicDBObject basicDBObject51 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder47.initialTimestamp;
        builder47.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean55 = builder47.getmongoUseSSL();
        java.lang.String str56 = builder47.indexName;
        java.util.Set<java.lang.String> strSet57 = builder47.getexcludeFields();
        docScoreSearchScript41.setNextVar("hi!", (java.lang.Object) builder47);
        java.lang.String str59 = builder47.getmongoLocalPassword();
        docScoreSearchScript0.setNextVar("filter", (java.lang.Object) builder47);
        builder47.dropCollection = true;
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + true + "'", obj43, true);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(false);
        boolean boolean12 = builder11.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder14.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet17 = builder14.excludeFields;
        com.mongodb.BasicDBObject basicDBObject18 = builder14.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = builder14.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray20 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList21 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList21, serverAddressArray20);
        builder14.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList21);
        builder13.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        com.mongodb.BasicDBObject basicDBObject29 = builder25.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp30 = builder25.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder25.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder13.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList32);
        builder13.mongoSecondaryReadPreference = false;
        boolean boolean38 = builder13.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = builder40.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray46 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList47 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList47, serverAddressArray46);
        builder40.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        builder39.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        builder39.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder39.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoSecondaryReadPreference(false);
        boolean boolean57 = builder54.mongoGridFS;
        com.mongodb.ServerAddress[] serverAddressArray58 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList59 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList59, serverAddressArray58);
        builder54.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList59);
        builder13.mongoServers = serverAddressList59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder11.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoLocalUser("concurrent_bulk_requests");
        builder63.socketTimeout = 1000;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertNotNull(serverAddressArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNull(wildcardTimestamp30);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertNotNull(serverAddressArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serverAddressArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        builder0.setsocketTimeout(1000);
        builder0.setindexName("");
        int int15 = builder0.throttleSize;
        java.util.Set<java.lang.String> strSet16 = builder0.parentTypes;
        builder0.setmongoLocalPassword("host");
        builder0.setincludeCollection("connect_timeout");
        builder0.statisticsTypeName = "";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder74.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder74.scriptType("ssl_verify_certificate");
        boolean boolean81 = builder74.mongoUseSSL;
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder74.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(mongoClientOptions82);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.statisticsIndexName;
        java.lang.String str15 = mongoDBRiverDefinition9.getFILTER_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "filter" + "'", str15, "filter");
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        boolean boolean17 = mongoDBRiverDefinition9.getadvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str19 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger20 = mongoDBRiverDefinition9.getlogger();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_timeout" + "'", str19, "bulk_timeout");
        org.junit.Assert.assertNotNull(eSLogger20);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.dropCollection(true);
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoOplogFilter();
        boolean boolean16 = builder14.dropCollection;
        builder14.importAllCollections = false;
        builder14.setmongoAdminUser("import_all_collections");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        boolean boolean23 = builder16.mongoGridFS;
        int int24 = builder16.getsocketTimeout();
        builder16.setimportAllCollections(true);
        builder16.setmongoLocalUser("import_all_collections");
        builder16.setstatisticsIndexName("db");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getIncludeCollection();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition9.indexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gridfs" + "'", str15, "gridfs");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        builder6.setmongoCollection("initial_timestamp");
        boolean boolean12 = builder6.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str16 = mongoDBRiverDefinition15.includeCollection;
        boolean boolean17 = mongoDBRiverDefinition15.mongoGridFS;
        boolean boolean18 = mongoDBRiverDefinition15.advancedTransformation;
        java.lang.String str19 = mongoDBRiverDefinition15.getADMIN_DB_FIELD();
        boolean boolean20 = mongoDBRiverDefinition15.getdisableIndexRefresh();
        boolean boolean21 = mongoDBRiverDefinition15.isMongoSecondaryReadPreference();
        java.lang.String str22 = mongoDBRiverDefinition15.mongoCollection;
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition15.includeFields;
        int int24 = mongoDBRiverDefinition15.throttleSize;
        boolean boolean25 = mongoDBRiverDefinition15.disableIndexRefresh;
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) boolean25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        builder28.setmongoCollection("initial_timestamp");
        boolean boolean34 = builder28.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder28.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder36);
        java.lang.String str38 = mongoDBRiverDefinition37.includeCollection;
        java.lang.String str39 = mongoDBRiverDefinition37.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet40 = mongoDBRiverDefinition37.excludeFields;
        java.lang.String str41 = mongoDBRiverDefinition37.getOPTIONS_FIELD();
        java.lang.String str42 = mongoDBRiverDefinition37.getIndexName();
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) mongoDBRiverDefinition37);
        docScoreSearchScript0.setNextScore((float) (byte) -1);
        java.lang.Object obj46 = null;
        java.lang.Object obj47 = docScoreSearchScript0.unwrap(obj46);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "initial_timestamp" + "'", str22, "initial_timestamp");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "collection" + "'", str39, "collection");
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "options" + "'", str41, "options");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.getScriptType();
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean18 = mongoDBRiverDefinition9.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        int int25 = builder0.getsocketTimeout();
        builder0.mongoAdminUser = "store_statistics";
        boolean boolean28 = builder0.advancedTransformation;
        java.lang.String str29 = builder0.riverName;
        builder0.setmongoLocalPassword("throttle_size");
        builder0.setmongoLocalPassword("");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.mongoUseSSL = false;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder7.getmongoClientOptions();
        builder7.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        com.mongodb.BasicDBObject basicDBObject24 = builder20.getmongoCollectionFilter();
        builder7.setmongoOplogFilter(basicDBObject24);
        org.elasticsearch.script.ExecutableScript executableScript26 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject24);
        builder2.mongoOplogFilter = basicDBObject24;
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder2.mongoClientOptions;
        builder2.setconnectTimeout((int) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.script("script");
        com.mongodb.BasicDBObject basicDBObject34 = builder33.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder33.typeName("connect_timeout");
        boolean boolean37 = builder33.mongoGridFS;
        boolean boolean38 = builder33.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = builder33.build();
        java.lang.String str40 = mongoDBRiverDefinition39.mongoDb;
        boolean boolean41 = mongoDBRiverDefinition39.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject42 = mongoDBRiverDefinition39.mongoOplogFilter;
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition39.getMongoCollectionFilter();
        builder2.setmongoCollectionFilter(basicDBObject43);
        builder2.setmongoUseSSL(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(executableScript26);
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(basicDBObject42);
        org.junit.Assert.assertNotNull(basicDBObject43);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        java.lang.String str5 = builder4.getmongoLocalUser();
        builder4.mongoGridFS = true;
        builder4.setmongoSSLVerifyCertificate(true);
        builder4.mongoAdminPassword = "disable_index_refresh";
        builder4.scriptType = "exclude_fields";
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        builder2.setstatisticsIndexName("password");
        builder2.mongoAdminPassword = "";
        builder2.mongoCollection = "concurrent_requests";
        builder2.statisticsTypeName = "bulk_timeout";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoGridFS(false);
        builder0.riverName = "localhost";
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        boolean boolean15 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.includeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout((int) (short) 1);
        builder0.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoAdminUser("password");
        com.mongodb.BasicDBObject basicDBObject19 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.lang.String str6 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("user");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder8.mongoClientOptions = mongoClientOptions9;
        builder8.setindexName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet15 = builder14.getparentTypes();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        org.elasticsearch.common.logging.ESLogger eSLogger3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.logger;
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) eSLogger3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        builder6.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean14 = builder6.getmongoUseSSL();
        java.lang.String str15 = builder6.indexName;
        java.util.Set<java.lang.String> strSet16 = builder6.getexcludeFields();
        docScoreSearchScript0.setNextVar("hi!", (java.lang.Object) builder6);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        java.lang.String str24 = builder20.getmongoLocalPassword();
        builder20.mongoGridFS = false;
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        builder20.mongoClientOptions = mongoClientOptions27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder20.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp37 = builder32.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        builder31.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder31.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder20.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        java.lang.Object obj55 = docScoreSearchScript0.unwrap((java.lang.Object) builder20);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNotNull(eSLogger3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNull(wildcardTimestamp37);
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(obj55);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        builder16.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.riverName("credentials");
        java.lang.String str27 = builder16.script;
        builder16.setskipInitialImport(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "drop_collection" + "'", str27, "drop_collection");
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str16 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "skip_initial_import" + "'", str16, "skip_initial_import");
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder5.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet8 = builder5.excludeFields;
        builder5.setmongoCollection("initial_timestamp");
        boolean boolean11 = builder5.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str15 = mongoDBRiverDefinition14.includeCollection;
        java.lang.String str16 = mongoDBRiverDefinition14.getHOST_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger17 = mongoDBRiverDefinition14.getlogger();
        java.lang.Object obj18 = docScoreSearchScript0.unwrap((java.lang.Object) eSLogger17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        builder19.setmongoCollection("initial_timestamp");
        boolean boolean25 = builder19.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.skipInitialImport(false);
        builder19.disableIndexRefresh = true;
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder19.mongoClientOptions(mongoClientOptions30);
        builder31.setincludeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder35.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet38 = builder35.excludeFields;
        com.mongodb.BasicDBObject basicDBObject39 = builder35.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp40 = builder35.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray41 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList42 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList42, serverAddressArray41);
        builder35.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList42);
        builder34.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList42);
        builder34.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder34.advancedTransformation(false);
        builder34.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject52 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder34.typeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder34.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject57 = builder56.getmongoCollectionFilter();
        builder31.mongoCollectionFilter = basicDBObject57;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "host" + "'", str16, "host");
        org.junit.Assert.assertNotNull(eSLogger17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNull(wildcardTimestamp40);
        org.junit.Assert.assertNotNull(serverAddressArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(basicDBObject57);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder12.setmongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.statisticsTypeName("name");
        int int17 = builder16.throttleSize;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = builder2.getadvancedTransformation();
        boolean boolean39 = builder2.mongoSecondaryReadPreference;
        boolean boolean40 = builder2.getdisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject41 = builder2.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder2.riverIndexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("include_fields");
        builder43.setstatisticsTypeName("exclude_fields");
        java.lang.String str48 = builder43.mongoAdminPassword;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.script("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder2.mongoDb;
        java.lang.String str47 = builder2.mongoAdminPassword;
        builder2.includeCollection = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder2.riverName("port");
        org.bson.types.Binary binary52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.initialTimestamp(binary52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str16 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "admin" + "'", str12, "admin");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(byteSizeValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disable_index_refresh" + "'", str16, "disable_index_refresh");
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str18 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsTypeName("filter");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str18 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.scriptType;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "host" + "'", str18, "host");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        boolean boolean16 = builder12.mongoGridFS;
        java.lang.String str17 = builder12.statisticsTypeName;
        builder12.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder12.mongoLocalUser("admin");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean10 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str11 = mongoDBRiverDefinition8.script;
        java.lang.String str12 = mongoDBRiverDefinition8.riverIndexName;
        boolean boolean13 = mongoDBRiverDefinition8.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str18 = mongoDBRiverDefinition9.riverName;
        boolean boolean19 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        boolean boolean20 = mongoDBRiverDefinition9.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.util.Set<java.lang.String> strSet3 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.script("script");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.typeName("connect_timeout");
        java.lang.String str10 = builder6.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.storeStatistics(true);
        java.lang.String str13 = builder12.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder14.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet17 = builder14.excludeFields;
        builder14.setmongoCollection("initial_timestamp");
        boolean boolean20 = builder14.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.script("script");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.script("script");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.typeName("connect_timeout");
        boolean boolean34 = builder30.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.script("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder30.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder27.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder12.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder2.parentTypes((java.util.Set<java.lang.String>) strSet70);
        builder76.mongoAdminUser = "password";
        builder76.setmongoLocalPassword("script");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.dropCollection(true);
        java.lang.Class<?> wildcardClass19 = builder18.getClass();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("import_all_collections", "disable_index_refresh");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?disable_index_refresh?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoDb("");
        builder10.mongoSecondaryReadPreference = true;
        builder10.scriptType = "include_fields";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setscript("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.storeStatistics(false);
        builder17.setmongoAdminUser("index");
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        builder17.setmongoClientOptions(mongoClientOptions20);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        boolean boolean10 = builder0.getmongoUseSSL();
        java.lang.String str11 = builder0.script;
        builder0.riverIndexName = "local";
        java.lang.String str14 = builder0.getmongoDb();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder8.importAllCollections = true;
        builder8.mongoDb = "throttle_size";
        java.lang.String str13 = builder8.getindexName();
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder8.mongoClientOptions;
        builder8.setmongoGridFS(false);
        java.lang.String str17 = builder8.gettypeName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.script("script");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.typeName("connect_timeout");
        boolean boolean7 = builder3.mongoGridFS;
        boolean boolean8 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder3.build();
        java.lang.String str10 = mongoDBRiverDefinition9.mongoDb;
        java.lang.String str11 = mongoDBRiverDefinition9.getMongoLocalPassword();
        boolean boolean12 = mongoDBRiverDefinition9.getmongoGridFS();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = riverSettings14.settings();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(true);
        java.lang.String str45 = builder44.typeName;
        int int46 = builder44.getconnectTimeout();
        builder44.setincludeCollection("concurrent_bulk_requests");
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder44.mongoClientOptions;
        java.lang.String str50 = builder44.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder44.riverName("ssl");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setscript("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.storeStatistics(false);
        int int18 = builder12.getthrottleSize();
        builder12.importAllCollections = false;
        builder12.indexName = "password";
        boolean boolean23 = builder12.advancedTransformation;
        builder12.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet6 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoLocalUser("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.connectTimeout((int) (short) -1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        java.lang.String str12 = builder0.getmongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoClientOptions(mongoClientOptions13);
        java.lang.String str15 = builder0.riverName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.mongoLocalPassword = "script_type";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.util.Set<java.lang.String> strSet2 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("include_collection");
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = builder4.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList5);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.typeName;
        java.lang.String str15 = mongoDBRiverDefinition9.getPORT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl_verify_certificate" + "'", str13, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "port" + "'", str15, "port");
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = null;
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory13.newScript(strMap14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        builder22.setmongoCollection("initial_timestamp");
        boolean boolean28 = builder22.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.lang.String str32 = mongoDBRiverDefinition31.includeCollection;
        java.lang.String str33 = mongoDBRiverDefinition31.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet34 = mongoDBRiverDefinition31.excludeFields;
        boolean boolean35 = mongoDBRiverDefinition31.getstoreStatistics();
        boolean boolean36 = mongoDBRiverDefinition31.getmongoGridFS();
        java.lang.String str37 = mongoDBRiverDefinition31.getSECONDARY_READ_PREFERENCE_FIELD();
        int int38 = mongoDBRiverDefinition31.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition31.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript40 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        builder0.mongoCollectionFilter = basicDBObject39;
        builder0.setmongoCollection("ssl");
        java.util.Set<java.lang.String> strSet44 = builder0.getincludeFields();
        int int45 = builder0.throttleSize;
        builder0.mongoAdminPassword = "import_all_collections";
        builder0.typeName = "script";
        java.util.Set<java.lang.String> strSet50 = builder0.getexcludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "collection" + "'", str33, "collection");
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "secondary_read_preference" + "'", str37, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(executableScript40);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(strSet50);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getDB_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        int int12 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str13 = mongoDBRiverDefinition9.getRiverName();
        org.elasticsearch.common.unit.TimeValue timeValue14 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str15 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        builder9.setdisableIndexRefresh(true);
        builder9.storeStatistics = true;
        builder9.riverName = "flush_interval";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str15 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str16 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str17 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.Class<?> wildcardClass18 = mongoDBRiverDefinition9.getClass();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "size" + "'", str17, "size");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        int int7 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        builder10.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder22.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        builder22.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder10.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder10.indexName("");
        builder34.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("script");
        java.lang.String[] strArray74 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder42.setparentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet75);
        builder34.mongoCollection = "host";
        boolean boolean82 = builder34.advancedTransformation;
        java.util.List<com.mongodb.ServerAddress> serverAddressList83 = builder34.mongoServers;
        builder0.setmongoServers(serverAddressList83);
        boolean boolean85 = builder0.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNull(wildcardTimestamp27);
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(serverAddressList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("drop_collection", "credentials");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?credentials?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean16 = builder0.getimportAllCollections();
        builder0.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.dropCollection(false);
        boolean boolean21 = builder20.getstoreStatistics();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("options", "local");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?local?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.riverIndexName("filter");
        builder12.setincludeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoLocalUser("flush_interval");
        boolean boolean17 = builder12.importAllCollections;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextVar("disable_index_refresh", (java.lang.Object) "index");
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("hi!");
        boolean boolean14 = builder8.importAllCollections;
        java.lang.String str15 = builder8.mongoAdminPassword;
        java.lang.Object obj16 = docScoreSearchScript0.unwrap((java.lang.Object) builder8);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        builder1.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder1.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder1.statisticsIndexName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject13 = builder12.getmongoCollectionFilter();
        org.elasticsearch.common.settings.Settings settings14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("script");
        java.lang.String[] strArray52 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder15.excludeFields((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder57.script("script");
        com.mongodb.BasicDBObject basicDBObject60 = builder59.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder15.mongoOplogFilter(basicDBObject60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder15.mongoLocalPassword("bulk_timeout");
        builder15.setriverIndexName("disable_index_refresh");
        builder15.mongoLocalUser = "";
        com.mongodb.BasicDBObject basicDBObject68 = builder15.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings69 = new org.elasticsearch.river.RiverSettings(settings14, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        builder12.mongoOplogFilter = basicDBObject68;
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(basicDBObject68);
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoSSLVerifyCertificate(false);
        java.lang.String str21 = builder20.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.riverName;
        java.lang.String str14 = mongoDBRiverDefinition9.indexName;
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.statisticsTypeName;
        java.lang.String str18 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.excludeFields;
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.includeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "admin" + "'", str18, "admin");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(strSet20);
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.riverIndexName;
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "initial_timestamp" + "'", str21, "initial_timestamp");
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str20 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.isAdvancedTransformation();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "skip_initial_import" + "'", str13, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "servers" + "'", str14, "servers");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "flush_interval" + "'", str16, "flush_interval");
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        boolean boolean18 = mongoDBRiverDefinition9.getdropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean20 = mongoDBRiverDefinition9.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsIndexName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        boolean boolean13 = builder11.getstoreStatistics();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.riverName;
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str17 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean19 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder24.setskipInitialImport(true);
        builder24.riverName = "index";
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        builder24.mongoClientOptions = mongoClientOptions29;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoLocalUser("user");
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder0.mongoServers;
        builder0.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(serverAddressList28);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder5.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder5.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoSecondaryReadPreference(false);
        boolean boolean23 = builder20.mongoGridFS;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder20.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList25);
        builder0.mongoServers = serverAddressList25;
        java.lang.String str29 = builder0.getriverName();
        builder0.setmongoAdminPassword("index");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean14 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getIncludeFields();
        boolean boolean17 = mongoDBRiverDefinition9.importAllCollections;
        int int18 = mongoDBRiverDefinition9.throttleSize;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str20 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean22 = mongoDBRiverDefinition9.importAllCollections;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "collection" + "'", str20, "collection");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.riverName("secondary_read_preference");
        boolean boolean25 = builder24.getmongoSecondaryReadPreference();
        builder24.setmongoAdminPassword("");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk_timeout" + "'", str13, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.initial_timestamp" + "'", str14, "null.initial_timestamp");
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(true);
        java.lang.String str45 = builder44.typeName;
        int int46 = builder44.getconnectTimeout();
        builder44.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder44.throttleSize((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder50.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(mongoClientOptions51);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        java.lang.String str7 = builder2.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.typeName("concurrent_requests");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.indexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder12.mongoDb("type");
        boolean boolean77 = builder12.getstoreStatistics();
        java.util.Set<java.lang.String> strSet78 = builder12.getparentTypes();
        builder12.setskipInitialImport(true);
        builder12.settypeName("options");
        builder12.disableIndexRefresh = true;
        boolean boolean85 = builder12.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        int int18 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str19 = mongoDBRiverDefinition9.riverIndexName;
        java.lang.String str20 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1000 + "'", int18 == 1000);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "advanced_transformation" + "'", str20, "advanced_transformation");
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "actions" + "'", str18, "actions");
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder12.mongoDb("type");
        boolean boolean77 = builder12.getstoreStatistics();
        java.util.Set<java.lang.String> strSet78 = builder12.getparentTypes();
        builder12.setskipInitialImport(true);
        builder12.settypeName("options");
        java.util.Set<java.lang.String> strSet83 = builder12.getexcludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        builder3.setmongoCollection("initial_timestamp");
        boolean boolean9 = builder3.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.skipInitialImport(false);
        builder3.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.socketTimeout((int) (short) 1);
        builder3.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.importAllCollections(false);
        java.util.Set<java.lang.String> strSet20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.includeFields(strSet20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        builder22.setmongoCollection("initial_timestamp");
        boolean boolean28 = builder22.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.skipInitialImport(false);
        java.lang.String str31 = builder30.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        java.lang.String str37 = builder32.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        boolean boolean42 = builder41.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder41.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder54.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet57 = builder54.excludeFields;
        com.mongodb.BasicDBObject basicDBObject58 = builder54.getmongoCollectionFilter();
        java.lang.String str59 = builder54.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray60 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList61 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList61, serverAddressArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList61);
        java.lang.String str64 = builder54.mongoAdminPassword;
        java.lang.String[] strArray69 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder54.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder41.excludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder77.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet80 = builder77.excludeFields;
        com.mongodb.BasicDBObject basicDBObject81 = builder77.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp82 = builder77.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray83 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList84 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList84, serverAddressArray83);
        builder77.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList84);
        java.lang.String str87 = builder77.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder77.dropCollection(true);
        java.lang.String str90 = builder89.typeName;
        builder89.setmongoSecondaryReadPreference(false);
        builder89.setstatisticsTypeName("gridfs");
        java.lang.String str95 = builder89.script;
        java.lang.Object obj96 = docScoreSearchScript0.unwrap((java.lang.Object) builder89);
        docScoreSearchScript0.setNextScore((float) (short) -1);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(serverAddressArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNull(wildcardTimestamp82);
        org.junit.Assert.assertNotNull(serverAddressArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(obj96);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.mongoSSLVerifyCertificate(true);
        builder3.script = "import_all_collections";
        boolean boolean11 = builder3.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ScriptService scriptService16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("password", "collection", riverSettings15, scriptService16);
        java.lang.String str18 = mongoDBRiverDefinition17.statisticsTypeName;
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet24 = builder0.includeFields;
        java.lang.String str25 = builder0.mongoCollection;
        builder0.mongoAdminPassword = "socket_timeout";
        builder0.setmongoAdminUser("hi!");
        org.bson.types.Binary binary30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.initialTimestamp(binary30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        java.lang.String str13 = builder8.getscript();
        builder8.script = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoLocalPassword("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = builder17.build();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("script");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.mongoOplogFilter(basicDBObject45);
        builder46.setmongoCollection("actions");
        builder46.setmongoGridFS(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        boolean boolean23 = builder16.mongoGridFS;
        int int24 = builder16.getsocketTimeout();
        builder16.setimportAllCollections(true);
        builder16.setmongoLocalUser("import_all_collections");
        builder16.skipInitialImport = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.parentTypes;
        boolean boolean18 = mongoDBRiverDefinition9.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoCollectionFilter;
        int int20 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str21 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script_type" + "'", str21, "script_type");
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("throttle_size", "password", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?password?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("script");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.typeName("connect_timeout");
        boolean boolean22 = builder18.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.script("script");
        java.lang.String[] strArray57 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder13.statisticsIndexName("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder64.includeCollection("options");
        java.lang.String str67 = builder66.getincludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "options" + "'", str67, "options");
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        java.lang.String str6 = builder2.getmongoDb();
        int int7 = builder2.getthrottleSize();
        boolean boolean8 = builder2.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        java.util.Set<java.lang.String> strSet2 = builder0.getexcludeFields();
        builder0.mongoAdminPassword = "bulk_size";
        java.lang.String str5 = builder0.getindexName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder24.setskipInitialImport(true);
        builder24.riverName = "index";
        boolean boolean29 = builder24.skipInitialImport;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory3 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = null;
        org.elasticsearch.script.ExecutableScript executableScript5 = docScoreNativeScriptFactory3.newScript(strMap4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript11 = docScoreNativeScriptFactory3.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = riverSettings12.settings();
        org.elasticsearch.script.ScriptService scriptService14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "", riverSettings12, scriptService14);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = riverSettings12.settings();
        org.junit.Assert.assertNotNull(executableScript5);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = mongoDBRiverDefinition9.getMongoServers();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        builder9.mongoUseSSL = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean20 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str21 = mongoDBRiverDefinition9.indexName;
        java.lang.String str22 = mongoDBRiverDefinition9.getStatisticsIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        int int10 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "admin" + "'", str11, "admin");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "options" + "'", str18, "options");
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder0.mongoSecondaryReadPreference = false;
        boolean boolean25 = builder0.disableIndexRefresh;
        boolean boolean26 = builder0.getimportAllCollections();
        java.lang.String str27 = builder0.statisticsIndexName;
        builder0.throttleSize = 35;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.script("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet40);
        boolean boolean44 = builder43.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder45.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet48 = builder45.excludeFields;
        builder45.setmongoCollection("initial_timestamp");
        boolean boolean51 = builder45.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.skipInitialImport(false);
        builder45.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder45.socketTimeout((int) (short) 1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList58 = builder45.mongoServers;
        builder43.setmongoServers(serverAddressList58);
        builder43.setscript("credentials");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(serverAddressList58);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.util.Set<java.lang.String> strSet10 = builder9.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        builder11.setmongoCollection("initial_timestamp");
        boolean boolean17 = builder11.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.skipInitialImport(false);
        builder11.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.scriptType("bulk_size");
        boolean boolean24 = builder11.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder11.mongoAdminPassword("bulk");
        builder11.setmongoUseSSL(true);
        java.lang.String str29 = builder11.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder11.typeName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.storeStatistics(true);
        com.mongodb.BasicDBObject basicDBObject34 = builder31.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder9.mongoOplogFilter(basicDBObject34);
        boolean boolean36 = builder9.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        int int19 = mongoDBRiverDefinition9.getThrottleSize();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str21 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondary_read_preference" + "'", str21, "secondary_read_preference");
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        int int7 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder10.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet13 = builder10.excludeFields;
        builder10.setmongoCollection("initial_timestamp");
        boolean boolean16 = builder10.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.skipInitialImport(false);
        builder10.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder10.socketTimeout((int) (short) 1);
        builder10.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder10.importAllCollections(false);
        java.util.Set<java.lang.String> strSet27 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.includeFields(strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        builder29.setmongoCollection("initial_timestamp");
        boolean boolean35 = builder29.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.skipInitialImport(false);
        java.lang.String str38 = builder37.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder39.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet42 = builder39.excludeFields;
        com.mongodb.BasicDBObject basicDBObject43 = builder39.getmongoCollectionFilter();
        java.lang.String str44 = builder39.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray45 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList46 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList46, serverAddressArray45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder39.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList46);
        boolean boolean49 = builder48.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder50.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet53 = builder50.excludeFields;
        com.mongodb.BasicDBObject basicDBObject54 = builder50.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp55 = builder50.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray56 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList57 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList57, serverAddressArray56);
        builder50.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder48.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder61.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet64 = builder61.excludeFields;
        com.mongodb.BasicDBObject basicDBObject65 = builder61.getmongoCollectionFilter();
        java.lang.String str66 = builder61.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray67 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList68 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList68, serverAddressArray67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder61.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList68);
        java.lang.String str71 = builder61.mongoAdminPassword;
        java.lang.String[] strArray76 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        builder61.setincludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder48.excludeFields((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder37.parentTypes((java.util.Set<java.lang.String>) strSet77);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder28.excludeFields((java.util.Set<java.lang.String>) strSet77);
        builder0.excludeFields = strSet77;
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet86 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder0.mongoCollection("admin");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(serverAddressArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNull(wildcardTimestamp55);
        org.junit.Assert.assertNotNull(serverAddressArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(serverAddressArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(strSet86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        builder2.setmongoLocalUser("hi!");
        builder2.setmongoLocalPassword("ssl");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoDb("");
        java.lang.String str44 = builder43.indexName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoLocalPassword("bulk_timeout");
        builder22.throttleSize = (short) 0;
        builder22.throttleSize = 'a';
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "import_all_collections" + "'", str15, "import_all_collections");
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setthrottleSize((int) (short) -1);
        org.junit.Assert.assertNull(strSet3);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        boolean boolean14 = builder12.disableIndexRefresh;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder12.mongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout((int) (short) 1);
        builder0.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.includeFields(strSet17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        builder19.setmongoCollection("initial_timestamp");
        boolean boolean25 = builder19.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.skipInitialImport(false);
        java.lang.String str28 = builder27.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        com.mongodb.BasicDBObject basicDBObject33 = builder29.getmongoCollectionFilter();
        java.lang.String str34 = builder29.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray35 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList36 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList36, serverAddressArray35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder29.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList36);
        boolean boolean39 = builder38.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = builder40.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray46 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList47 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList47, serverAddressArray46);
        builder40.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder38.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder51.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet54 = builder51.excludeFields;
        com.mongodb.BasicDBObject basicDBObject55 = builder51.getmongoCollectionFilter();
        java.lang.String str56 = builder51.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray57 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList58 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList58, serverAddressArray57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder51.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList58);
        java.lang.String str61 = builder51.mongoAdminPassword;
        java.lang.String[] strArray66 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        builder51.setincludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder38.excludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder27.parentTypes((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder72.typeName("bulk_size");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(serverAddressArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertNotNull(serverAddressArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(serverAddressArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.statisticsIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getFILTER_FIELD();
        int int15 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean16 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.lang.String str17 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "filter" + "'", str14, "filter");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "options" + "'", str17, "options");
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.dropCollection(true);
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoOplogFilter();
        builder14.advancedTransformation = true;
        java.lang.String str18 = builder14.script;
        builder14.setmongoCollection("");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("include_fields");
        java.lang.String str21 = builder0.getmongoDb();
        com.mongodb.BasicDBObject basicDBObject22 = builder0.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder0.setmongoCollectionFilter(basicDBObject23);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        java.lang.String str5 = builder2.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.mongoClientOptions;
        boolean boolean15 = builder13.mongoUseSSL;
        java.lang.String str16 = builder13.getmongoLocalPassword();
        builder13.setmongoAdminUser("db");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        java.lang.String str5 = builder0.statisticsIndexName;
        com.mongodb.BasicDBObject basicDBObject6 = builder0.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet7 = builder0.excludeFields;
        java.lang.String str8 = builder0.includeCollection;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(basicDBObject6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions3 = null;
        builder0.mongoClientOptions = mongoClientOptions3;
        builder0.mongoUseSSL = true;
        builder0.setmongoSSLVerifyCertificate(false);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str20 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str22 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean23 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.Class<?> wildcardClass24 = mongoDBRiverDefinition9.getClass();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "collection" + "'", str20, "collection");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index" + "'", str21, "index");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        builder0.setconnectTimeout(35);
        builder0.riverIndexName = "db";
        builder0.settypeName("secondary_read_preference");
        int int13 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoDb("drop_collection");
        builder15.setmongoLocalPassword("bulk_size");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout(100);
        boolean boolean7 = builder0.getimportAllCollections();
        int int8 = builder0.socketTimeout;
        builder0.statisticsTypeName = "type";
        builder0.setincludeCollection("index");
        boolean boolean13 = builder0.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        int int25 = builder24.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder24.getinitialTimestamp();
        builder24.socketTimeout = (byte) 1;
        java.lang.String str29 = builder24.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = builder24.mongoServers;
        java.lang.String str31 = builder24.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.riverIndexName("port");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.indexName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        builder6.setsocketTimeout((int) '#');
        java.lang.String str11 = builder6.scriptType;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.riverIndexName;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disable_index_refresh" + "'", str13, "disable_index_refresh");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(basicDBObject15);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.scriptType("include_collection");
        builder0.setmongoDb("host");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        int int7 = builder0.getconnectTimeout();
        builder0.setsocketTimeout(1);
        builder0.setsocketTimeout(8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str18 = mongoDBRiverDefinition9.typeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        java.lang.String str17 = builder7.mongoAdminPassword;
        java.lang.String[] strArray22 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet23);
        int int27 = builder26.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject28 = builder26.getmongoOplogFilter();
        java.lang.String str29 = builder26.getmongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getPORT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getDB_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "port" + "'", str16, "port");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "db" + "'", str17, "db");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.statisticsIndexName;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        boolean boolean10 = builder9.getmongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject11 = builder9.getmongoOplogFilter();
        builder9.mongoSecondaryReadPreference = false;
        java.lang.String str14 = builder9.getriverName();
        com.mongodb.BasicDBObject basicDBObject15 = builder9.mongoCollectionFilter;
        int int16 = builder9.connectTimeout;
        boolean boolean17 = builder9.dropCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) ' ');
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.apache.lucene.search.Scorer scorer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder4.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet7 = builder4.excludeFields;
        builder4.setmongoCollection("initial_timestamp");
        boolean boolean10 = builder4.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.includeCollection;
        java.lang.String str15 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition13.isImportAllCollections();
        boolean boolean17 = mongoDBRiverDefinition13.mongoGridFS;
        docScoreSearchScript0.setNextVar("collection", (java.lang.Object) mongoDBRiverDefinition13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        com.mongodb.BasicDBObject basicDBObject24 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder20.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray26 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList27 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList27, serverAddressArray26);
        builder20.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        builder19.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        com.mongodb.BasicDBObject basicDBObject35 = builder31.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp36 = builder31.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray37 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList38 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList38, serverAddressArray37);
        builder31.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder19.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList38);
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoClientOptions(mongoClientOptions42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("script");
        java.lang.String[] strArray78 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder46.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder41.script("local");
        builder84.mongoSSLVerifyCertificate = false;
        int int87 = builder84.throttleSize;
        java.lang.String str88 = builder84.getincludeCollection();
        com.mongodb.BasicDBObject basicDBObject89 = builder84.mongoOplogFilter;
        java.lang.Object obj90 = docScoreSearchScript0.unwrap((java.lang.Object) basicDBObject89);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext91 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertNotNull(serverAddressArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNull(wildcardTimestamp36);
        org.junit.Assert.assertNotNull(serverAddressArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(basicDBObject89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder0.setriverIndexName("exclude_fields");
        java.lang.String str15 = builder0.mongoLocalUser;
        builder0.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.script("script");
        java.lang.String[] strArray55 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet56);
        java.lang.String str61 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder0.advancedTransformation(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getIncludeCollection();
        java.lang.String str11 = mongoDBRiverDefinition8.getUSER_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.mongoSecondaryReadPreference;
        java.lang.String str13 = mongoDBRiverDefinition8.getMongoAdminPassword();
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "user" + "'", str11, "user");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean19 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str20 = mongoDBRiverDefinition9.getScript();
        boolean boolean21 = mongoDBRiverDefinition9.disableIndexRefresh;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.typeName;
        java.lang.String str14 = mongoDBRiverDefinition9.getScript();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "skip_initial_import" + "'", str16, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        builder2.setstatisticsIndexName("password");
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder2.getmongoServers();
        com.mongodb.BasicDBObject basicDBObject12 = builder2.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.mongoUseSSL(true);
        boolean boolean15 = builder2.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject15 = builder12.mongoOplogFilter;
        builder12.setmongoUseSSL(false);
        java.lang.String str18 = builder12.getstatisticsTypeName();
        builder12.riverIndexName = "";
        boolean boolean21 = builder12.mongoUseSSL;
        boolean boolean22 = builder12.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "throttle_size" + "'", str18, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder2.mongoCollection = "servers";
        builder2.setincludeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.script("script");
        com.mongodb.BasicDBObject basicDBObject24 = builder23.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.typeName("connect_timeout");
        java.lang.String str27 = builder23.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.storeStatistics(true);
        java.lang.String str30 = builder29.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        builder31.setmongoCollection("initial_timestamp");
        boolean boolean37 = builder31.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("script");
        com.mongodb.BasicDBObject basicDBObject43 = builder42.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder31.mongoCollectionFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.script("script");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.typeName("connect_timeout");
        boolean boolean51 = builder47.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.script("script");
        java.lang.String[] strArray86 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        builder54.setparentTypes((java.util.Set<java.lang.String>) strSet87);
        builder47.setparentTypes((java.util.Set<java.lang.String>) strSet87);
        builder44.setincludeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder29.includeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder2.includeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder93.importAllCollections(true);
        builder93.setriverIndexName("throttle_size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isStoreStatistics();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.skipInitialImport(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder19.getmongoServers();
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.mongoClientOptions(mongoClientOptions21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.statisticsIndexName("options");
        builder24.setindexName("bulk_size");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("servers");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?servers?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        builder2.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp40 = builder2.getinitialTimestamp();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(wildcardTimestamp40);
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(1);
        java.util.Set<java.lang.String> strSet16 = builder15.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder15.getmongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        java.lang.String str7 = builder2.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.typeName("concurrent_requests");
        java.lang.String str10 = builder2.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        java.lang.String str16 = builder11.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        java.lang.String str21 = builder11.mongoAdminPassword;
        java.lang.String[] strArray26 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet27);
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        builder31.setmongoCollection("initial_timestamp");
        boolean boolean37 = builder31.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("script");
        com.mongodb.BasicDBObject basicDBObject43 = builder42.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder31.mongoCollectionFilter(basicDBObject43);
        builder2.setmongoCollectionFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("script");
        com.mongodb.BasicDBObject basicDBObject49 = builder48.getmongoCollectionFilter();
        builder48.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder48.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder53.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet56 = builder55.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder55.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder59.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet62 = builder59.excludeFields;
        com.mongodb.BasicDBObject basicDBObject63 = builder59.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp64 = builder59.initialTimestamp;
        builder59.setstatisticsTypeName("ssl_verify_certificate");
        java.util.Set<java.lang.String> strSet67 = builder59.getexcludeFields();
        builder59.scriptType = "initial_timestamp";
        java.lang.String str70 = builder59.gettypeName();
        builder59.setriverIndexName("actions");
        com.mongodb.BasicDBObject basicDBObject73 = builder59.getmongoCollectionFilter();
        builder58.setmongoOplogFilter(basicDBObject73);
        builder2.mongoOplogFilter = basicDBObject73;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNull(wildcardTimestamp64);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(basicDBObject73);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoLocalUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "local" + "'", str15, "local");
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("hi!");
        boolean boolean6 = builder0.importAllCollections;
        java.lang.String str7 = builder0.mongoAdminPassword;
        builder0.typeName = "concurrent_bulk_requests";
        builder0.setskipInitialImport(false);
        boolean boolean12 = builder0.getadvancedTransformation();
        int int13 = builder0.getconnectTimeout();
        org.bson.types.BSONTimestamp bSONTimestamp14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.initialTimestamp(bSONTimestamp14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        builder2.setmongoAdminUser("import_all_collections");
        builder2.skipInitialImport = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.scriptType("script_type");
        builder2.setindexName("bulk_size");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.statisticsIndexName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject12 = builder0.getmongoOplogFilter();
        boolean boolean13 = builder0.mongoGridFS;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder74.setskipInitialImport(true);
        int int77 = builder74.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder74.mongoAdminPassword("null.initial_timestamp");
        int int80 = builder74.throttleSize;
        java.lang.String str81 = builder74.typeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet24 = builder0.includeFields;
        java.lang.String str25 = builder0.mongoCollection;
        builder0.mongoAdminPassword = "socket_timeout";
        java.util.Set<java.lang.String> strSet28 = builder0.getincludeFields();
        builder0.throttleSize = 1;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strSet28);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.skipInitialImport;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition9.initialTimestamp;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoCollection();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.getParentTypes();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout(100);
        boolean boolean7 = builder0.getimportAllCollections();
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoGridFS(true);
        builder10.setstoreStatistics(false);
        builder10.setdisableIndexRefresh(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean16 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str19 = mongoDBRiverDefinition18.getMongoLocalUser();
        int int20 = mongoDBRiverDefinition18.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1000 + "'", int20 == 1000);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk" + "'", str16, "bulk");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_fields" + "'", str19, "include_fields");
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.parentTypes;
        boolean boolean19 = mongoDBRiverDefinition9.isAdvancedTransformation();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.script("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder2.mongoDb;
        builder2.mongoLocalPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.mongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder2.mongoSSLVerifyCertificate(true);
        builder2.setriverIndexName("local");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        boolean boolean17 = mongoDBRiverDefinition9.getadvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str19 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str21 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_timeout" + "'", str19, "bulk_timeout");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "concurrent_bulk_requests" + "'", str21, "concurrent_bulk_requests");
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoCollection("script");
        builder14.mongoDb = "admin";
        boolean boolean17 = builder14.dropCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str13 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        boolean boolean13 = builder12.mongoSSLVerifyCertificate;
        builder12.advancedTransformation = true;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(mongoClientOptions16);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition9.getExcludeFields();
        boolean boolean11 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str14 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "size" + "'", str14, "size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder9.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        builder9.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        java.util.Set<java.lang.String> strSet20 = null;
        builder8.excludeFields = strSet20;
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder8);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.util.Set<java.lang.String> strSet10 = builder9.getexcludeFields();
        builder9.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder10.setmongoSecondaryReadPreference(false);
        boolean boolean13 = builder10.getmongoSSLVerifyCertificate();
        java.lang.String str14 = builder10.getriverIndexName();
        builder10.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoUseSSL(true);
        builder10.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder10.script("bulk");
        com.mongodb.BasicDBObject basicDBObject23 = builder10.mongoCollectionFilter;
        builder0.mongoCollectionFilter = basicDBObject23;
        builder0.riverName = "concurrent_bulk_requests";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder0.mongoUseSSL(false);
        builder0.mongoDb = "admin";
        java.lang.String str31 = builder0.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.script("script");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        builder3.mongoUseSSL = false;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory7 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        java.lang.String str13 = builder8.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder8.getmongoClientOptions();
        builder8.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder21.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet24 = builder21.excludeFields;
        com.mongodb.BasicDBObject basicDBObject25 = builder21.getmongoCollectionFilter();
        builder8.setmongoOplogFilter(basicDBObject25);
        org.elasticsearch.script.ExecutableScript executableScript27 = docScoreNativeScriptFactory7.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        builder3.mongoOplogFilter = basicDBObject25;
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        builder30.setmongoCollection("initial_timestamp");
        boolean boolean36 = builder30.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.script("script");
        com.mongodb.BasicDBObject basicDBObject42 = builder41.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder30.mongoCollectionFilter(basicDBObject42);
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder45.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet48 = builder45.excludeFields;
        builder45.setmongoCollection("initial_timestamp");
        boolean boolean51 = builder45.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder45.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder53);
        java.lang.String str55 = mongoDBRiverDefinition54.includeCollection;
        java.lang.String str56 = mongoDBRiverDefinition54.getIndexName();
        java.lang.String str57 = mongoDBRiverDefinition54.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str58 = mongoDBRiverDefinition54.script;
        java.lang.String str59 = mongoDBRiverDefinition54.getGRIDFS_FIELD();
        int int60 = mongoDBRiverDefinition54.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp61 = mongoDBRiverDefinition54.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject62 = mongoDBRiverDefinition54.mongoCollectionFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = mongoDBRiverDefinition54.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject64 = mongoDBRiverDefinition54.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript65 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder66.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet69 = builder66.excludeFields;
        builder66.setmongoCollection("initial_timestamp");
        boolean boolean72 = builder66.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder66.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition75 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder74);
        java.lang.String str76 = mongoDBRiverDefinition75.includeCollection;
        java.lang.String str77 = mongoDBRiverDefinition75.getIndexName();
        java.lang.String str78 = mongoDBRiverDefinition75.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str79 = mongoDBRiverDefinition75.script;
        java.lang.String str80 = mongoDBRiverDefinition75.getGRIDFS_FIELD();
        java.lang.String str81 = mongoDBRiverDefinition75.mongoCollection;
        java.lang.String str82 = mongoDBRiverDefinition75.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject83 = mongoDBRiverDefinition75.getMongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript84 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject83);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(executableScript27);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "secondary_read_preference" + "'", str57, "secondary_read_preference");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "gridfs" + "'", str59, "gridfs");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertNotNull(executableScript65);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "secondary_read_preference" + "'", str78, "secondary_read_preference");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "gridfs" + "'", str80, "gridfs");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "initial_timestamp" + "'", str81, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "gridfs" + "'", str82, "gridfs");
        org.junit.Assert.assertNotNull(basicDBObject83);
        org.junit.Assert.assertNotNull(executableScript84);
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder11.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder11.advancedTransformation(false);
        builder11.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject29 = builder11.getmongoCollectionFilter();
        builder0.setmongoCollectionFilter(basicDBObject29);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject29);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ssl" + "'", str13, "ssl");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "collection" + "'", str14, "collection");
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.parentTypes;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.elasticsearch.river.RiverSettings riverSettings2 = null;
        org.elasticsearch.script.ScriptService scriptService3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("exclude_fields", "include_collection", riverSettings2, scriptService3);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchNullPointerException; message: No settings specified");
        } catch (org.elasticsearch.ElasticsearchNullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory1 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder2.script("script");
        com.mongodb.BasicDBObject basicDBObject5 = builder4.getmongoCollectionFilter();
        builder4.mongoUseSSL = false;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        java.lang.String str14 = builder9.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder9.getmongoClientOptions();
        builder9.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        builder9.setmongoOplogFilter(basicDBObject26);
        org.elasticsearch.script.ExecutableScript executableScript28 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        builder4.mongoOplogFilter = basicDBObject26;
        org.elasticsearch.script.ExecutableScript executableScript30 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        com.mongodb.BasicDBObject basicDBObject35 = builder31.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp36 = builder31.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray37 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList38 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList38, serverAddressArray37);
        builder31.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList38);
        java.lang.String str41 = builder31.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder31.dropCollection(true);
        boolean boolean44 = builder43.mongoSSLVerifyCertificate;
        java.lang.String str45 = builder43.typeName;
        builder43.mongoGridFS = true;
        builder43.mongoLocalPassword = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder50.script("script");
        int int53 = builder52.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder52.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder55.setmongoSecondaryReadPreference(false);
        boolean boolean58 = builder55.getmongoSSLVerifyCertificate();
        java.lang.String str59 = builder55.getriverIndexName();
        builder55.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder55.mongoUseSSL(true);
        builder55.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder55.script("bulk");
        com.mongodb.BasicDBObject basicDBObject68 = builder55.mongoCollectionFilter;
        builder52.setmongoOplogFilter(basicDBObject68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder43.mongoCollectionFilter(basicDBObject68);
        org.elasticsearch.script.ExecutableScript executableScript71 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.elasticsearch.river.RiverSettings riverSettings72 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject68);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript28);
        org.junit.Assert.assertNotNull(executableScript30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNull(wildcardTimestamp36);
        org.junit.Assert.assertNotNull(serverAddressArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(executableScript71);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        boolean boolean25 = builder0.importAllCollections;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("hi!");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?hi!?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet24 = builder0.includeFields;
        java.lang.String str25 = builder0.mongoCollection;
        builder0.mongoAdminPassword = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.storeStatistics(false);
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.mongoSecondaryReadPreference(true);
        java.lang.String str33 = builder29.getindexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        boolean boolean17 = mongoDBRiverDefinition9.getadvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str19 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk_timeout" + "'", str19, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "credentials" + "'", str20, "credentials");
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        java.lang.String str5 = builder4.getmongoLocalUser();
        builder4.mongoGridFS = true;
        builder4.setskipInitialImport(true);
        boolean boolean10 = builder4.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        java.lang.String str9 = builder8.typeName;
        java.util.Set<java.lang.String> strSet10 = builder8.includeFields;
        builder8.mongoSSLVerifyCertificate = true;
        builder8.advancedTransformation = false;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder8.setmongoClientOptions(mongoClientOptions15);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean16 = mongoDBRiverDefinition9.getdropCollection();
        boolean boolean17 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "advanced_transformation" + "'", str18, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "options" + "'", str19, "options");
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean16 = mongoDBRiverDefinition9.getdropCollection();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.getParentTypes();
        java.lang.String str18 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        boolean boolean19 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "localhost" + "'", str18, "localhost");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean14 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean15 = mongoDBRiverDefinition9.getskipInitialImport();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str18 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean19 = mongoDBRiverDefinition9.getimportAllCollections();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str15 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.statisticsIndexName;
        boolean boolean18 = mongoDBRiverDefinition9.disableIndexRefresh;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_collection" + "'", str15, "include_collection");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition9.isStoreStatistics();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean16 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk_timeout" + "'", str17, "bulk_timeout");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        boolean boolean22 = builder21.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder21.connectTimeout((int) '4');
        builder24.indexName = "admin";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        java.lang.String str14 = builder0.getriverIndexName();
        java.lang.String str15 = builder0.mongoDb;
        builder0.mongoSSLVerifyCertificate = false;
        boolean boolean18 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoSecondaryReadPreference(false);
        builder0.setimportAllCollections(false);
        builder0.setadvancedTransformation(true);
        builder0.mongoGridFS = true;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        boolean boolean10 = builder0.getmongoUseSSL();
        java.lang.String str11 = builder0.script;
        builder0.riverIndexName = "local";
        com.mongodb.BasicDBObject basicDBObject14 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        int int10 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition8.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "admin" + "'", str11, "admin");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null.null" + "'", str12, "null.null");
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.script;
        boolean boolean16 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        builder12.connectTimeout = 0;
        builder12.setdropCollection(false);
        java.lang.String str17 = builder12.mongoLocalPassword;
        builder12.disableIndexRefresh = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        builder0.mongoDb = "host";
        builder0.mongoSecondaryReadPreference = true;
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        boolean boolean15 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str16 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        int int15 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition9.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition9.getMongoServers();
        int int19 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str15 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str20 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_collection" + "'", str16, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "password" + "'", str20, "password");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        builder0.advancedTransformation = true;
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        builder0.mongoClientOptions = mongoClientOptions18;
        builder0.riverIndexName = "filter";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean13 = mongoDBRiverDefinition9.disableIndexRefresh;
        int int14 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str16 = mongoDBRiverDefinition9.getHOST_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "host" + "'", str16, "host");
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.mongoCollection;
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.riverIndexName;
        java.lang.String str16 = mongoDBRiverDefinition9.getIncludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str19 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoAdminUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "skip_initial_import" + "'", str19, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "exclude_fields" + "'", str20, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.parentTypes;
        boolean boolean18 = mongoDBRiverDefinition9.getdropCollection();
        boolean boolean19 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        int int20 = mongoDBRiverDefinition9.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition9.getMongoServers();
        boolean boolean22 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoLocalUser("user");
        boolean boolean28 = builder27.getstoreStatistics();
        builder27.mongoLocalUser = "localhost";
        boolean boolean31 = builder27.disableIndexRefresh;
        java.lang.String str32 = builder27.getscriptType();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.disableIndexRefresh(true);
        java.util.Set<java.lang.String> strSet11 = builder10.parentTypes;
        builder10.setstoreStatistics(false);
        java.lang.String str14 = builder10.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.dropCollection(true);
        com.mongodb.BasicDBObject basicDBObject15 = builder14.getmongoOplogFilter();
        builder14.advancedTransformation = true;
        boolean boolean18 = builder14.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextVar("disable_index_refresh", (java.lang.Object) "index");
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        boolean boolean19 = mongoDBRiverDefinition17.mongoGridFS;
        java.lang.String str20 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition17.getExcludeFields();
        java.lang.String str22 = mongoDBRiverDefinition17.mongoLocalUser;
        java.lang.Object obj23 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet27 = builder24.excludeFields;
        builder24.setmongoCollection("initial_timestamp");
        boolean boolean30 = builder24.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.includeCollection;
        java.lang.String str35 = mongoDBRiverDefinition33.getTypeName();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition33.getMongoCollectionFilter();
        java.lang.String str37 = mongoDBRiverDefinition33.mongoLocalPassword;
        java.lang.Object obj38 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition33);
        java.lang.String str39 = mongoDBRiverDefinition33.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean40 = mongoDBRiverDefinition33.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "import_all_collections" + "'", str39, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean10 = mongoDBRiverDefinition8.mongoUseSSL;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition8.parentTypes;
        java.lang.String str12 = mongoDBRiverDefinition8.getFILTER_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "filter" + "'", str12, "filter");
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.mongoClientOptions(mongoClientOptions13);
        int int15 = builder14.getthrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition9.riverName;
        boolean boolean16 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        java.lang.String str17 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.getmongoGridFS();
        boolean boolean19 = mongoDBRiverDefinition9.isSkipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.riverIndexName("filter");
        builder12.setincludeCollection("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.mongoLocalUser("flush_interval");
        boolean boolean17 = builder16.skipInitialImport;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) ' ');
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder9.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        builder9.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        com.mongodb.BasicDBObject basicDBObject24 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder20.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray26 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList27 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList27, serverAddressArray26);
        builder20.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder8.indexName("");
        int int33 = builder32.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = builder32.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder35.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet38 = builder35.excludeFields;
        com.mongodb.BasicDBObject basicDBObject39 = builder35.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp40 = builder35.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray41 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList42 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList42, serverAddressArray41);
        builder35.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList42);
        java.lang.String str45 = builder35.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder35.dropCollection(true);
        java.lang.String str48 = builder35.mongoCollection;
        java.lang.String str49 = builder35.includeCollection;
        boolean boolean50 = builder35.getstoreStatistics();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = null;
        org.elasticsearch.script.ExecutableScript executableScript53 = docScoreNativeScriptFactory51.newScript(strMap52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder54.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet57 = builder54.excludeFields;
        com.mongodb.BasicDBObject basicDBObject58 = builder54.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript59 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        builder60.setmongoCollection("initial_timestamp");
        boolean boolean66 = builder60.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.lang.String str70 = mongoDBRiverDefinition69.includeCollection;
        java.lang.String str71 = mongoDBRiverDefinition69.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition69.excludeFields;
        boolean boolean73 = mongoDBRiverDefinition69.getstoreStatistics();
        boolean boolean74 = mongoDBRiverDefinition69.getmongoGridFS();
        java.lang.String str75 = mongoDBRiverDefinition69.getSECONDARY_READ_PREFERENCE_FIELD();
        int int76 = mongoDBRiverDefinition69.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition69.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript78 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        builder35.setmongoCollectionFilter(basicDBObject77);
        builder32.mongoOplogFilter = basicDBObject77;
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) builder32);
        docScoreSearchScript0.setNextScore(0.0f);
        org.apache.lucene.search.Scorer scorer84 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "name" + "'", obj6, "name");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertNotNull(serverAddressArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNull(wildcardTimestamp40);
        org.junit.Assert.assertNotNull(serverAddressArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(executableScript53);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(executableScript59);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "collection" + "'", str71, "collection");
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "secondary_read_preference" + "'", str75, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(executableScript78);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition9.isStoreStatistics();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean16 = mongoDBRiverDefinition9.advancedTransformation;
        int int17 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str18 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_fields" + "'", str18, "include_fields");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "initial_timestamp" + "'", str19, "initial_timestamp");
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        builder0.riverName = "ssl";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoAdminPassword("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalPassword("include_collection");
        java.lang.String str21 = builder20.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean10 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str11 = mongoDBRiverDefinition8.script;
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean13 = mongoDBRiverDefinition8.isStoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition8.advancedTransformation;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.mongoUseSSL(false);
        builder5.setmongoDb("bulk_size");
        org.bson.types.BSONTimestamp bSONTimestamp8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.initialTimestamp(bSONTimestamp8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        boolean boolean16 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str19 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "password" + "'", str19, "password");
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        boolean boolean5 = builder4.advancedTransformation;
        int int6 = builder4.getconnectTimeout();
        boolean boolean7 = builder4.skipInitialImport;
        java.lang.String str8 = builder4.getriverName();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        java.lang.String str11 = builder8.getmongoLocalPassword();
        builder8.setriverIndexName("ssl");
        builder8.setconnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder8.getmongoClientOptions();
        boolean boolean17 = builder8.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder0.importAllCollections = false;
        boolean boolean27 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoCollection("user");
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("concurrent_requests", "host");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?host?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        builder8.includeCollection = "";
        java.lang.String str15 = builder8.getscriptType();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder8.setmongoClientOptions(mongoClientOptions16);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory1 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap2 = null;
        org.elasticsearch.script.ExecutableScript executableScript3 = docScoreNativeScriptFactory1.newScript(strMap2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder4.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet7 = builder4.excludeFields;
        com.mongodb.BasicDBObject basicDBObject8 = builder4.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript9 = docScoreNativeScriptFactory1.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        org.elasticsearch.river.RiverSettings riverSettings10 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = riverSettings10.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = riverSettings10.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = riverSettings10.settings();
        org.junit.Assert.assertNotNull(executableScript3);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(basicDBObject8);
        org.junit.Assert.assertNotNull(executableScript9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        int int15 = mongoDBRiverDefinition9.connectTimeout;
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str20 = mongoDBRiverDefinition9.getDB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.riverIndexName;
        java.lang.String str22 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index" + "'", str19, "index");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "db" + "'", str20, "db");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "password" + "'", str22, "password");
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        java.lang.String str5 = builder4.getmongoLocalUser();
        builder4.mongoGridFS = true;
        java.lang.String str8 = builder4.getscript();
        java.lang.String str9 = builder4.gettypeName();
        builder4.mongoDb = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        builder12.setmongoCollection("initial_timestamp");
        boolean boolean18 = builder12.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.lang.String str22 = mongoDBRiverDefinition21.includeCollection;
        java.lang.String str23 = mongoDBRiverDefinition21.getHOST_FIELD();
        boolean boolean24 = mongoDBRiverDefinition21.isAdvancedTransformation();
        java.lang.String str25 = mongoDBRiverDefinition21.getMongoCollection();
        java.lang.String str26 = mongoDBRiverDefinition21.getBULK_TIMEOUT_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition21.getCONCURRENT_BULK_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject28 = mongoDBRiverDefinition21.mongoCollectionFilter;
        builder4.setmongoOplogFilter(basicDBObject28);
        java.lang.String str30 = builder4.mongoCollection;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "host" + "'", str23, "host");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "initial_timestamp" + "'", str25, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bulk_timeout" + "'", str26, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "concurrent_bulk_requests" + "'", str27, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getNAME_FIELD();
        int int14 = mongoDBRiverDefinition9.getThrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("initial_timestamp", "db", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?db?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoSecondaryReadPreference(false);
        builder0.setadvancedTransformation(false);
        java.lang.String str18 = builder0.getriverIndexName();
        builder0.dropCollection = false;
        boolean boolean21 = builder0.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        boolean boolean13 = builder12.mongoSSLVerifyCertificate;
        java.lang.String str14 = builder12.typeName;
        builder12.mongoGridFS = true;
        builder12.mongoLocalPassword = "skip_initial_import";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        java.lang.String str24 = builder19.mongoLocalUser;
        builder19.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.skipInitialImport(true);
        int int29 = builder19.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("script");
        com.mongodb.BasicDBObject basicDBObject33 = builder32.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder32.typeName("connect_timeout");
        boolean boolean36 = builder32.mongoGridFS;
        java.lang.String str37 = builder32.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder32.typeName("concurrent_requests");
        java.lang.String str40 = builder32.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder41.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet44 = builder41.excludeFields;
        com.mongodb.BasicDBObject basicDBObject45 = builder41.getmongoCollectionFilter();
        java.lang.String str46 = builder41.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray47 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList48 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList48, serverAddressArray47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder41.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList48);
        java.lang.String str51 = builder41.mongoAdminPassword;
        java.lang.String[] strArray56 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        builder41.setincludeFields((java.util.Set<java.lang.String>) strSet57);
        builder32.setexcludeFields((java.util.Set<java.lang.String>) strSet57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet57);
        builder12.parentTypes = strSet57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder63.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet66 = builder63.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder63.mongoSSLVerifyCertificate(true);
        builder63.script = "import_all_collections";
        boolean boolean71 = builder63.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder63.mongoAdminUser("bulk_size");
        int int74 = builder73.socketTimeout;
        java.lang.String str75 = builder73.riverIndexName;
        java.lang.String str76 = builder73.gettypeName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList77 = builder73.mongoServers;
        builder12.mongoServers = serverAddressList77;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(serverAddressArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(serverAddressList77);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        java.lang.String str12 = builder0.getmongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoClientOptions(mongoClientOptions13);
        boolean boolean15 = builder14.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder10.setmongoClientOptions(mongoClientOptions11);
        java.lang.String str13 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.typeName("host");
        builder15.setscriptType("options");
        java.lang.String str18 = builder15.getmongoCollection();
        builder15.skipInitialImport = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.mongoLocalUser("user");
        boolean boolean28 = builder27.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean30 = builder29.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        builder31.setmongoCollection("initial_timestamp");
        boolean boolean37 = builder31.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.lang.String str41 = mongoDBRiverDefinition40.includeCollection;
        java.lang.String str42 = mongoDBRiverDefinition40.getTypeName();
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition40.getMongoCollectionFilter();
        builder29.mongoOplogFilter = basicDBObject43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder45.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet48 = builder45.excludeFields;
        com.mongodb.BasicDBObject basicDBObject49 = builder45.getmongoCollectionFilter();
        java.lang.String str50 = builder45.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray51 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList52 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList52, serverAddressArray51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder45.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList52);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder45.getmongoClientOptions();
        builder45.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder58.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet61 = builder58.excludeFields;
        com.mongodb.BasicDBObject basicDBObject62 = builder58.getmongoCollectionFilter();
        builder45.setmongoOplogFilter(basicDBObject62);
        boolean boolean64 = builder45.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder45.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder45.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder69.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet72 = builder69.excludeFields;
        com.mongodb.BasicDBObject basicDBObject73 = builder69.getmongoCollectionFilter();
        java.lang.String str74 = builder69.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray75 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList76 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList76, serverAddressArray75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder69.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList76);
        java.lang.String str79 = builder69.mongoAdminPassword;
        java.lang.String[] strArray84 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        builder69.setincludeFields((java.util.Set<java.lang.String>) strSet85);
        builder68.setparentTypes((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet85);
        java.lang.String str91 = builder90.riverName;
        builder90.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder95 = builder90.statisticsTypeName("ssl");
        com.mongodb.MongoClientOptions mongoClientOptions96 = null;
        builder95.mongoClientOptions = mongoClientOptions96;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(serverAddressArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(mongoClientOptions55);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(serverAddressArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "script_type" + "'", str91, "script_type");
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("admin");
        java.lang.String str12 = builder11.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.script("script");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.typeName("connect_timeout");
        java.lang.String str19 = builder15.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.storeStatistics(true);
        java.lang.String str22 = builder21.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder23.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet26 = builder23.excludeFields;
        builder23.setmongoCollection("initial_timestamp");
        boolean boolean29 = builder23.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.script("script");
        com.mongodb.BasicDBObject basicDBObject35 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder23.mongoCollectionFilter(basicDBObject35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.script("script");
        com.mongodb.BasicDBObject basicDBObject40 = builder39.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder39.typeName("connect_timeout");
        boolean boolean43 = builder39.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("script");
        java.lang.String[] strArray78 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder46.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        builder39.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        builder36.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder21.includeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder11.parentTypes((java.util.Set<java.lang.String>) strSet79);
        boolean boolean86 = builder11.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk_size" + "'", str17, "bulk_size");
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        java.lang.String str25 = builder0.getstatisticsIndexName();
        builder0.mongoAdminPassword = "disable_index_refresh";
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.riverName("bulk_timeout");
        java.lang.String str32 = builder31.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder33.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet36 = builder33.excludeFields;
        builder33.setmongoCollection("initial_timestamp");
        boolean boolean39 = builder33.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder33.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.String str43 = mongoDBRiverDefinition42.includeCollection;
        java.lang.String str44 = mongoDBRiverDefinition42.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions45 = mongoDBRiverDefinition42.getMongoClientOptions();
        java.lang.String str46 = mongoDBRiverDefinition42.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str47 = mongoDBRiverDefinition42.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList48 = mongoDBRiverDefinition42.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder31.mongoServers(serverAddressList48);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "initial_timestamp" + "'", str46, "initial_timestamp");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(serverAddressList48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject15 = builder12.mongoOplogFilter;
        builder12.setmongoUseSSL(false);
        boolean boolean18 = builder12.getmongoUseSSL();
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder12.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(mongoClientOptions19);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str19 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean20 = mongoDBRiverDefinition9.mongoUseSSL;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        builder6.setmongoCollection("initial_timestamp");
        boolean boolean12 = builder6.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.lang.String str16 = mongoDBRiverDefinition15.includeCollection;
        boolean boolean17 = mongoDBRiverDefinition15.mongoGridFS;
        boolean boolean18 = mongoDBRiverDefinition15.advancedTransformation;
        java.lang.String str19 = mongoDBRiverDefinition15.getADMIN_DB_FIELD();
        boolean boolean20 = mongoDBRiverDefinition15.getdisableIndexRefresh();
        boolean boolean21 = mongoDBRiverDefinition15.isMongoSecondaryReadPreference();
        java.lang.String str22 = mongoDBRiverDefinition15.mongoCollection;
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition15.includeFields;
        int int24 = mongoDBRiverDefinition15.throttleSize;
        boolean boolean25 = mongoDBRiverDefinition15.disableIndexRefresh;
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) boolean25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder27.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet30 = builder27.excludeFields;
        com.mongodb.BasicDBObject basicDBObject31 = builder27.getmongoCollectionFilter();
        java.lang.String str32 = builder27.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray33 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList34 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList34, serverAddressArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList34);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder27.getmongoClientOptions();
        builder27.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        builder27.setmongoOplogFilter(basicDBObject44);
        boolean boolean46 = builder27.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder27.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder27.importAllCollections(false);
        builder27.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder27.mongoLocalUser("user");
        boolean boolean55 = builder54.getstoreStatistics();
        builder54.mongoLocalUser = "localhost";
        java.lang.Object obj58 = docScoreSearchScript0.unwrap((java.lang.Object) builder54);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "initial_timestamp" + "'", str22, "initial_timestamp");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(serverAddressArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(mongoClientOptions37);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj58);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean18 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout(100);
        boolean boolean7 = builder0.getimportAllCollections();
        builder0.setskipInitialImport(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str18 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str20 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_fields" + "'", str18, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "parent_types" + "'", str20, "parent_types");
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("script");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.typeName("connect_timeout");
        boolean boolean22 = builder18.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.script("script");
        java.lang.String[] strArray57 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder13.statisticsIndexName("script_type");
        java.lang.String str65 = builder64.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "script_type" + "'", str65, "script_type");
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        builder12.setmongoCollection("initial_timestamp");
        boolean boolean18 = builder12.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.skipInitialImport(false);
        builder12.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.socketTimeout((int) (short) 1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.mongoServers(serverAddressList25);
        boolean boolean27 = builder0.mongoSecondaryReadPreference;
        builder0.setmongoLocalPassword("import_all_collections");
        builder0.setmongoAdminUser("include_collection");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getStatisticsIndexName();
        boolean boolean19 = mongoDBRiverDefinition9.getimportAllCollections();
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk" + "'", str20, "bulk");
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        boolean boolean16 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "options" + "'", str13, "options");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        boolean boolean25 = builder16.getstoreStatistics();
        builder16.statisticsTypeName = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp33 = builder28.initialTimestamp;
        builder28.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean36 = builder28.getmongoUseSSL();
        java.lang.String str37 = builder28.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder38.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet41 = builder38.excludeFields;
        java.lang.String str42 = builder38.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.script("script");
        java.lang.String[] strArray77 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        builder45.setparentTypes((java.util.Set<java.lang.String>) strSet78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder38.parentTypes((java.util.Set<java.lang.String>) strSet78);
        java.util.Set<java.lang.String> strSet82 = builder38.parentTypes;
        builder28.setincludeFields(strSet82);
        builder16.setincludeFields(strSet82);
        builder15.setexcludeFields(strSet82);
        builder15.setdropCollection(true);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNull(wildcardTimestamp33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        boolean boolean16 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean17 = mongoDBRiverDefinition9.getadvancedTransformation();
        boolean boolean18 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str18 = mongoDBRiverDefinition9.riverName;
        java.lang.String str19 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str21 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl" + "'", str19, "ssl");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "connect_timeout" + "'", str21, "connect_timeout");
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        builder41.setmongoAdminPassword("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.skipInitialImport(false);
        java.lang.String str47 = builder41.script;
        boolean boolean48 = builder41.advancedTransformation;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "script" + "'", str47, "script");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("null.null", "servers");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?servers?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        boolean boolean13 = builder12.mongoSSLVerifyCertificate;
        java.lang.String str14 = builder12.typeName;
        builder12.typeName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet23 = builder22.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        boolean boolean27 = builder24.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        java.lang.String str33 = builder28.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray34 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList35 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList35, serverAddressArray34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder28.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder28.getmongoClientOptions();
        builder28.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder41.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet44 = builder41.excludeFields;
        com.mongodb.BasicDBObject basicDBObject45 = builder41.getmongoCollectionFilter();
        builder28.setmongoOplogFilter(basicDBObject45);
        com.mongodb.BasicDBObject basicDBObject47 = builder28.mongoOplogFilter;
        builder24.setmongoOplogFilter(basicDBObject47);
        builder22.setmongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder12.mongoCollectionFilter(basicDBObject47);
        com.mongodb.BasicDBObject basicDBObject51 = builder12.getmongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList52 = builder12.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(serverAddressArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(serverAddressList52);
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("throttle_size");
        builder14.setconnectTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.riverIndexName("initial_timestamp");
        builder14.statisticsTypeName = "import_all_collections";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        java.lang.String str7 = builder0.scriptType;
        builder0.settypeName("store_statistics");
        builder0.setscript("credentials");
        builder0.setstatisticsTypeName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.statisticsTypeName("skip_initial_import");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoDb("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder41.statisticsIndexName("options");
        java.lang.String str46 = builder41.gettypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean10 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean11 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str12 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.riverIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_collection" + "'", str12, "include_collection");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "actions" + "'", str13, "actions");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean10 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str12 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_bulk_requests" + "'", str15, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script_type" + "'", str16, "script_type");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings8 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService scriptService9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("filter", "bulk_size", riverSettings8, scriptService9);
        int int11 = mongoDBRiverDefinition10.getSocketTimeout();
        java.lang.String str12 = mongoDBRiverDefinition10.getCREDENTIALS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition10.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet11 = builder8.includeFields;
        java.lang.String str12 = builder8.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder8.mongoClientOptions;
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) builder8);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory15 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = null;
        org.elasticsearch.script.ExecutableScript executableScript17 = docScoreNativeScriptFactory15.newScript(strMap16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        com.mongodb.BasicDBObject basicDBObject22 = builder18.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet27 = builder24.excludeFields;
        builder24.setmongoCollection("initial_timestamp");
        boolean boolean30 = builder24.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.includeCollection;
        java.lang.String str35 = mongoDBRiverDefinition33.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet36 = mongoDBRiverDefinition33.excludeFields;
        boolean boolean37 = mongoDBRiverDefinition33.getstoreStatistics();
        boolean boolean38 = mongoDBRiverDefinition33.getmongoGridFS();
        java.lang.String str39 = mongoDBRiverDefinition33.getSECONDARY_READ_PREFERENCE_FIELD();
        int int40 = mongoDBRiverDefinition33.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition33.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        builder43.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder43.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder53.setmongoSecondaryReadPreference(false);
        boolean boolean56 = builder53.getmongoSSLVerifyCertificate();
        java.lang.String str57 = builder53.getriverIndexName();
        builder53.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder53.mongoUseSSL(true);
        builder53.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder53.script("bulk");
        com.mongodb.BasicDBObject basicDBObject66 = builder53.mongoCollectionFilter;
        builder43.mongoCollectionFilter = basicDBObject66;
        org.elasticsearch.script.ExecutableScript executableScript68 = docScoreNativeScriptFactory15.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(executableScript17);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "collection" + "'", str35, "collection");
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "secondary_read_preference" + "'", str39, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(executableScript68);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?type? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.getdropCollection();
        int int21 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "actions" + "'", str19, "actions");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.disableIndexRefresh(true);
        builder10.setconnectTimeout((int) 'a');
        com.mongodb.BasicDBObject basicDBObject13 = builder10.mongoOplogFilter;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder10.getinitialTimestamp();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.importAllCollections(false);
        java.lang.String str12 = builder11.scriptType;
        builder11.setmongoGridFS(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        builder24.mongoCollection = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.mongoLocalUser("import_all_collections");
        java.lang.String str29 = builder28.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder28.skipInitialImport(true);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        int int15 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str16 = mongoDBRiverDefinition9.script;
        boolean boolean17 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getNAME_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str22 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        boolean boolean23 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str24 = mongoDBRiverDefinition9.getRiverName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "name" + "'", str20, "name");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "drop_collection" + "'", str22, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.scriptType("exclude_fields");
        builder0.setthrottleSize((int) (byte) 100);
        java.lang.String str30 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout(100);
        boolean boolean7 = builder0.getimportAllCollections();
        java.lang.String str8 = builder0.getmongoAdminPassword();
        builder0.mongoGridFS = false;
        builder0.setskipInitialImport(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        boolean boolean4 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder5.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder5.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoSecondaryReadPreference(false);
        boolean boolean23 = builder20.mongoGridFS;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder20.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList25);
        builder0.mongoServers = serverAddressList25;
        builder0.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        builder0.mongoDb = "import_all_collections";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder0.mongoDb = "name";
        builder0.setimportAllCollections(false);
        boolean boolean18 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoDb("store_statistics");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "skip_initial_import" + "'", str16, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory16 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = null;
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory16.newScript(strMap17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript24 = docScoreNativeScriptFactory16.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject23);
        builder12.setmongoOplogFilter(basicDBObject23);
        java.lang.String str26 = builder12.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder12.mongoLocalUser("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        builder29.setmongoCollection("initial_timestamp");
        boolean boolean35 = builder29.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder29.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        java.lang.String str39 = mongoDBRiverDefinition38.includeCollection;
        java.lang.String str40 = mongoDBRiverDefinition38.getHOST_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition38.getMongoLocalPassword();
        java.lang.String str42 = mongoDBRiverDefinition38.script;
        java.lang.String str43 = mongoDBRiverDefinition38.mongoAdminUser;
        java.lang.String str44 = mongoDBRiverDefinition38.getCONNECTION_TIMEOUT();
        java.lang.String str45 = mongoDBRiverDefinition38.getDB_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList46 = mongoDBRiverDefinition38.getMongoServers();
        builder28.mongoServers = serverAddressList46;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNotNull(executableScript24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "host" + "'", str40, "host");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "connect_timeout" + "'", str44, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "db" + "'", str45, "db");
        org.junit.Assert.assertNotNull(serverAddressList46);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.mongoUseSSL;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl_verify_certificate" + "'", str19, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "throttle_size" + "'", str20, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.getMongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str21 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "concurrent_requests" + "'", str21, "concurrent_requests");
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        builder0.setmongoClientOptions(mongoClientOptions16);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder0.mongoSecondaryReadPreference = false;
        boolean boolean25 = builder0.disableIndexRefresh;
        boolean boolean26 = builder0.getimportAllCollections();
        java.lang.String str27 = builder0.getincludeCollection();
        java.lang.String str28 = builder0.getriverIndexName();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder2.mongoCollection = "servers";
        builder2.setincludeCollection("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.script("script");
        com.mongodb.BasicDBObject basicDBObject24 = builder23.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder23.typeName("connect_timeout");
        java.lang.String str27 = builder23.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder23.storeStatistics(true);
        java.lang.String str30 = builder29.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        builder31.setmongoCollection("initial_timestamp");
        boolean boolean37 = builder31.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("script");
        com.mongodb.BasicDBObject basicDBObject43 = builder42.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder31.mongoCollectionFilter(basicDBObject43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder45.script("script");
        com.mongodb.BasicDBObject basicDBObject48 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder47.typeName("connect_timeout");
        boolean boolean51 = builder47.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.script("script");
        java.lang.String[] strArray86 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        builder54.setparentTypes((java.util.Set<java.lang.String>) strSet87);
        builder47.setparentTypes((java.util.Set<java.lang.String>) strSet87);
        builder44.setincludeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder29.includeFields((java.util.Set<java.lang.String>) strSet87);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder2.includeFields((java.util.Set<java.lang.String>) strSet87);
        java.lang.String str94 = builder93.getmongoAdminPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        builder0.setstatisticsIndexName("user");
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.includeCollection("collection");
        builder21.setmongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.includeCollection("");
        builder25.mongoUseSSL = false;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory28 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        com.mongodb.BasicDBObject basicDBObject34 = builder30.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp35 = builder30.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray36 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList37 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList37, serverAddressArray36);
        builder30.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList37);
        builder29.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList37);
        builder29.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder29.advancedTransformation(false);
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        builder47.setmongoCollection("initial_timestamp");
        boolean boolean53 = builder47.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder47.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        java.lang.String str57 = mongoDBRiverDefinition56.includeCollection;
        java.lang.String str58 = mongoDBRiverDefinition56.getIndexName();
        java.lang.String str59 = mongoDBRiverDefinition56.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str60 = mongoDBRiverDefinition56.mongoAdminUser;
        java.util.Set<java.lang.String> strSet61 = mongoDBRiverDefinition56.parentTypes;
        java.lang.String str62 = mongoDBRiverDefinition56.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = mongoDBRiverDefinition56.mongoServers;
        java.lang.String str64 = mongoDBRiverDefinition56.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet65 = mongoDBRiverDefinition56.getExcludeFields();
        java.lang.String str66 = mongoDBRiverDefinition56.statisticsIndexName;
        int int67 = mongoDBRiverDefinition56.getDEFAULT_BULK_ACTIONS();
        boolean boolean68 = mongoDBRiverDefinition56.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject69 = mongoDBRiverDefinition56.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript70 = docScoreNativeScriptFactory28.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        builder25.setmongoCollectionFilter(basicDBObject69);
        int int72 = builder25.getsocketTimeout();
        java.lang.String str73 = builder25.includeCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNull(wildcardTimestamp35);
        org.junit.Assert.assertNotNull(serverAddressArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "secondary_read_preference" + "'", str59, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "throttle_size" + "'", str62, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1000 + "'", int67 == 1000);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(executableScript70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.skipInitialImport;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean17 = mongoDBRiverDefinition9.isStoreStatistics();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.scriptType("drop_collection");
        java.lang.String str10 = builder9.getincludeCollection();
        boolean boolean11 = builder9.mongoSecondaryReadPreference;
        java.lang.String str12 = builder9.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        java.lang.String str18 = builder13.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        boolean boolean23 = builder22.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet27 = builder24.excludeFields;
        com.mongodb.BasicDBObject basicDBObject28 = builder24.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp29 = builder24.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray30 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList31 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList31, serverAddressArray30);
        builder24.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder35.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet38 = builder35.excludeFields;
        com.mongodb.BasicDBObject basicDBObject39 = builder35.getmongoCollectionFilter();
        java.lang.String str40 = builder35.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray41 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList42 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList42, serverAddressArray41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder35.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList42);
        java.lang.String str45 = builder35.mongoAdminPassword;
        java.lang.String[] strArray50 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder35.setincludeFields((java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder22.excludeFields((java.util.Set<java.lang.String>) strSet51);
        builder9.parentTypes = strSet51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder9.mongoUseSSL(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(wildcardTimestamp29);
        org.junit.Assert.assertNotNull(serverAddressArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(serverAddressArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script" + "'", str17, "script");
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("script");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.mongoLocalUser;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean18 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str19 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getPORT_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "type" + "'", str19, "type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gridfs" + "'", str20, "gridfs");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "port" + "'", str21, "port");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "null.initial_timestamp" + "'", str22, "null.initial_timestamp");
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.script;
        java.lang.String str16 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_collection" + "'", str14, "include_collection");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "options" + "'", str16, "options");
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        com.mongodb.MongoClientOptions mongoClientOptions13 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str14 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "concurrent_requests" + "'", str14, "concurrent_requests");
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str20 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue22 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str23 = mongoDBRiverDefinition9.getStatisticsTypeName();
        boolean boolean24 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "collection" + "'", str20, "collection");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index" + "'", str21, "index");
        org.junit.Assert.assertNotNull(byteSizeValue22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("disable_index_refresh", "collection");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.riverName;
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str16 = mongoDBRiverDefinition9.riverName;
        java.lang.String str17 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.includeCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        boolean boolean20 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder21.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet24 = builder21.excludeFields;
        com.mongodb.BasicDBObject basicDBObject25 = builder21.getmongoCollectionFilter();
        java.lang.String str26 = builder21.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray27 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList28 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList28, serverAddressArray27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder21.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList28);
        boolean boolean31 = builder30.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp37 = builder32.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder30.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        java.lang.String str48 = builder43.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder43.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        java.lang.String str53 = builder43.mongoAdminPassword;
        java.lang.String[] strArray58 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder43.setincludeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder30.excludeFields((java.util.Set<java.lang.String>) strSet59);
        builder0.includeFields = strSet59;
        java.util.Set<java.lang.String> strSet64 = builder0.getincludeFields();
        builder0.includeCollection = "include_collection";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(serverAddressArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNull(wildcardTimestamp37);
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str20 = mongoDBRiverDefinition9.getNAME_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "name" + "'", str20, "name");
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str18 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.mongoClientOptions;
        java.lang.String str15 = builder13.mongoAdminUser;
        java.lang.String str16 = builder13.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoAdminUser("servers");
        builder18.throttleSize = (byte) 10;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        boolean boolean10 = builder9.getmongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject11 = builder9.getmongoOplogFilter();
        com.mongodb.BasicDBObject basicDBObject12 = builder9.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoDb("bulk_size");
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder9.mongoClientOptions = mongoClientOptions15;
        builder9.throttleSize = (short) 100;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean15 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getNAME_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getNAME_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.typeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "skip_initial_import" + "'", str16, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "name" + "'", str17, "name");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "name" + "'", str18, "name");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("include_fields");
        java.lang.String str21 = builder0.getmongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder0.initialTimestamp;
        java.util.Set<java.lang.String> strSet23 = builder0.getparentTypes();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSSLVerifyCertificate(true);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.setmongoLocalUser("");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.lang.String str6 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("user");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder8.mongoClientOptions = mongoClientOptions9;
        boolean boolean11 = builder8.getstoreStatistics();
        boolean boolean12 = builder8.dropCollection;
        java.lang.String str13 = builder8.getmongoDb();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.mongoClientOptions;
        boolean boolean13 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str14 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "user" + "'", str14, "user");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str19 = mongoDBRiverDefinition9.mongoLocalUser;
        boolean boolean20 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder22.setmongoCollection("script_type");
        boolean boolean25 = builder22.getskipInitialImport();
        java.lang.String str26 = builder22.getriverIndexName();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        int int17 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str21 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disable_index_refresh" + "'", str19, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        builder2.setdropCollection(false);
        boolean boolean7 = builder2.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        java.lang.String str6 = builder0.includeCollection;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.setmongoClientOptions(mongoClientOptions7);
        builder0.mongoAdminUser = "user";
        builder0.setsocketTimeout((int) ' ');
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        java.lang.String str10 = builder8.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.script("script");
        java.lang.String[] strArray45 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder13.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = builder13.getadvancedTransformation();
        boolean boolean50 = builder13.mongoSecondaryReadPreference;
        boolean boolean51 = builder13.getdisableIndexRefresh();
        builder13.setmongoLocalUser("options");
        com.mongodb.BasicDBObject basicDBObject55 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.mongoOplogFilter(basicDBObject55);
        builder8.mongoCollectionFilter = basicDBObject55;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        java.lang.String str16 = builder15.mongoAdminPassword;
        java.lang.String str17 = builder15.getmongoCollection();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        boolean boolean20 = builder0.getdropCollection();
        int int21 = builder0.getthrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder0.build();
        builder0.setstoreStatistics(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getScript();
        java.lang.String str18 = mongoDBRiverDefinition9.statisticsTypeName;
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str20 = mongoDBRiverDefinition9.getUSER_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "user" + "'", str20, "user");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str17 = mongoDBRiverDefinition9.statisticsTypeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_requests" + "'", str13, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        int int9 = builder0.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.throttleSize(10);
        builder0.scriptType = "skip_initial_import";
        java.lang.String str14 = builder0.getscript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        builder16.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.riverName("credentials");
        java.util.Set<java.lang.String> strSet27 = builder16.excludeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        int int15 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition9.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        int int18 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str19 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1000 + "'", int18 == 1000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "skip_initial_import" + "'", str19, "skip_initial_import");
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        boolean boolean23 = builder16.mongoGridFS;
        int int24 = builder16.getsocketTimeout();
        builder16.indexName = "gridfs";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.isDropCollection();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition9.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script_type" + "'", str19, "script_type");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressList21);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        builder0.mongoCollectionFilter = basicDBObject12;
        int int15 = builder0.connectTimeout;
        builder0.setskipInitialImport(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("script");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.mongoOplogFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.mongoLocalPassword("bulk_timeout");
        builder0.setriverIndexName("disable_index_refresh");
        builder0.setsocketTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder12.mongoDb = "hi!";
        java.lang.String str15 = builder12.mongoLocalPassword;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder12.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(wildcardTimestamp16);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        boolean boolean21 = builder0.getimportAllCollections();
        java.lang.String str22 = builder0.statisticsTypeName;
        builder0.socketTimeout = 8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.mongoCollection("initial_timestamp");
        java.lang.String str27 = builder26.riverIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str18 = mongoDBRiverDefinition9.riverName;
        java.lang.String str19 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getFILTER_FIELD();
        int int21 = mongoDBRiverDefinition9.throttleSize;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "servers" + "'", str19, "servers");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "filter" + "'", str20, "filter");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        int int7 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("db");
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = null;
        builder9.setmongoServers(serverAddressList10);
        builder9.setstatisticsTypeName("bulk_timeout");
        builder9.indexName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.includeCollection("");
        builder9.typeName = "concurrent_bulk_requests";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoSSLVerifyCertificate(true);
        boolean boolean15 = builder9.mongoSSLVerifyCertificate;
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        com.mongodb.BasicDBObject basicDBObject21 = builder17.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings22 = new org.elasticsearch.river.RiverSettings(settings16, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        builder9.mongoCollectionFilter = basicDBObject21;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder8.mongoOplogFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder8.includeCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder8.mongoAdminPassword("bulk");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.script = "name";
        builder13.statisticsTypeName = "store_statistics";
        boolean boolean18 = builder13.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        java.lang.String str25 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout((int) '#');
        boolean boolean28 = builder0.getskipInitialImport();
        builder0.setsocketTimeout((int) ' ');
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.getmongoLocalPassword();
        builder0.setskipInitialImport(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getIncludeCollection();
        java.lang.String str11 = mongoDBRiverDefinition8.getRiverName();
        java.lang.String str12 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.typeName;
        java.lang.String str14 = mongoDBRiverDefinition8.getDROP_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition8.parentTypes;
        boolean boolean16 = mongoDBRiverDefinition8.isImportAllCollections();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "throttle_size" + "'", str12, "throttle_size");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "connect_timeout" + "'", str13, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "drop_collection" + "'", str14, "drop_collection");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder12.mongoDb("type");
        boolean boolean77 = builder12.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder12.mongoSSLVerifyCertificate(false);
        java.lang.String str80 = builder12.statisticsTypeName;
        builder12.setdropCollection(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoDb;
        java.lang.String str15 = mongoDBRiverDefinition9.mongoLocalPassword;
        boolean boolean16 = mongoDBRiverDefinition9.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.indexName;
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.riverName;
        java.lang.String str14 = mongoDBRiverDefinition9.indexName;
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        java.lang.String str16 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getNAME_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "options" + "'", str16, "options");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "name" + "'", str17, "name");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "flush_interval" + "'", str18, "flush_interval");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str17 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "type" + "'", str17, "type");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ssl" + "'", str18, "ssl");
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str16 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.includeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script_type" + "'", str17, "script_type");
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.script("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder2.mongoDb;
        builder2.mongoLocalPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.mongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder2.statisticsIndexName("port");
        builder2.connectTimeout = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder2.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder2.mongoDb("credentials");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.throttleSize = '#';
        builder13.mongoDb = "credentials";
        int int18 = builder13.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        builder19.setmongoCollection("initial_timestamp");
        boolean boolean25 = builder19.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.lang.String str29 = mongoDBRiverDefinition28.includeCollection;
        java.lang.String str30 = mongoDBRiverDefinition28.getIndexName();
        java.lang.String str31 = mongoDBRiverDefinition28.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str32 = mongoDBRiverDefinition28.script;
        java.lang.String str33 = mongoDBRiverDefinition28.getGRIDFS_FIELD();
        int int34 = mongoDBRiverDefinition28.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp35 = mongoDBRiverDefinition28.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition28.mongoCollectionFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition28.getMongoServers();
        com.mongodb.BasicDBObject basicDBObject38 = mongoDBRiverDefinition28.mongoCollectionFilter;
        builder13.mongoCollectionFilter = basicDBObject38;
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder13.getmongoServers();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "secondary_read_preference" + "'", str31, "secondary_read_preference");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "gridfs" + "'", str33, "gridfs");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNotNull(serverAddressList40);
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean14 = mongoDBRiverDefinition9.getadvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        boolean boolean16 = mongoDBRiverDefinition9.getimportAllCollections();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.initial_timestamp" + "'", str15, "null.initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        builder12.setmongoCollection("initial_timestamp");
        boolean boolean18 = builder12.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.skipInitialImport(false);
        builder12.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.socketTimeout((int) (short) 1);
        java.util.List<com.mongodb.ServerAddress> serverAddressList25 = builder12.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.mongoServers(serverAddressList25);
        java.lang.String str27 = builder0.mongoAdminPassword;
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder0.mongoClientOptions;
        java.lang.String str29 = builder0.includeCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(serverAddressList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setscript("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.storeStatistics(false);
        builder17.setmongoAdminUser("index");
        java.lang.String str20 = builder17.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder22.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        builder22.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        builder21.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder33.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet36 = builder33.excludeFields;
        com.mongodb.BasicDBObject basicDBObject37 = builder33.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp38 = builder33.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray39 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList40 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList40, serverAddressArray39);
        builder33.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder21.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder21.indexName("");
        int int46 = builder45.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = builder45.getinitialTimestamp();
        builder45.socketTimeout = (byte) 1;
        java.lang.String str50 = builder45.scriptType;
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = builder45.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder17.mongoServers(serverAddressList51);
        java.lang.String str53 = builder17.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNull(wildcardTimestamp27);
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNull(wildcardTimestamp38);
        org.junit.Assert.assertNotNull(serverAddressArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap1 = null;
        org.elasticsearch.script.ExecutableScript executableScript2 = docScoreNativeScriptFactory0.newScript(strMap1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder9.initialTimestamp;
        builder9.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder9.typeName("exclude_fields");
        boolean boolean19 = builder9.getmongoUseSSL();
        int int20 = builder9.getconnectTimeout();
        builder9.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder23.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet26 = builder23.excludeFields;
        builder23.setmongoCollection("initial_timestamp");
        boolean boolean29 = builder23.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        java.lang.String str33 = mongoDBRiverDefinition32.includeCollection;
        java.lang.String str34 = mongoDBRiverDefinition32.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition32.excludeFields;
        boolean boolean36 = mongoDBRiverDefinition32.getstoreStatistics();
        boolean boolean37 = mongoDBRiverDefinition32.getmongoGridFS();
        java.lang.String str38 = mongoDBRiverDefinition32.getSECONDARY_READ_PREFERENCE_FIELD();
        int int39 = mongoDBRiverDefinition32.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject40 = mongoDBRiverDefinition32.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.mongoOplogFilter(basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        builder43.setmongoCollection("initial_timestamp");
        boolean boolean49 = builder43.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder43.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        java.lang.String str53 = mongoDBRiverDefinition52.includeCollection;
        boolean boolean54 = mongoDBRiverDefinition52.mongoGridFS;
        boolean boolean55 = mongoDBRiverDefinition52.advancedTransformation;
        java.lang.String str56 = mongoDBRiverDefinition52.getADMIN_DB_FIELD();
        boolean boolean57 = mongoDBRiverDefinition52.getdisableIndexRefresh();
        boolean boolean58 = mongoDBRiverDefinition52.isDisableIndexRefresh();
        java.lang.String str59 = mongoDBRiverDefinition52.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject60 = mongoDBRiverDefinition52.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript61 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject60);
        org.junit.Assert.assertNotNull(executableScript2);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "collection" + "'", str34, "collection");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondary_read_preference" + "'", str38, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "admin" + "'", str56, "admin");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(executableScript61);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean19 = mongoDBRiverDefinition9.skipInitialImport;
        boolean boolean20 = mongoDBRiverDefinition9.skipInitialImport;
        int int21 = mongoDBRiverDefinition9.getConnectTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        builder2.setmongoSecondaryReadPreference(false);
        builder2.setsocketTimeout((int) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.dropCollection(false);
        int int15 = builder14.socketTimeout;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        builder16.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.dropCollection(false);
        builder16.setstatisticsIndexName("type");
        java.lang.String str29 = builder16.statisticsIndexName;
        java.lang.String str30 = builder16.gettypeName();
        java.lang.String str31 = builder16.includeCollection;
        builder16.script = "exclude_fields";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "type" + "'", str29, "type");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "initial_timestamp" + "'", str31, "initial_timestamp");
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        builder0.socketTimeout = 97;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str16 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet6 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(true);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = builder8.build();
        java.lang.String str12 = builder8.getmongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet10 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("actions");
        java.lang.String str13 = builder9.riverIndexName;
        java.lang.String str14 = builder9.scriptType;
        builder9.setriverIndexName("local");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setscript("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.storeStatistics(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder12.initialTimestamp;
        java.lang.String str19 = builder12.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder12.mongoDb("host");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        java.lang.String str7 = builder0.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder10.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet13 = builder10.excludeFields;
        com.mongodb.BasicDBObject basicDBObject14 = builder10.getmongoCollectionFilter();
        java.lang.String str15 = builder10.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray16 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList17 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList17, serverAddressArray16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList17);
        boolean boolean20 = builder19.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder21.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet24 = builder21.excludeFields;
        com.mongodb.BasicDBObject basicDBObject25 = builder21.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder21.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray27 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList28 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList28, serverAddressArray27);
        builder21.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder19.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        java.lang.String str37 = builder32.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        java.lang.String str42 = builder32.mongoAdminPassword;
        java.lang.String[] strArray47 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder32.setincludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder19.excludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet48);
        java.lang.String str53 = builder9.getmongoDb();
        builder9.mongoGridFS = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertNotNull(serverAddressArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        int int9 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("host");
        builder0.setmongoDb("host");
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder0.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList14);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextVar("connect_timeout", (java.lang.Object) "type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        builder7.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder19.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder19.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.indexName("");
        java.lang.String str32 = builder7.getstatisticsIndexName();
        builder7.mongoAdminPassword = "disable_index_refresh";
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder7.mongoClientOptions(mongoClientOptions35);
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) mongoClientOptions35);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript41 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj43 = docScoreSearchScript41.unwrap((java.lang.Object) true);
        org.elasticsearch.common.logging.ESLogger eSLogger44 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.logger;
        java.lang.Object obj45 = docScoreSearchScript41.unwrap((java.lang.Object) eSLogger44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        com.mongodb.BasicDBObject basicDBObject51 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder47.initialTimestamp;
        builder47.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean55 = builder47.getmongoUseSSL();
        java.lang.String str56 = builder47.indexName;
        java.util.Set<java.lang.String> strSet57 = builder47.getexcludeFields();
        docScoreSearchScript41.setNextVar("hi!", (java.lang.Object) builder47);
        java.lang.String str59 = builder47.getmongoLocalPassword();
        docScoreSearchScript0.setNextVar("filter", (java.lang.Object) builder47);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + true + "'", obj43, true);
        org.junit.Assert.assertNotNull(eSLogger44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        int int17 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getIncludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disable_index_refresh" + "'", str19, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "drop_collection" + "'", str20, "drop_collection");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "admin" + "'", str12, "admin");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_fields" + "'", str13, "include_fields");
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        int int10 = builder0.socketTimeout;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        builder2.setstoreStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        builder7.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        builder7.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.advancedTransformation(false);
        builder7.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject25 = builder7.getmongoCollectionFilter();
        builder7.setmongoLocalPassword("advanced_transformation");
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder7.getmongoServers();
        java.lang.String str29 = builder7.mongoAdminUser;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder7.mongoClientOptions;
        java.lang.String str31 = builder7.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoSSLVerifyCertificate(true);
        builder32.script = "import_all_collections";
        boolean boolean40 = builder32.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder32.mongoAdminUser("bulk_size");
        int int43 = builder42.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder42.mongoLocalUser("parent_types");
        java.util.List<com.mongodb.ServerAddress> serverAddressList46 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder42.mongoServers(serverAddressList46);
        java.lang.String str48 = builder42.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder49.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet52 = builder49.excludeFields;
        builder49.setmongoCollection("hi!");
        boolean boolean55 = builder49.importAllCollections;
        builder49.setconnectTimeout((int) (short) 10);
        builder49.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder60.mongoSSLVerifyCertificate(true);
        boolean boolean66 = builder60.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder67.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet70 = builder67.excludeFields;
        com.mongodb.BasicDBObject basicDBObject71 = builder67.getmongoCollectionFilter();
        java.lang.String str72 = builder67.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray73 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList74 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList74, serverAddressArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder67.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList74);
        java.lang.String str77 = builder67.mongoAdminPassword;
        java.lang.String[] strArray82 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        builder67.setincludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder60.parentTypes((java.util.Set<java.lang.String>) strSet83);
        builder49.includeFields = strSet83;
        builder42.setexcludeFields((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder7.includeFields((java.util.Set<java.lang.String>) strSet83);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        builder2.setdropCollection(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject25);
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "options" + "'", str29, "options");
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "options" + "'", str31, "options");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(serverAddressArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        builder0.setmongoAdminUser("size");
        java.lang.String str11 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.riverName;
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.mongoCollectionFilter;
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition9.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(basicDBObject14);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean16 = mongoDBRiverDefinition9.getdropCollection();
        boolean boolean17 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean18 = mongoDBRiverDefinition9.dropCollection;
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str20 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "options" + "'", str20, "options");
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.mongoLocalUser = "parent_types";
        builder12.includeCollection = "ssl";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        boolean boolean16 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str17 = mongoDBRiverDefinition9.typeName;
        boolean boolean18 = mongoDBRiverDefinition9.getskipInitialImport();
        java.lang.String str19 = mongoDBRiverDefinition9.statisticsTypeName;
        boolean boolean20 = mongoDBRiverDefinition9.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        boolean boolean5 = builder4.advancedTransformation;
        int int6 = builder4.getconnectTimeout();
        boolean boolean7 = builder4.skipInitialImport;
        builder4.connectTimeout = 8;
        builder4.script = "user";
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        java.lang.String str5 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("options");
        boolean boolean8 = builder0.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str17 = mongoDBRiverDefinition9.script;
        java.lang.String str18 = mongoDBRiverDefinition9.statisticsTypeName;
        java.lang.String str19 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition9.excludeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "import_all_collections" + "'", str12, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "credentials" + "'", str19, "credentials");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk" + "'", str20, "bulk");
        org.junit.Assert.assertNull(strSet21);
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        builder0.setmongoLocalPassword("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.statisticsTypeName("options");
        int int19 = builder0.getsocketTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(true);
        java.lang.String str45 = builder44.typeName;
        builder44.mongoGridFS = true;
        builder44.setscriptType("concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.script("script");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.typeName("connect_timeout");
        boolean boolean14 = builder10.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.script("script");
        java.lang.String[] strArray49 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet50);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder7.parentTypes((java.util.Set<java.lang.String>) strSet50);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoDb("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoCollection("connect_timeout");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.includeFields;
        boolean boolean14 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str16 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "servers" + "'", str16, "servers");
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        int int25 = builder0.getsocketTimeout();
        builder0.mongoSSLVerifyCertificate = true;
        java.lang.String str28 = builder0.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str16 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_timeout" + "'", str14, "bulk_timeout");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "local" + "'", str16, "local");
        org.junit.Assert.assertNotNull(byteSizeValue17);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str17 = mongoDBRiverDefinition9.mongoLocalUser;
        int int18 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str17 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script" + "'", str17, "script");
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str16 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_bulk_requests" + "'", str18, "concurrent_bulk_requests");
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.riverName;
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean16 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        org.elasticsearch.common.logging.ESLogger eSLogger18 = mongoDBRiverDefinition9.getlogger();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(eSLogger18);
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.mongoGridFS = false;
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        builder0.mongoClientOptions = mongoClientOptions7;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.mongoAdminUser("port");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getSIZE_FIELD();
        int int12 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str13 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "size" + "'", str11, "size");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_timeout" + "'", str14, "bulk_timeout");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "admin" + "'", str15, "admin");
        org.junit.Assert.assertNull(basicDBObject16);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getimportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean16 = mongoDBRiverDefinition9.isAdvancedTransformation();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "local" + "'", str12, "local");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl_verify_certificate" + "'", str14, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(basicDBObject17);
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.script("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet40);
        boolean boolean44 = builder0.getskipInitialImport();
        java.lang.String str45 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        com.mongodb.BasicDBObject basicDBObject51 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder47.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray53 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList54 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList54, serverAddressArray53);
        builder47.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList54);
        builder46.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList54);
        builder46.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder46.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder61.mongoSecondaryReadPreference(false);
        boolean boolean64 = builder61.mongoGridFS;
        com.mongodb.ServerAddress[] serverAddressArray65 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList66 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList66, serverAddressArray65);
        builder61.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList66);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList66);
        int int70 = builder0.getconnectTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertNotNull(serverAddressArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(serverAddressArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder0.build();
        int int9 = builder0.getthrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        int int18 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str19 = mongoDBRiverDefinition9.riverIndexName;
        java.lang.String str20 = mongoDBRiverDefinition9.scriptType;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1000 + "'", int18 == 1000);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str19 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        boolean boolean11 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        java.lang.String str17 = builder12.mongoLocalUser;
        builder12.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        com.mongodb.BasicDBObject basicDBObject24 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder12.mongoCollectionFilter(basicDBObject24);
        builder25.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.script("script");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.typeName("connect_timeout");
        boolean boolean34 = builder30.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.script("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder30.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder25.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet70);
        int int76 = builder0.socketTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList77 = builder0.getmongoServers();
        java.lang.String str78 = builder0.script;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(serverAddressList77);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str14 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str16 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "password" + "'", str16, "password");
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        int int25 = builder24.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder24.getinitialTimestamp();
        builder24.socketTimeout = (byte) 1;
        java.lang.String str29 = builder24.scriptType;
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.mongoClientOptions(mongoClientOptions30);
        builder31.setmongoAdminUser("exclude_fields");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.includeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoSecondaryReadPreference(true);
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder2.setmongoClientOptions(mongoClientOptions8);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("localhost");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?localhost?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.util.Set<java.lang.String> strSet3 = builder2.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.script("script");
        com.mongodb.BasicDBObject basicDBObject7 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder6.typeName("connect_timeout");
        java.lang.String str10 = builder6.getmongoDb();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder6.storeStatistics(true);
        java.lang.String str13 = builder12.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder14.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet17 = builder14.excludeFields;
        builder14.setmongoCollection("initial_timestamp");
        boolean boolean20 = builder14.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.script("script");
        com.mongodb.BasicDBObject basicDBObject26 = builder25.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.mongoCollectionFilter(basicDBObject26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder28.script("script");
        com.mongodb.BasicDBObject basicDBObject31 = builder30.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder30.typeName("connect_timeout");
        boolean boolean34 = builder30.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.script("script");
        java.lang.String[] strArray69 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder30.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder27.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder12.includeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder2.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder2.mongoLocalPassword("servers");
        java.lang.String str79 = builder2.script;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "script" + "'", str79, "script");
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger12 = mongoDBRiverDefinition9.getlogger();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition9.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertNotNull(eSLogger12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNull(wildcardTimestamp15);
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder7.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        builder7.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        builder6.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder6.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        builder22.setmongoCollection("initial_timestamp");
        boolean boolean28 = builder22.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.lang.String str32 = mongoDBRiverDefinition31.includeCollection;
        java.lang.String str33 = mongoDBRiverDefinition31.getHOST_FIELD();
        java.lang.String str34 = mongoDBRiverDefinition31.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet35 = mongoDBRiverDefinition31.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions36 = mongoDBRiverDefinition31.mongoClientOptions;
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition31.mongoServers;
        builder6.setmongoServers(serverAddressList37);
        builder0.mongoServers = serverAddressList37;
        builder0.setstoreStatistics(false);
        com.mongodb.BasicDBObject basicDBObject42 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "host" + "'", str33, "host");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "user" + "'", str34, "user");
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNull(basicDBObject42);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        boolean boolean10 = builder0.getmongoUseSSL();
        int int11 = builder0.getconnectTimeout();
        builder0.mongoGridFS = false;
        int int14 = builder0.getsocketTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.riverName("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        java.lang.String str13 = builder8.mongoLocalUser;
        builder8.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoCollectionFilter(basicDBObject20);
        builder21.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.script("script");
        com.mongodb.BasicDBObject basicDBObject27 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.typeName("connect_timeout");
        boolean boolean30 = builder26.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.script("script");
        java.lang.String[] strArray65 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder33.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder26.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder21.setincludeFields((java.util.Set<java.lang.String>) strSet66);
        builder7.excludeFields = strSet66;
        boolean boolean72 = builder7.getdropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder2.mongoCollection = "servers";
        int int19 = builder2.throttleSize;
        builder2.throttleSize = 0;
        builder2.statisticsIndexName = "include_collection";
        builder2.storeStatistics = false;
        builder2.script = "initial_timestamp";
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = builder2.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(serverAddressList28);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.disableIndexRefresh;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str17 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteSizeValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "credentials" + "'", str17, "credentials");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.mongoSSLVerifyCertificate(true);
        builder3.script = "import_all_collections";
        boolean boolean11 = builder3.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder3.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject14 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.common.settings.Settings settings16 = riverSettings15.globalSettings();
        org.elasticsearch.script.ScriptService scriptService17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("", "", riverSettings15, scriptService17);
        int int19 = mongoDBRiverDefinition18.getSocketTimeout();
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(settings16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean18 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean20 = mongoDBRiverDefinition9.getdropCollection();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str22 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "advanced_transformation" + "'", str22, "advanced_transformation");
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str16 = mongoDBRiverDefinition9.getScript();
        java.lang.String str17 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.skipInitialImport;
        java.lang.String str19 = mongoDBRiverDefinition9.getSIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "include_fields" + "'", str17, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.mongoUseSSL = true;
        builder8.throttleSize = (short) 1;
        java.util.Set<java.lang.String> strSet15 = builder8.includeFields;
        builder8.setmongoAdminPassword("collection");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder10.setmongoClientOptions(mongoClientOptions11);
        java.lang.String str13 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.typeName("host");
        builder15.setscriptType("options");
        java.lang.String str18 = builder15.getmongoLocalUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        builder8.includeCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder15.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet18 = builder15.excludeFields;
        com.mongodb.BasicDBObject basicDBObject19 = builder15.getmongoCollectionFilter();
        java.lang.String str20 = builder15.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList22);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder15.getmongoClientOptions();
        builder15.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        builder15.setmongoOplogFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder8.mongoOplogFilter(basicDBObject32);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder8.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder8.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject37 = builder8.getmongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(basicDBObject37);
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoDb;
        java.lang.String str15 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "actions" + "'", str15, "actions");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean16 = mongoDBRiverDefinition9.getdropCollection();
        boolean boolean17 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean18 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script_type" + "'", str19, "script_type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disable_index_refresh" + "'", str20, "disable_index_refresh");
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        int int17 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str18 = mongoDBRiverDefinition9.script;
        java.lang.String str19 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl_verify_certificate" + "'", str19, "ssl_verify_certificate");
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        int int9 = builder0.throttleSize;
        builder0.mongoCollection = "secondary_read_preference";
        com.mongodb.BasicDBObject basicDBObject12 = builder0.getmongoCollectionFilter();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder15.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet18 = builder15.excludeFields;
        com.mongodb.BasicDBObject basicDBObject19 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = builder15.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder15.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList22);
        builder14.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList22);
        builder14.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.advancedTransformation(false);
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder0.mongoOplogFilter(basicDBObject30);
        java.lang.String str33 = builder0.getindexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.getmongoUseSSL();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.includeFields;
        boolean boolean19 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.script("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder2.mongoDb;
        builder2.mongoLocalPassword = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder2.mongoAdminPassword("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder2.statisticsIndexName("port");
        builder2.connectTimeout = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder2.mongoSSLVerifyCertificate(true);
        java.lang.String str57 = builder56.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        boolean boolean59 = mongoDBRiverDefinition58.isDropCollection();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str20 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getUSER_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger22 = mongoDBRiverDefinition9.getlogger();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "admin" + "'", str20, "admin");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "user" + "'", str21, "user");
        org.junit.Assert.assertNotNull(eSLogger22);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        java.lang.String str17 = builder7.mongoAdminPassword;
        java.lang.String[] strArray22 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet23);
        int int27 = builder26.connectTimeout;
        builder26.setdisableIndexRefresh(false);
        boolean boolean30 = builder26.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean11 = mongoDBRiverDefinition8.getdropCollection();
        int int12 = mongoDBRiverDefinition8.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.includeFields;
        java.lang.String str14 = mongoDBRiverDefinition8.getScript();
        java.lang.String str15 = mongoDBRiverDefinition8.getDB_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "db" + "'", str15, "db");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_fields" + "'", str16, "include_fields");
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition17.getHOST_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.getMongoLocalPassword();
        java.lang.String str21 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition17.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition17.getSTORE_STATISTICS_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition17.includeCollection;
        int int25 = mongoDBRiverDefinition17.getSocketTimeout();
        java.lang.String str26 = mongoDBRiverDefinition17.riverName;
        docScoreSearchScript0.setNextVar("secondary_read_preference", (java.lang.Object) str26);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript29 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        builder30.setmongoCollection("initial_timestamp");
        boolean boolean36 = builder30.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str41 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        int int42 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.Object obj47 = docScoreSearchScript29.unwrap((java.lang.Object) mongoDBRiverDefinition39);
        boolean boolean48 = mongoDBRiverDefinition39.getmongoUseSSL();
        docScoreSearchScript0.setNextVar("secondary_read_preference", (java.lang.Object) boolean48);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script_type" + "'", str21, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "store_statistics" + "'", str23, "store_statistics");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "collection" + "'", str41, "collection");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "parent_types" + "'", str44, "parent_types");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "servers" + "'", str45, "servers");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoSSLVerifyCertificate(false);
        com.mongodb.BasicDBObject basicDBObject4 = builder0.mongoOplogFilter;
        builder0.advancedTransformation = false;
        boolean boolean7 = builder0.getimportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        builder0.setmongoLocalPassword("advanced_transformation");
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = builder0.getmongoServers();
        java.lang.String str22 = builder0.mongoAdminUser;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder0.mongoClientOptions;
        java.lang.String str24 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoSSLVerifyCertificate(true);
        builder25.script = "import_all_collections";
        boolean boolean33 = builder25.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.mongoAdminUser("bulk_size");
        int int36 = builder35.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder35.mongoLocalUser("parent_types");
        java.util.List<com.mongodb.ServerAddress> serverAddressList39 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoServers(serverAddressList39);
        java.lang.String str41 = builder35.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder42.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet45 = builder42.excludeFields;
        builder42.setmongoCollection("hi!");
        boolean boolean48 = builder42.importAllCollections;
        builder42.setconnectTimeout((int) (short) 10);
        builder42.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder53.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet56 = builder53.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.mongoSSLVerifyCertificate(true);
        boolean boolean59 = builder53.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        com.mongodb.BasicDBObject basicDBObject64 = builder60.getmongoCollectionFilter();
        java.lang.String str65 = builder60.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray66 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList67 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList67, serverAddressArray66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder60.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList67);
        java.lang.String str70 = builder60.mongoAdminPassword;
        java.lang.String[] strArray75 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        builder60.setincludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet76);
        builder42.includeFields = strSet76;
        builder35.setexcludeFields((java.util.Set<java.lang.String>) strSet76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder0.includeFields((java.util.Set<java.lang.String>) strSet76);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder82.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(serverAddressList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "options" + "'", str22, "options");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "options" + "'", str24, "options");
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(serverAddressArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(mongoClientOptions83);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoAdminPassword;
        java.lang.String str11 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        boolean boolean15 = builder12.getmongoSSLVerifyCertificate();
        java.lang.String str16 = builder12.getriverIndexName();
        builder12.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        java.lang.String str29 = builder25.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("script");
        java.lang.String[] strArray64 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder32.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet65);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        builder0.mongoAdminUser = "store_statistics";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder0.includeCollection("include_fields");
        org.bson.types.Binary binary75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder0.initialTimestamp(binary75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str13 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.importAllCollections;
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str16 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str18 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "skip_initial_import" + "'", str16, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
    }
}

