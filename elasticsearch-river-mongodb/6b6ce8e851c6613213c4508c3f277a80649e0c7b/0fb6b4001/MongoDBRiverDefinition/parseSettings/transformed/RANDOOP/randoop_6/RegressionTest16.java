import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        builder0.advancedTransformation = true;
        java.util.Set<java.lang.String> strSet18 = builder0.excludeFields;
        boolean boolean19 = builder0.disableIndexRefresh;
        int int20 = builder0.connectTimeout;
        builder0.riverName = "actions";
        java.lang.String str23 = builder0.mongoLocalPassword;
        int int24 = builder0.socketTimeout;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        com.mongodb.BasicDBObject basicDBObject6 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder2.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray8 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList9 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList9, serverAddressArray8);
        builder2.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList9);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder13.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder13.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder1.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.script("script");
        java.lang.String[] strArray60 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        builder28.setparentTypes((java.util.Set<java.lang.String>) strSet61);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder23.script("local");
        org.elasticsearch.common.settings.Settings settings67 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder68.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet71 = builder68.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder68.mongoSSLVerifyCertificate(true);
        builder68.script = "import_all_collections";
        boolean boolean76 = builder68.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder68.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject79 = builder78.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings67, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        builder23.mongoOplogFilter = basicDBObject79;
        org.elasticsearch.river.RiverSettings riverSettings82 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject79);
        org.elasticsearch.common.settings.Settings settings83 = riverSettings82.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap84 = riverSettings82.settings();
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertNotNull(serverAddressArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(basicDBObject79);
        org.junit.Assert.assertNull(settings83);
        org.junit.Assert.assertNotNull(strMap84);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        builder0.mongoUseSSL = true;
        builder0.setincludeCollection("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.riverIndexName("");
        java.lang.String str9 = builder0.script;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script" + "'", str9, "script");
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean13 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.initial_timestamp" + "'", str14, "null.initial_timestamp");
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.mongoLocalUser = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.mongoAdminPassword("advanced_transformation");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory18 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        java.lang.String str24 = builder19.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder19.getmongoClientOptions();
        builder19.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        boolean boolean35 = builder32.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder36.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet39 = builder36.excludeFields;
        com.mongodb.BasicDBObject basicDBObject40 = builder36.getmongoCollectionFilter();
        java.lang.String str41 = builder36.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray42 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList43 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList43, serverAddressArray42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList43);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder36.getmongoClientOptions();
        builder36.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder49.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet52 = builder49.excludeFields;
        com.mongodb.BasicDBObject basicDBObject53 = builder49.getmongoCollectionFilter();
        builder36.setmongoOplogFilter(basicDBObject53);
        com.mongodb.BasicDBObject basicDBObject55 = builder36.mongoOplogFilter;
        builder32.setmongoOplogFilter(basicDBObject55);
        builder19.mongoCollectionFilter = basicDBObject55;
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory18.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject55);
        builder12.setmongoCollectionFilter(basicDBObject55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder12.mongoLocalUser("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp62 = builder12.initialTimestamp;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder12.statisticsTypeName("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder12.advancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder12.mongoClientOptions;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(serverAddressArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(mongoClientOptions46);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(executableScript58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(wildcardTimestamp62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(mongoClientOptions67);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        builder0.setscriptType("parent_types");
        builder0.setriverIndexName("null.null");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean17 = mongoDBRiverDefinition9.getimportAllCollections();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.script;
        java.lang.String str20 = mongoDBRiverDefinition9.getRiverIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        boolean boolean20 = mongoDBRiverDefinition9.getadvancedTransformation();
        java.lang.String str21 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_fields" + "'", str18, "include_fields");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "advanced_transformation" + "'", str21, "advanced_transformation");
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.importAllCollections;
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.mongoCollectionFilter;
        boolean boolean17 = mongoDBRiverDefinition9.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        java.lang.String str16 = builder15.statisticsTypeName;
        java.util.Set<java.lang.String> strSet17 = builder15.getincludeFields();
        java.lang.String str18 = builder15.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder19.initialTimestamp;
        java.lang.String str25 = builder19.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.includeCollection("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        java.lang.String str33 = builder28.mongoLocalUser;
        builder28.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder36.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet39 = builder36.excludeFields;
        com.mongodb.BasicDBObject basicDBObject40 = builder36.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder28.mongoCollectionFilter(basicDBObject40);
        builder41.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("script");
        com.mongodb.BasicDBObject basicDBObject47 = builder46.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.typeName("connect_timeout");
        boolean boolean50 = builder46.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.script("script");
        java.lang.String[] strArray85 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        builder53.setparentTypes((java.util.Set<java.lang.String>) strSet86);
        builder46.setparentTypes((java.util.Set<java.lang.String>) strSet86);
        builder41.setincludeFields((java.util.Set<java.lang.String>) strSet86);
        builder27.excludeFields = strSet86;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder15.excludeFields((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder92.throttleSize((int) (byte) 10);
        java.lang.String str95 = builder94.mongoLocalUser;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "credentials" + "'", str18, "credentials");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "credentials" + "'", str95, "credentials");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getRiverName();
        boolean boolean17 = mongoDBRiverDefinition9.skipInitialImport;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str19 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition9.parentTypes;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disable_index_refresh" + "'", str20, "disable_index_refresh");
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertNull(strSet22);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str16 = mongoDBRiverDefinition9.getUSER_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean18 = mongoDBRiverDefinition9.isMongoGridFS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "user" + "'", str16, "user");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        java.lang.String str10 = builder8.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        builder11.setmongoCollection("initial_timestamp");
        boolean boolean17 = builder11.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder19.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.indexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        com.mongodb.BasicDBObject basicDBObject29 = builder25.getmongoCollectionFilter();
        java.lang.String str30 = builder25.mongoLocalUser;
        builder25.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder25.skipInitialImport(true);
        int int35 = builder25.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder25);
        com.mongodb.BasicDBObject basicDBObject37 = mongoDBRiverDefinition36.getMongoCollectionFilter();
        builder24.setmongoCollectionFilter(basicDBObject37);
        builder8.mongoOplogFilter = basicDBObject37;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(basicDBObject37);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.riverIndexName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoAdminUser("credentials");
        java.lang.String str17 = builder16.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.scriptType("user");
        builder16.setmongoUseSSL(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "credentials" + "'", str17, "credentials");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        java.lang.String str13 = builder8.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder8.statisticsTypeName("disable_index_refresh");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoSecondaryReadPreference(false);
        builder9.mongoAdminPassword = "servers";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder15.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet18 = builder15.excludeFields;
        com.mongodb.BasicDBObject basicDBObject19 = builder15.getmongoCollectionFilter();
        java.lang.String str20 = builder15.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList22);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder15.getmongoClientOptions();
        builder15.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        builder15.setmongoOplogFilter(basicDBObject32);
        boolean boolean34 = builder15.mongoGridFS;
        boolean boolean35 = builder15.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder36.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet39 = builder36.excludeFields;
        com.mongodb.BasicDBObject basicDBObject40 = builder36.getmongoCollectionFilter();
        java.lang.String str41 = builder36.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray42 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList43 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList43, serverAddressArray42);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList43);
        boolean boolean46 = builder45.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        com.mongodb.BasicDBObject basicDBObject51 = builder47.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp52 = builder47.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray53 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList54 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList54, serverAddressArray53);
        builder47.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder45.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder58.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet61 = builder58.excludeFields;
        com.mongodb.BasicDBObject basicDBObject62 = builder58.getmongoCollectionFilter();
        java.lang.String str63 = builder58.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray64 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList65 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList65, serverAddressArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder58.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList65);
        java.lang.String str68 = builder58.mongoAdminPassword;
        java.lang.String[] strArray73 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        builder58.setincludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder45.excludeFields((java.util.Set<java.lang.String>) strSet74);
        builder15.includeFields = strSet74;
        java.lang.String str79 = builder15.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder15.mongoSSLVerifyCertificate(false);
        builder15.mongoLocalPassword = "host";
        java.lang.String str84 = builder15.riverIndexName;
        java.util.Set<java.lang.String> strSet85 = builder15.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder9.excludeFields(strSet85);
        builder86.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(serverAddressArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNull(wildcardTimestamp52);
        org.junit.Assert.assertNotNull(serverAddressArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(serverAddressArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.statisticsTypeName;
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str19 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setscript("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("script");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.typeName("connect_timeout");
        boolean boolean22 = builder18.mongoGridFS;
        java.lang.String str23 = builder18.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder18.typeName("concurrent_requests");
        java.lang.String str26 = builder18.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder27.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet30 = builder27.excludeFields;
        com.mongodb.BasicDBObject basicDBObject31 = builder27.getmongoCollectionFilter();
        java.lang.String str32 = builder27.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray33 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList34 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList34, serverAddressArray33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList34);
        java.lang.String str37 = builder27.mongoAdminPassword;
        java.lang.String[] strArray42 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        builder27.setincludeFields((java.util.Set<java.lang.String>) strSet43);
        builder18.setexcludeFields((java.util.Set<java.lang.String>) strSet43);
        builder12.includeFields = strSet43;
        builder12.setmongoLocalPassword("options");
        java.lang.String str50 = builder12.getincludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(serverAddressArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.mongoServers;
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str17 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "include_collection" + "'", str17, "include_collection");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "connect_timeout" + "'", str18, "connect_timeout");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str16 = mongoDBRiverDefinition9.script;
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder0.setriverIndexName("exclude_fields");
        java.lang.String str15 = builder0.mongoLocalUser;
        builder0.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.script("script");
        java.lang.String[] strArray55 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder18.excludeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet56);
        builder0.skipInitialImport = true;
        builder0.setindexName("db");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.includeCollection("options");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("hi!");
        boolean boolean6 = builder0.importAllCollections;
        java.lang.String str7 = builder0.mongoAdminPassword;
        java.lang.String str8 = builder0.mongoLocalPassword;
        builder0.mongoAdminUser = "ssl_verify_certificate";
        java.lang.String str11 = builder0.mongoCollection;
        java.lang.String str12 = builder0.mongoAdminPassword;
        builder0.mongoLocalPassword = "gridfs";
        builder0.throttleSize = 10;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        java.lang.String str17 = builder13.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("script");
        java.lang.String[] strArray52 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet53);
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        builder12.mongoClientOptions = mongoClientOptions58;
        java.lang.String str60 = builder12.mongoAdminUser;
        boolean boolean61 = builder12.dropCollection;
        builder12.typeName = "initial_timestamp";
        boolean boolean64 = builder12.disableIndexRefresh;
        java.util.Set<java.lang.String> strSet65 = builder12.getincludeFields();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        com.mongodb.BasicDBObject basicDBObject21 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean23 = mongoDBRiverDefinition22.getmongoGridFS();
        int int24 = mongoDBRiverDefinition22.socketTimeout;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = mongoDBRiverDefinition9.initialTimestamp;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str15 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str17 = mongoDBRiverDefinition9.script;
        java.lang.String str18 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "credentials" + "'", str15, "credentials");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index" + "'", str16, "index");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "actions" + "'", str18, "actions");
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        java.lang.String str12 = builder0.mongoAdminUser;
        builder0.mongoCollection = "secondary_read_preference";
        java.lang.String str15 = builder0.getriverName();
        boolean boolean16 = builder0.mongoUseSSL;
        builder0.mongoGridFS = false;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean17 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition9.riverIndexName;
        boolean boolean19 = mongoDBRiverDefinition9.isStoreStatistics();
        boolean boolean20 = mongoDBRiverDefinition9.getmongoGridFS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder4.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet7 = builder4.excludeFields;
        builder4.setmongoCollection("initial_timestamp");
        boolean boolean10 = builder4.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.includeCollection;
        java.lang.String str15 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition13.isImportAllCollections();
        boolean boolean17 = mongoDBRiverDefinition13.mongoGridFS;
        docScoreSearchScript0.setNextVar("collection", (java.lang.Object) mongoDBRiverDefinition13);
        docScoreSearchScript0.setNextScore((float) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder21.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet24 = builder21.excludeFields;
        builder21.setmongoCollection("initial_timestamp");
        boolean boolean27 = builder21.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.lang.String str31 = mongoDBRiverDefinition30.includeCollection;
        java.lang.String str32 = mongoDBRiverDefinition30.getNAME_FIELD();
        java.lang.String str33 = mongoDBRiverDefinition30.getCONNECTION_TIMEOUT();
        boolean boolean34 = mongoDBRiverDefinition30.getdisableIndexRefresh();
        java.lang.Object obj35 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition30);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "name" + "'", str32, "name");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "connect_timeout" + "'", str33, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str13 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "import_all_collections" + "'", str11, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "initial_timestamp" + "'", str12, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_bulk_requests" + "'", str13, "concurrent_bulk_requests");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        boolean boolean13 = builder12.mongoSSLVerifyCertificate;
        java.lang.String str14 = builder12.typeName;
        builder12.typeName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet23 = builder22.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        boolean boolean27 = builder24.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        java.lang.String str33 = builder28.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray34 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList35 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList35, serverAddressArray34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder28.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder28.getmongoClientOptions();
        builder28.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder41.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet44 = builder41.excludeFields;
        com.mongodb.BasicDBObject basicDBObject45 = builder41.getmongoCollectionFilter();
        builder28.setmongoOplogFilter(basicDBObject45);
        com.mongodb.BasicDBObject basicDBObject47 = builder28.mongoOplogFilter;
        builder24.setmongoOplogFilter(basicDBObject47);
        builder22.setmongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder12.mongoCollectionFilter(basicDBObject47);
        boolean boolean51 = builder50.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder50.mongoAdminUser("socket_timeout");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(serverAddressArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.riverName;
        java.lang.String str13 = mongoDBRiverDefinition9.getScript();
        boolean boolean14 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str16 = mongoDBRiverDefinition9.riverName;
        boolean boolean17 = mongoDBRiverDefinition9.getdropCollection();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        java.lang.String str21 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index" + "'", str15, "index");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_fields" + "'", str19, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "local" + "'", str21, "local");
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings8 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService scriptService9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("filter", "bulk_size", riverSettings8, scriptService9);
        java.lang.String str11 = mongoDBRiverDefinition10.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition10.isMongoUseSSL();
        java.lang.String str13 = mongoDBRiverDefinition10.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        int int18 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        java.lang.String str19 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str21 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 27017 + "'", int18 == 27017);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "localhost" + "'", str19, "localhost");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "disable_index_refresh" + "'", str21, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str18 = mongoDBRiverDefinition9.getHOST_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.lang.String str20 = mongoDBRiverDefinition9.getIndexName();
        boolean boolean21 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str22 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk" + "'", str16, "bulk");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "host" + "'", str18, "host");
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "collection" + "'", str22, "collection");
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        boolean boolean17 = mongoDBRiverDefinition9.getimportAllCollections();
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str19 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str20 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script_type" + "'", str13, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "exclude_fields" + "'", str15, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "concurrent_requests" + "'", str20, "concurrent_requests");
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.getmongoClientOptions();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder11.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject14 = builder11.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoLocalPassword("");
        boolean boolean17 = builder16.getdisableIndexRefresh();
        int int18 = builder16.getsocketTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = builder2.getadvancedTransformation();
        boolean boolean39 = builder2.mongoSecondaryReadPreference;
        boolean boolean40 = builder2.getdisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject41 = builder2.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder2.riverIndexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("include_fields");
        int int46 = builder43.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = builder43.build();
        java.lang.String str48 = builder43.getscript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "script" + "'", str48, "script");
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.importAllCollections(false);
        com.mongodb.BasicDBObject basicDBObject23 = builder22.getmongoCollectionFilter();
        builder22.includeCollection = "localhost";
        java.lang.String str26 = builder22.indexName;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        int int11 = builder10.socketTimeout;
        boolean boolean12 = builder10.getmongoSecondaryReadPreference();
        int int13 = builder10.throttleSize;
        builder10.setriverName("drop_collection");
        boolean boolean16 = builder10.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder10.mongoUseSSL(false);
        java.lang.String str19 = builder10.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.includeCollection = "parent_types";
        builder8.connectTimeout = 'a';
        builder8.mongoGridFS = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.getExcludeFields();
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str14 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.getimportAllCollections();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        java.util.Set<java.lang.String> strSet12 = null;
        builder0.excludeFields = strSet12;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.typeName("type");
        boolean boolean17 = builder16.mongoUseSSL;
        java.lang.String str18 = builder16.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getPORT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getHOST_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "port" + "'", str13, "port");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "include_fields" + "'", str14, "include_fields");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk_size" + "'", str15, "bulk_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "host" + "'", str16, "host");
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        boolean boolean10 = builder7.storeStatistics;
        builder7.settypeName("flush_interval");
        builder7.setimportAllCollections(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet10 = builder0.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        builder0.mongoDb = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.socketTimeout((int) (byte) 10);
        builder0.dropCollection = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("script");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.mongoOplogFilter(basicDBObject45);
        int int47 = builder46.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder46.riverIndexName("collection");
        java.lang.String str50 = builder46.statisticsIndexName;
        boolean boolean51 = builder46.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.scriptType("bulk_size");
        builder19.setriverIndexName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder19.mongoCollection("concurrent_bulk_requests");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        int int15 = mongoDBRiverDefinition9.connectTimeout;
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str21 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition9.typeName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "admin" + "'", str18, "admin");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk" + "'", str21, "bulk");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setstatisticsTypeName("ssl");
        boolean boolean8 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        builder9.setmongoCollection("initial_timestamp");
        boolean boolean15 = builder9.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.skipInitialImport(false);
        builder9.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.socketTimeout((int) (short) 1);
        builder9.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder9.importAllCollections(false);
        java.util.Set<java.lang.String> strSet26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.includeFields(strSet26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp33 = builder28.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray34 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList35 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList35, serverAddressArray34);
        builder28.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        java.lang.String str38 = builder28.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder28.dropCollection(true);
        boolean boolean41 = builder40.mongoSSLVerifyCertificate;
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "script_type", "collection", "secondary_read_preference", "throttle_size", "host", "actions", "drop_collection", "name", "initial_timestamp", "size", "script_type", "throttle_size", "hi!", "advanced_transformation", "name", "concurrent_requests" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder40.includeFields((java.util.Set<java.lang.String>) strSet60);
        builder27.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder0.socketTimeout = 8;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder69.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet72 = builder69.excludeFields;
        com.mongodb.BasicDBObject basicDBObject73 = builder69.getmongoCollectionFilter();
        java.lang.String str74 = builder69.mongoLocalUser;
        builder69.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder77.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet80 = builder77.excludeFields;
        com.mongodb.BasicDBObject basicDBObject81 = builder77.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder69.mongoCollectionFilter(basicDBObject81);
        java.lang.String str83 = builder69.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder69.mongoUseSSL(false);
        builder85.setriverIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder85.connectTimeout(8);
        java.util.List<com.mongodb.ServerAddress> serverAddressList90 = builder89.getmongoServers();
        builder0.setmongoServers(serverAddressList90);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNull(wildcardTimestamp33);
        org.junit.Assert.assertNotNull(serverAddressArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(serverAddressList90);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str15 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "actions" + "'", str15, "actions");
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        java.util.Set<java.lang.String> strSet22 = builder0.excludeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder0.mongoClientOptions;
        java.lang.String str24 = builder0.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "user" + "'", str24, "user");
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoAdminPassword;
        java.lang.String str11 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        boolean boolean15 = builder12.getmongoSSLVerifyCertificate();
        java.lang.String str16 = builder12.getriverIndexName();
        builder12.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.mongoUseSSL(true);
        builder12.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        java.lang.String str29 = builder25.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("script");
        java.lang.String[] strArray64 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder32.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder25.parentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet65);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        java.lang.String str71 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder0.script("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder77.typeName("skip_initial_import");
        java.lang.String str80 = builder77.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet24 = builder0.includeFields;
        java.lang.String str25 = builder0.mongoCollection;
        builder0.mongoAdminPassword = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.scriptType("");
        builder0.socketTimeout = (byte) 100;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.indexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.disableIndexRefresh(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean18 = mongoDBRiverDefinition9.getdropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str18 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.initial_timestamp" + "'", str17, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bulk_size" + "'", str18, "bulk_size");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "options" + "'", str19, "options");
        org.junit.Assert.assertNull(wildcardTimestamp20);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition9.riverIndexName;
        boolean boolean18 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.script("script");
        com.mongodb.BasicDBObject basicDBObject19 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder18.typeName("connect_timeout");
        boolean boolean22 = builder18.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.script("script");
        java.lang.String[] strArray57 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder18.setparentTypes((java.util.Set<java.lang.String>) strSet58);
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder13.statisticsIndexName("script_type");
        java.lang.String str65 = builder13.getscript();
        builder13.settypeName("initial_timestamp");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "drop_collection" + "'", str65, "drop_collection");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        java.lang.String str12 = builder10.getstatisticsIndexName();
        java.lang.String str13 = builder10.mongoLocalUser;
        builder10.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder10.mongoLocalUser("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.mongoCollection("bulk_size");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.statisticsTypeName;
        boolean boolean20 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        boolean boolean21 = mongoDBRiverDefinition9.isAdvancedTransformation();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script" + "'", str18, "script");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        builder2.setindexName("local");
        builder2.setscriptType("skip_initial_import");
        java.lang.String str14 = builder2.getscript();
        java.util.Set<java.lang.String> strSet15 = builder2.parentTypes;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        int int17 = mongoDBRiverDefinition9.connectTimeout;
        java.lang.String str18 = mongoDBRiverDefinition9.riverName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str20 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "local" + "'", str20, "local");
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        builder2.setstatisticsIndexName("password");
        builder2.dropCollection = true;
        boolean boolean13 = builder2.getdropCollection();
        boolean boolean14 = builder2.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.script("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean18 = builder17.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        builder19.setmongoCollection("initial_timestamp");
        boolean boolean25 = builder19.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.lang.String str29 = mongoDBRiverDefinition28.includeCollection;
        java.lang.String str30 = mongoDBRiverDefinition28.getTypeName();
        com.mongodb.BasicDBObject basicDBObject31 = mongoDBRiverDefinition28.getMongoCollectionFilter();
        builder17.mongoOplogFilter = basicDBObject31;
        builder2.setmongoOplogFilter(basicDBObject31);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(basicDBObject31);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = builder2.getadvancedTransformation();
        boolean boolean39 = builder2.mongoSecondaryReadPreference;
        boolean boolean40 = builder2.getdisableIndexRefresh();
        builder2.setmongoLocalUser("options");
        com.mongodb.BasicDBObject basicDBObject44 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder2.mongoOplogFilter(basicDBObject44);
        builder2.setdropCollection(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.riverIndexName("filter");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoAdminUser("credentials");
        java.lang.String str17 = builder9.mongoAdminPassword;
        int int18 = builder9.throttleSize;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        builder0.setriverIndexName("gridfs");
        builder0.mongoGridFS = false;
        builder0.statisticsIndexName = "ssl";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.skipInitialImport(true);
        builder0.setriverIndexName("import_all_collections");
        builder0.mongoLocalPassword = "host";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoLocalUser("port");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        builder2.setmongoCollection("initial_timestamp");
        boolean boolean8 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = mongoDBRiverDefinition11.includeCollection;
        java.lang.String str13 = mongoDBRiverDefinition11.getTypeName();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        builder0.mongoOplogFilter = basicDBObject14;
        builder0.dropCollection = true;
        java.lang.String str18 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        builder19.setmongoCollection("initial_timestamp");
        boolean boolean25 = builder19.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.skipInitialImport(false);
        builder19.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder19.importAllCollections(false);
        builder19.setriverIndexName("exclude_fields");
        java.lang.String str34 = builder19.mongoLocalUser;
        builder19.mongoSecondaryReadPreference = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("script");
        java.lang.String[] strArray74 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder42.setparentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder37.excludeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder80.importAllCollections = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        builder2.setstoreStatistics(false);
        builder2.setskipInitialImport(false);
        java.lang.String str9 = builder2.includeCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        java.lang.String str38 = builder2.includeCollection;
        boolean boolean39 = builder2.mongoGridFS;
        java.util.Set<java.lang.String> strSet40 = builder2.getincludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet40);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        boolean boolean13 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str14 = mongoDBRiverDefinition9.typeName;
        boolean boolean15 = mongoDBRiverDefinition9.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = docScoreSearchScript0.unwrap(obj5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder9.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        builder9.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        java.util.Set<java.lang.String> strSet20 = null;
        builder8.excludeFields = strSet20;
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder8);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextVar("disable_index_refresh", (java.lang.Object) "index");
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        boolean boolean19 = mongoDBRiverDefinition17.mongoGridFS;
        java.lang.String str20 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition17.getExcludeFields();
        java.lang.String str22 = mongoDBRiverDefinition17.mongoLocalUser;
        java.lang.Object obj23 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition17);
        boolean boolean24 = mongoDBRiverDefinition17.isMongoUseSSL();
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        boolean boolean20 = mongoDBRiverDefinition9.getadvancedTransformation();
        java.lang.String str21 = mongoDBRiverDefinition9.getRiverIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_fields" + "'", str18, "include_fields");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        int int18 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str20 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getTypeName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 27017 + "'", int18 == 27017);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "filter" + "'", str20, "filter");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        java.lang.String str75 = builder74.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder74.mongoLocalUser("advanced_transformation");
        java.lang.String str78 = builder77.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder77.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean18 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str19 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getPORT_FIELD();
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition9.getIncludeFields();
        boolean boolean23 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str24 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet25 = mongoDBRiverDefinition9.getExcludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "type" + "'", str19, "type");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gridfs" + "'", str20, "gridfs");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "port" + "'", str21, "port");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "secondary_read_preference" + "'", str24, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        java.lang.String str6 = builder0.includeCollection;
        boolean boolean7 = builder0.getimportAllCollections();
        boolean boolean8 = builder0.getimportAllCollections();
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.riverName("type");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.script("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder2.mongoDb;
        builder2.mongoLocalPassword = "name";
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = builder2.mongoServers;
        builder2.setscript("host");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder2.skipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean16 = mongoDBRiverDefinition9.getdropCollection();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.getParentTypes();
        boolean boolean18 = mongoDBRiverDefinition9.dropCollection;
        boolean boolean19 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.statisticsTypeName("host");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder0.setmongoClientOptions(mongoClientOptions21);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet27 = builder24.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoSSLVerifyCertificate(true);
        boolean boolean30 = builder24.mongoSSLVerifyCertificate;
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        builder24.mongoCollectionFilter = basicDBObject36;
        org.elasticsearch.river.RiverSettings riverSettings39 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.mongoOplogFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoSecondaryReadPreference(true);
        boolean boolean43 = builder40.storeStatistics;
        boolean boolean44 = builder40.getdropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) ' ');
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = builder9.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray15 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList16 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList16, serverAddressArray15);
        builder9.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder20.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet23 = builder20.excludeFields;
        com.mongodb.BasicDBObject basicDBObject24 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp25 = builder20.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray26 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList27 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList27, serverAddressArray26);
        builder20.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder8.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder8.indexName("");
        int int33 = builder32.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = builder32.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder35.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet38 = builder35.excludeFields;
        com.mongodb.BasicDBObject basicDBObject39 = builder35.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp40 = builder35.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray41 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList42 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList42, serverAddressArray41);
        builder35.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList42);
        java.lang.String str45 = builder35.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder35.dropCollection(true);
        java.lang.String str48 = builder35.mongoCollection;
        java.lang.String str49 = builder35.includeCollection;
        boolean boolean50 = builder35.getstoreStatistics();
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory51 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = null;
        org.elasticsearch.script.ExecutableScript executableScript53 = docScoreNativeScriptFactory51.newScript(strMap52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder54.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet57 = builder54.excludeFields;
        com.mongodb.BasicDBObject basicDBObject58 = builder54.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript59 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        builder60.setmongoCollection("initial_timestamp");
        boolean boolean66 = builder60.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder60.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        java.lang.String str70 = mongoDBRiverDefinition69.includeCollection;
        java.lang.String str71 = mongoDBRiverDefinition69.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet72 = mongoDBRiverDefinition69.excludeFields;
        boolean boolean73 = mongoDBRiverDefinition69.getstoreStatistics();
        boolean boolean74 = mongoDBRiverDefinition69.getmongoGridFS();
        java.lang.String str75 = mongoDBRiverDefinition69.getSECONDARY_READ_PREFERENCE_FIELD();
        int int76 = mongoDBRiverDefinition69.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject77 = mongoDBRiverDefinition69.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript78 = docScoreNativeScriptFactory51.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject77);
        builder35.setmongoCollectionFilter(basicDBObject77);
        builder32.mongoOplogFilter = basicDBObject77;
        docScoreSearchScript0.setNextVar("type", (java.lang.Object) builder32);
        org.apache.lucene.search.Scorer scorer82 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "name" + "'", obj6, "name");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertNotNull(serverAddressArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(basicDBObject24);
        org.junit.Assert.assertNull(wildcardTimestamp25);
        org.junit.Assert.assertNotNull(serverAddressArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNull(wildcardTimestamp40);
        org.junit.Assert.assertNotNull(serverAddressArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(executableScript53);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertNotNull(executableScript59);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "collection" + "'", str71, "collection");
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "secondary_read_preference" + "'", str75, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(basicDBObject77);
        org.junit.Assert.assertNotNull(executableScript78);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean16 = mongoDBRiverDefinition9.skipInitialImport;
        java.lang.String str17 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str19 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ssl" + "'", str14, "ssl");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "actions" + "'", str19, "actions");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoGridFS(false);
        builder0.throttleSize = (short) 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder5.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet8 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder5.mongoSSLVerifyCertificate(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder5.getmongoServers();
        builder0.mongoServers = serverAddressList11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoUseSSL(true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoDb("");
        java.lang.String str44 = builder41.getstatisticsTypeName();
        builder41.setskipInitialImport(false);
        builder41.setindexName("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder41.includeCollection("name");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        boolean boolean16 = builder0.mongoSSLVerifyCertificate;
        builder0.setdropCollection(true);
        builder0.setmongoDb("db");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = builder0.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardTimestamp21);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str19 = mongoDBRiverDefinition18.mongoAdminUser;
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition18.getIncludeFields();
        java.lang.String str21 = mongoDBRiverDefinition18.getACTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition18.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition18.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList24 = mongoDBRiverDefinition18.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "actions" + "'", str21, "actions");
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(serverAddressList24);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.socketTimeout(100);
        boolean boolean7 = builder0.getimportAllCollections();
        int int8 = builder0.socketTimeout;
        builder0.statisticsTypeName = "type";
        builder0.setincludeCollection("index");
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoServers(serverAddressList13);
        org.bson.types.BSONTimestamp bSONTimestamp15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.initialTimestamp(bSONTimestamp15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.getmongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str18 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getScript();
        java.lang.String str20 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "throttle_size" + "'", str18, "throttle_size");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "store_statistics" + "'", str20, "store_statistics");
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.throttleSize(10);
        com.mongodb.BasicDBObject basicDBObject11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoCollectionFilter(basicDBObject11);
        com.mongodb.BasicDBObject basicDBObject13 = builder12.mongoOplogFilter;
        builder12.statisticsIndexName = "options";
        builder12.riverName = "connect_timeout";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(basicDBObject13);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        builder5.statisticsIndexName = "exclude_fields";
        java.util.Set<java.lang.String> strSet8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.includeFields(strSet8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoCollection("collection");
        builder11.dropCollection = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.mongoLocalPassword;
        java.lang.String str11 = mongoDBRiverDefinition8.getBULK_FIELD();
        boolean boolean12 = mongoDBRiverDefinition8.isAdvancedTransformation();
        boolean boolean13 = mongoDBRiverDefinition8.isDisableIndexRefresh();
        java.lang.String str14 = mongoDBRiverDefinition8.getFLUSH_INTERVAL_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition8.getOPTIONS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bulk" + "'", str11, "bulk");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "options" + "'", str15, "options");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getScript();
        java.lang.String str18 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getStatisticsIndexName();
        java.lang.String str20 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "options" + "'", str18, "options");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "credentials" + "'", str20, "credentials");
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean13 = mongoDBRiverDefinition9.mongoGridFS;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.getIncludeCollection();
        boolean boolean16 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition9.getTYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue16 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getIncludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "type" + "'", str15, "type");
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk" + "'", str17, "bulk");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        builder16.storeStatistics = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder16.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder26.script("ssl_verify_certificate");
        builder26.mongoSecondaryReadPreference = false;
        java.util.Set<java.lang.String> strSet31 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.excludeFields(strSet31);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        java.lang.String str7 = builder2.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.typeName("concurrent_requests");
        java.lang.String str10 = builder2.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        java.lang.String str16 = builder11.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        java.lang.String str21 = builder11.mongoAdminPassword;
        java.lang.String[] strArray26 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet27);
        builder2.setexcludeFields((java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        builder31.setmongoCollection("initial_timestamp");
        boolean boolean37 = builder31.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder31.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.script("script");
        com.mongodb.BasicDBObject basicDBObject43 = builder42.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder31.mongoCollectionFilter(basicDBObject43);
        builder2.setmongoCollectionFilter(basicDBObject43);
        builder2.settypeName("script_type");
        java.lang.String str48 = builder2.getmongoAdminUser();
        builder2.dropCollection = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getDB_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str20 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean22 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str23 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean25 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "null.initial_timestamp" + "'", str19, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disable_index_refresh" + "'", str23, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "collection" + "'", str24, "collection");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoClientOptions(mongoClientOptions11);
        builder0.disableIndexRefresh = true;
        builder0.dropCollection = false;
        builder0.typeName = "size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.dropCollection(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition9.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "actions" + "'", str19, "actions");
        org.junit.Assert.assertNotNull(serverAddressList20);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoAdminPassword;
        java.lang.String str11 = builder0.gettypeName();
        boolean boolean12 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.skipInitialImport(false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        java.lang.String str20 = builder16.getmongoCollection();
        builder16.mongoUseSSL = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(false);
        boolean boolean45 = builder44.getimportAllCollections();
        builder44.setscript("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.statisticsTypeName("bulk_timeout");
        builder49.setmongoCollection("initial_timestamp");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(true);
        java.util.Set<java.lang.String> strSet10 = builder0.getexcludeFields();
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        java.lang.String str22 = builder12.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.dropCollection(true);
        java.lang.String str25 = builder24.typeName;
        builder24.setmongoSecondaryReadPreference(false);
        boolean boolean28 = builder24.mongoGridFS;
        java.lang.String str29 = builder24.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.disableIndexRefresh(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList32 = builder24.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder33.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet36 = builder33.excludeFields;
        com.mongodb.BasicDBObject basicDBObject37 = builder33.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp38 = builder33.initialTimestamp;
        builder33.setstatisticsTypeName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder33.scriptType("drop_collection");
        java.lang.String str43 = builder42.getincludeCollection();
        boolean boolean44 = builder42.mongoSecondaryReadPreference;
        java.lang.String str45 = builder42.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder46.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet49 = builder46.excludeFields;
        com.mongodb.BasicDBObject basicDBObject50 = builder46.getmongoCollectionFilter();
        java.lang.String str51 = builder46.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray52 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList53 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList53, serverAddressArray52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder46.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList53);
        boolean boolean56 = builder55.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder57.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet60 = builder57.excludeFields;
        com.mongodb.BasicDBObject basicDBObject61 = builder57.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp62 = builder57.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray63 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList64 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList64, serverAddressArray63);
        builder57.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder55.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder68.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet71 = builder68.excludeFields;
        com.mongodb.BasicDBObject basicDBObject72 = builder68.getmongoCollectionFilter();
        java.lang.String str73 = builder68.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray74 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList75 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList75, serverAddressArray74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder68.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList75);
        java.lang.String str78 = builder68.mongoAdminPassword;
        java.lang.String[] strArray83 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        builder68.setincludeFields((java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder55.excludeFields((java.util.Set<java.lang.String>) strSet84);
        builder42.parentTypes = strSet84;
        builder24.parentTypes = strSet84;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet84);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(serverAddressList32);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNull(wildcardTimestamp38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "drop_collection" + "'", str45, "drop_collection");
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(basicDBObject50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(serverAddressArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNull(wildcardTimestamp62);
        org.junit.Assert.assertNotNull(serverAddressArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(serverAddressArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        int int18 = mongoDBRiverDefinition9.throttleSize;
        boolean boolean19 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean20 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean21 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        int int16 = builder0.getconnectTimeout();
        boolean boolean17 = builder0.disableIndexRefresh;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean14 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getIncludeFields();
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str20 = mongoDBRiverDefinition9.mongoLocalUser;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean22 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(byteSizeValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder17.advancedTransformation(false);
        boolean boolean22 = builder17.mongoUseSSL;
        java.util.Set<java.lang.String> strSet23 = builder17.excludeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str18 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str20 = mongoDBRiverDefinition9.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "localhost" + "'", str18, "localhost");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean15 = mongoDBRiverDefinition9.isMongoGridFS();
        java.lang.String str16 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "advanced_transformation" + "'", str16, "advanced_transformation");
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.socketTimeout((int) (short) -1);
        builder9.setdropCollection(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        java.lang.String str12 = builder0.getmongoCollection();
        builder0.statisticsIndexName = "host";
        int int15 = builder0.getconnectTimeout();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoCollectionFilter(basicDBObject16);
        builder17.importAllCollections = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(false);
        boolean boolean45 = builder44.getimportAllCollections();
        builder44.setscript("name");
        java.lang.String str48 = builder44.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        int int15 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder2.mongoCollection = "servers";
        int int19 = builder2.throttleSize;
        builder2.throttleSize = 0;
        builder2.setmongoCollection("port");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder24.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("script");
        java.lang.String[] strArray64 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder32.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet65);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        java.lang.String str70 = builder24.getincludeCollection();
        builder24.dropCollection = false;
        java.lang.String str73 = builder24.getincludeCollection();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str18 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str20 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        int int21 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        java.lang.String str22 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition9.getParentTypes();
        java.lang.String str24 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "localhost" + "'", str18, "localhost");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "localhost" + "'", str20, "localhost");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27017 + "'", int21 == 27017);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "local" + "'", str22, "local");
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "store_statistics" + "'", str24, "store_statistics");
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        int int16 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.storeStatistics(false);
        boolean boolean21 = builder18.disableIndexRefresh;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder18.initialTimestamp;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardTimestamp22);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoAdminPassword;
        java.lang.String str11 = builder0.gettypeName();
        boolean boolean12 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeCollection("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.skipInitialImport(false);
        java.util.Set<java.lang.String> strSet17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder16.parentTypes(strSet17);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder16.mongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.statisticsTypeName("concurrent_bulk_requests");
        int int24 = builder21.connectTimeout;
        builder21.mongoDb = "servers";
        builder21.setscriptType("");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        boolean boolean18 = mongoDBRiverDefinition9.getdropCollection();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str20 = mongoDBRiverDefinition9.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str15 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.getmongoUseSSL();
        java.lang.String str18 = mongoDBRiverDefinition9.getPORT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "port" + "'", str18, "port");
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        builder2.setmongoAdminUser("import_all_collections");
        builder2.skipInitialImport = true;
        builder2.setstatisticsIndexName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.mongoUseSSL(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.lang.String str18 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        int int22 = mongoDBRiverDefinition9.getSocketTimeout();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "localhost" + "'", str18, "localhost");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk_size" + "'", str20, "bulk_size");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "admin" + "'", str21, "admin");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str19 = mongoDBRiverDefinition18.mongoAdminUser;
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition18.getIncludeFields();
        java.lang.String str21 = mongoDBRiverDefinition18.getACTIONS_FIELD();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition18.mongoCollectionFilter;
        java.lang.String str23 = mongoDBRiverDefinition18.statisticsTypeName;
        java.lang.String str24 = mongoDBRiverDefinition18.getINDEX_OBJECT();
        java.lang.String str25 = mongoDBRiverDefinition18.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "actions" + "'", str21, "actions");
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "index" + "'", str24, "index");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.mongoGridFS(true);
        builder2.setindexName("local");
        java.util.Set<java.lang.String> strSet12 = builder2.getexcludeFields();
        java.lang.String str13 = builder2.getmongoLocalPassword();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder5.setmongoSecondaryReadPreference(false);
        boolean boolean8 = builder5.getmongoSSLVerifyCertificate();
        java.lang.String str9 = builder5.getriverIndexName();
        builder5.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoUseSSL(true);
        builder5.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder5.script("bulk");
        com.mongodb.BasicDBObject basicDBObject18 = builder5.mongoCollectionFilter;
        builder2.setmongoOplogFilter(basicDBObject18);
        builder2.mongoLocalPassword = "name";
        java.lang.String str22 = builder2.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder2.socketTimeout(1000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition9.isStoreStatistics();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean16 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        boolean boolean20 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk_timeout" + "'", str17, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "user" + "'", str18, "user");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index" + "'", str19, "index");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        builder0.setmongoSSLVerifyCertificate(true);
        builder0.mongoAdminPassword = "include_collection";
        builder0.mongoUseSSL = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str17 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "include_collection" + "'", str15, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "script" + "'", str17, "script");
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str16 = mongoDBRiverDefinition9.typeName;
        boolean boolean17 = mongoDBRiverDefinition9.dropCollection;
        boolean boolean18 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition9.mongoClientOptions;
        int int16 = mongoDBRiverDefinition9.connectTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder11.getmongoClientOptions();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder11.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject14 = builder11.mongoOplogFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = builder11.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNotNull(serverAddressList15);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(false);
        java.util.Set<java.lang.String> strSet45 = builder41.getparentTypes();
        builder41.setstatisticsTypeName("actions");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet45);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.disableIndexRefresh(true);
        builder10.setconnectTimeout((int) 'a');
        java.util.Set<java.lang.String> strSet13 = builder10.excludeFields;
        java.lang.String str14 = builder10.getindexName();
        int int15 = builder10.socketTimeout;
        builder10.setmongoCollection("ssl");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean16 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str17 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "import_all_collections" + "'", str17, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "connect_timeout" + "'", str18, "connect_timeout");
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str17 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str19 = mongoDBRiverDefinition9.getDB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "admin" + "'", str17, "admin");
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "db" + "'", str19, "db");
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getIncludeCollection();
        java.lang.String str11 = mongoDBRiverDefinition8.getRiverName();
        java.lang.String str12 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.mongoUseSSL;
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoAdminUser();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "throttle_size" + "'", str12, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore((float) (byte) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.script("script");
        com.mongodb.BasicDBObject basicDBObject20 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoCollectionFilter(basicDBObject20);
        docScoreSearchScript0.setNextVar("null.initial_timestamp", (java.lang.Object) builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet27 = builder24.excludeFields;
        builder24.setmongoCollection("initial_timestamp");
        boolean boolean30 = builder24.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.includeCollection;
        java.lang.String str35 = mongoDBRiverDefinition33.getIndexName();
        java.lang.String str36 = mongoDBRiverDefinition33.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str37 = mongoDBRiverDefinition33.script;
        java.lang.String str38 = mongoDBRiverDefinition33.getGRIDFS_FIELD();
        int int39 = mongoDBRiverDefinition33.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp40 = mongoDBRiverDefinition33.getInitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject41 = mongoDBRiverDefinition33.mongoCollectionFilter;
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = mongoDBRiverDefinition33.getMongoServers();
        docScoreSearchScript0.setNextVar("drop_collection", (java.lang.Object) mongoDBRiverDefinition33);
        boolean boolean44 = mongoDBRiverDefinition33.mongoSecondaryReadPreference;
        java.lang.String str45 = mongoDBRiverDefinition33.getMongoAdminUser();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondary_read_preference" + "'", str36, "secondary_read_preference");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "gridfs" + "'", str38, "gridfs");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(serverAddressList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        int int15 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str16 = mongoDBRiverDefinition9.getScriptType();
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str18 = mongoDBRiverDefinition9.getFILTER_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str20 = mongoDBRiverDefinition9.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "filter" + "'", str18, "filter");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        java.lang.String str14 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.Class<?> wildcardClass16 = mongoDBRiverDefinition9.getClass();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str18 = mongoDBRiverDefinition9.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.initial_timestamp" + "'", str15, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        int int7 = builder0.getconnectTimeout();
        java.lang.String str8 = builder0.mongoLocalPassword;
        builder0.setriverIndexName("filter");
        builder0.riverIndexName = "";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder0.initialTimestamp;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = builder0.getmongoServers();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressList14);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        builder9.mongoAdminPassword = "include_collection";
        java.lang.String str24 = builder9.getriverIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "skip_initial_import" + "'", str13, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        java.lang.String str25 = builder0.getstatisticsIndexName();
        builder0.mongoAdminPassword = "disable_index_refresh";
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoClientOptions(mongoClientOptions28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.riverName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.statisticsIndexName("local");
        builder33.mongoAdminPassword = "include_collection";
        java.util.Set<java.lang.String> strSet36 = builder33.getexcludeFields();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(strSet36);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        boolean boolean16 = builder13.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        com.mongodb.BasicDBObject basicDBObject21 = builder17.getmongoCollectionFilter();
        java.lang.String str22 = builder17.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList24);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder17.getmongoClientOptions();
        builder17.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        com.mongodb.BasicDBObject basicDBObject34 = builder30.getmongoCollectionFilter();
        builder17.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = builder17.mongoOplogFilter;
        builder13.setmongoOplogFilter(basicDBObject36);
        builder0.mongoCollectionFilter = basicDBObject36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.includeCollection("hi!");
        int int41 = builder40.getthrottleSize();
        builder40.mongoUseSSL = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder12.mongoDb = "hi!";
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder12.mongoClientOptions = mongoClientOptions15;
        boolean boolean17 = builder12.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        com.mongodb.BasicDBObject basicDBObject22 = builder18.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp23 = builder18.initialTimestamp;
        builder18.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean26 = builder18.getmongoUseSSL();
        int int27 = builder18.throttleSize;
        builder18.mongoCollection = "secondary_read_preference";
        com.mongodb.BasicDBObject basicDBObject30 = builder18.getmongoCollectionFilter();
        builder12.mongoOplogFilter = basicDBObject30;
        boolean boolean32 = builder12.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder12.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder35.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet38 = builder35.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet41 = builder40.excludeFields;
        java.lang.String str42 = builder40.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        java.lang.String str53 = builder43.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder43.dropCollection(true);
        java.lang.String str56 = builder43.mongoCollection;
        java.lang.String str57 = builder43.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = builder43.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder43.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.scriptType("bulk_size");
        builder60.setstatisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder65.script("script");
        com.mongodb.BasicDBObject basicDBObject68 = builder67.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder67.typeName("connect_timeout");
        boolean boolean71 = builder67.mongoGridFS;
        java.lang.String str72 = builder67.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder67.typeName("concurrent_requests");
        java.lang.String str75 = builder67.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder76.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet79 = builder76.excludeFields;
        com.mongodb.BasicDBObject basicDBObject80 = builder76.getmongoCollectionFilter();
        java.lang.String str81 = builder76.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray82 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList83 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList83, serverAddressArray82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder76.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList83);
        java.lang.String str86 = builder76.mongoAdminPassword;
        java.lang.String[] strArray91 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet92 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet92, strArray91);
        builder76.setincludeFields((java.util.Set<java.lang.String>) strSet92);
        builder67.setexcludeFields((java.util.Set<java.lang.String>) strSet92);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder60.excludeFields((java.util.Set<java.lang.String>) strSet92);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder40.excludeFields((java.util.Set<java.lang.String>) strSet92);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet92);
        java.lang.String str99 = builder34.statisticsIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNull(wildcardTimestamp23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertNotNull(basicDBObject80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(serverAddressArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        java.lang.String str11 = builder0.getmongoLocalUser();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder0.getinitialTimestamp();
        com.mongodb.BasicDBObject basicDBObject13 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardTimestamp12);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.lang.String str3 = builder0.getmongoDb();
        builder0.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoClientOptions(mongoClientOptions6);
        builder0.includeCollection = "index";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.statisticsTypeName("local");
        java.lang.String str23 = builder0.getmongoLocalUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.getmongoUseSSL();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str18 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getRiverIndexName();
        int int20 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str21 = mongoDBRiverDefinition9.getSIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "throttle_size" + "'", str18, "throttle_size");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "size" + "'", str21, "size");
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        java.lang.String str7 = builder2.mongoDb;
        builder2.setmongoLocalUser("admin");
        java.lang.String str10 = builder2.getscript();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder2.mongoClientOptions = mongoClientOptions11;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder2.getinitialTimestamp();
        builder2.setmongoDb("socket_timeout");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
        org.junit.Assert.assertNull(wildcardTimestamp13);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition9.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertNotNull(serverAddressList20);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        java.lang.String str8 = builder0.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.throttleSize((int) (byte) 100);
        boolean boolean11 = builder0.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoClientOptions(mongoClientOptions12);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        java.lang.String str17 = builder7.mongoAdminPassword;
        java.lang.String[] strArray22 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet23);
        int int27 = builder26.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject28 = builder26.getmongoOplogFilter();
        builder26.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder26.script("host");
        builder26.setmongoDb("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder26.indexName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder26.mongoLocalUser("");
        boolean boolean39 = builder26.getmongoSSLVerifyCertificate();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = builder26.getmongoServers();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(basicDBObject28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(serverAddressList40);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        builder0.setscript("secondary_read_preference");
        boolean boolean44 = builder0.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        int int18 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoLocalPassword;
        boolean boolean20 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 27017 + "'", int18 == 27017);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.importAllCollections(true);
        java.lang.String str18 = builder13.indexName;
        boolean boolean19 = builder13.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.typeName("secondary_read_preference");
        java.lang.String str22 = builder13.getindexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        builder2.setmongoAdminUser("import_all_collections");
        builder2.skipInitialImport = true;
        java.lang.String str8 = builder2.getmongoLocalUser();
        java.lang.String str9 = builder2.typeName;
        java.util.List<com.mongodb.ServerAddress> serverAddressList10 = builder2.getmongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        builder11.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder11.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder27.setmongoSecondaryReadPreference(false);
        boolean boolean30 = builder27.getmongoSSLVerifyCertificate();
        java.lang.String str31 = builder27.getriverIndexName();
        builder27.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.mongoUseSSL(true);
        boolean boolean36 = builder27.getstoreStatistics();
        builder27.statisticsTypeName = "disable_index_refresh";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder39.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet42 = builder39.excludeFields;
        com.mongodb.BasicDBObject basicDBObject43 = builder39.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp44 = builder39.initialTimestamp;
        builder39.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean47 = builder39.getmongoUseSSL();
        java.lang.String str48 = builder39.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder49.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet52 = builder49.excludeFields;
        java.lang.String str53 = builder49.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.script("script");
        java.lang.String[] strArray88 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder56.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder92 = builder49.parentTypes((java.util.Set<java.lang.String>) strSet89);
        java.util.Set<java.lang.String> strSet93 = builder49.parentTypes;
        builder39.setincludeFields(strSet93);
        builder27.setincludeFields(strSet93);
        builder26.setexcludeFields(strSet93);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder2.excludeFields(strSet93);
        boolean boolean98 = builder2.mongoUseSSL;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(serverAddressList10);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(basicDBObject43);
        org.junit.Assert.assertNull(wildcardTimestamp44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        builder12.setriverIndexName("flush_interval");
        int int15 = builder12.socketTimeout;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = builder12.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(serverAddressList16);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        builder3.setmongoCollection("initial_timestamp");
        boolean boolean9 = builder3.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.skipInitialImport(false);
        builder3.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.socketTimeout((int) (short) 1);
        builder3.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.importAllCollections(false);
        java.util.Set<java.lang.String> strSet20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.includeFields(strSet20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        builder22.setmongoCollection("initial_timestamp");
        boolean boolean28 = builder22.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.skipInitialImport(false);
        java.lang.String str31 = builder30.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        java.lang.String str37 = builder32.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        boolean boolean42 = builder41.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder41.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder54.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet57 = builder54.excludeFields;
        com.mongodb.BasicDBObject basicDBObject58 = builder54.getmongoCollectionFilter();
        java.lang.String str59 = builder54.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray60 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList61 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList61, serverAddressArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList61);
        java.lang.String str64 = builder54.mongoAdminPassword;
        java.lang.String[] strArray69 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder54.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder41.excludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder77.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet80 = builder77.excludeFields;
        com.mongodb.BasicDBObject basicDBObject81 = builder77.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp82 = builder77.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray83 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList84 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList84, serverAddressArray83);
        builder77.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList84);
        java.lang.String str87 = builder77.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder77.dropCollection(true);
        java.lang.String str90 = builder89.typeName;
        builder89.setmongoSecondaryReadPreference(false);
        builder89.setstatisticsTypeName("gridfs");
        java.lang.String str95 = builder89.script;
        java.lang.Object obj96 = docScoreSearchScript0.unwrap((java.lang.Object) builder89);
        docScoreSearchScript0.setNextScore((float) 0L);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(serverAddressArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertNotNull(basicDBObject81);
        org.junit.Assert.assertNull(wildcardTimestamp82);
        org.junit.Assert.assertNotNull(serverAddressArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(obj96);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        java.lang.String str17 = builder7.mongoAdminPassword;
        java.lang.String[] strArray22 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet23);
        builder26.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder26.throttleSize(97);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.includeFields;
        int int19 = mongoDBRiverDefinition9.getSocketTimeout();
        boolean boolean20 = mongoDBRiverDefinition9.mongoGridFS;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_fields" + "'", str13, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "size" + "'", str16, "size");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder0.build();
        boolean boolean9 = mongoDBRiverDefinition8.disableIndexRefresh;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.mongoUseSSL;
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str16 = mongoDBRiverDefinition9.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        int int20 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str21 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "localhost" + "'", str21, "localhost");
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        boolean boolean8 = builder0.mongoUseSSL;
        java.lang.String str9 = builder0.scriptType;
        boolean boolean10 = builder0.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder24.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder27.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.script("script");
        java.lang.String[] strArray64 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder32.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder27.excludeFields((java.util.Set<java.lang.String>) strSet65);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        builder24.mongoCollection = "host";
        java.lang.String str72 = builder24.getmongoDb();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str18 = mongoDBRiverDefinition9.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        java.lang.String str25 = builder0.getstatisticsIndexName();
        builder0.setstatisticsTypeName("");
        builder0.setthrottleSize((int) (short) 1);
        java.lang.String str30 = builder0.getmongoLocalPassword();
        java.lang.String str31 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.riverIndexName("import_all_collections");
        builder0.mongoAdminUser = "gridfs";
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoAdminPassword;
        java.lang.String[] strArray15 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet16);
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoClientOptions(mongoClientOptions19);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.skipInitialImport;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition9.initialTimestamp;
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = builder2.indexName;
        com.mongodb.BasicDBObject basicDBObject10 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.mongoCollection("user");
        builder2.mongoAdminUser = "name";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder42.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet45 = builder42.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder42.mongoSSLVerifyCertificate(true);
        builder42.script = "import_all_collections";
        boolean boolean50 = builder42.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder42.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject53 = builder52.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder9.mongoCollectionFilter(basicDBObject53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder9.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder9.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder9.mongoUseSSL(false);
        boolean boolean61 = builder60.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str21 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        int int22 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str23 = mongoDBRiverDefinition9.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "actions" + "'", str19, "actions");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk_size" + "'", str21, "bulk_size");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "initial_timestamp" + "'", str23, "initial_timestamp");
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoSecondaryReadPreference(true);
        builder16.connectTimeout = (byte) 10;
        builder16.mongoLocalPassword = "include_fields";
        java.lang.String str29 = builder16.statisticsIndexName;
        java.util.Set<java.lang.String> strSet30 = builder16.getparentTypes();
        builder16.disableIndexRefresh = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(strSet30);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoDb();
        java.lang.String str17 = mongoDBRiverDefinition9.getTypeName();
        boolean boolean18 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk_timeout" + "'", str20, "bulk_timeout");
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        builder8.includeCollection = "";
        builder8.setdropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = builder8.build();
        java.lang.String str18 = mongoDBRiverDefinition17.getMongoAdminUser();
        java.lang.String str19 = mongoDBRiverDefinition17.getSIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.mongoSecondaryReadPreference = false;
        java.lang.String str13 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.indexName("bulk_timeout");
        builder15.setmongoAdminPassword("type");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition17.getHOST_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.getMongoLocalPassword();
        java.lang.String str21 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition17.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition17.getSTORE_STATISTICS_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition17.includeCollection;
        int int25 = mongoDBRiverDefinition17.getSocketTimeout();
        java.lang.String str26 = mongoDBRiverDefinition17.riverName;
        docScoreSearchScript0.setNextVar("secondary_read_preference", (java.lang.Object) str26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.script("script");
        com.mongodb.BasicDBObject basicDBObject32 = builder31.getmongoCollectionFilter();
        builder31.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder31.connectTimeout((-1));
        docScoreSearchScript0.setNextVar("", (java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long38 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script_type" + "'", str21, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "store_statistics" + "'", str23, "store_statistics");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        builder0.setdisableIndexRefresh(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.mongoClientOptions;
        builder0.skipInitialImport = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setscript("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.storeStatistics(false);
        builder17.setmongoLocalUser("parent_types");
        builder17.setriverName("throttle_size");
        boolean boolean22 = builder17.getmongoGridFS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.disableIndexRefresh;
        int int16 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        java.lang.String str10 = builder8.getmongoLocalPassword();
        java.lang.String str11 = builder8.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        java.lang.String str14 = builder13.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoLocalUser("concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean17 = mongoDBRiverDefinition9.getimportAllCollections();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str21 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "concurrent_requests" + "'", str21, "concurrent_requests");
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.scriptType("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.indexName("");
        builder9.mongoAdminPassword = "host";
        java.lang.String str12 = builder9.getstatisticsIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoSecondaryReadPreference(true);
        boolean boolean25 = builder16.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder26.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet29 = builder26.excludeFields;
        builder26.setmongoCollection("initial_timestamp");
        boolean boolean32 = builder26.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder26.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.lang.String str36 = mongoDBRiverDefinition35.includeCollection;
        java.lang.String str37 = mongoDBRiverDefinition35.getIndexName();
        java.lang.String str38 = mongoDBRiverDefinition35.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str39 = mongoDBRiverDefinition35.script;
        java.lang.String str40 = mongoDBRiverDefinition35.getGRIDFS_FIELD();
        java.lang.String str41 = mongoDBRiverDefinition35.mongoCollection;
        java.util.Set<java.lang.String> strSet42 = mongoDBRiverDefinition35.excludeFields;
        com.mongodb.BasicDBObject basicDBObject43 = mongoDBRiverDefinition35.mongoCollectionFilter;
        builder16.setmongoCollectionFilter(basicDBObject43);
        builder16.socketTimeout = '#';
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondary_read_preference" + "'", str38, "secondary_read_preference");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "gridfs" + "'", str40, "gridfs");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "initial_timestamp" + "'", str41, "initial_timestamp");
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(basicDBObject43);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        int int16 = mongoDBRiverDefinition9.getThrottleSize();
        java.lang.String str17 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "store_statistics" + "'", str17, "store_statistics");
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSecondaryReadPreference(false);
        boolean boolean18 = builder17.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.mongoLocalPassword("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoLocalPassword("password");
        builder20.scriptType = "parent_types";
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        boolean boolean16 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str17 = mongoDBRiverDefinition9.typeName;
        boolean boolean18 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean19 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder2.mongoCollection("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.mongoLocalPassword("advanced_transformation");
        boolean boolean21 = builder20.dropCollection;
        boolean boolean22 = builder20.mongoSSLVerifyCertificate;
        builder20.mongoDb = "exclude_fields";
        builder20.riverIndexName = "servers";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean15 = mongoDBRiverDefinition9.isMongoUseSSL();
        boolean boolean16 = mongoDBRiverDefinition9.getadvancedTransformation();
        boolean boolean17 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str19 = mongoDBRiverDefinition9.getBULK_FIELD();
        int int20 = mongoDBRiverDefinition9.getThrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bulk" + "'", str19, "bulk");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        java.lang.String[] strArray43 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        builder11.setparentTypes((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder48.script("script");
        com.mongodb.BasicDBObject basicDBObject51 = builder50.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder6.mongoOplogFilter(basicDBObject51);
        org.elasticsearch.river.RiverSettings riverSettings53 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.river.RiverSettings riverSettings54 = new org.elasticsearch.river.RiverSettings(settings4, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject51);
        org.elasticsearch.script.ScriptService scriptService55 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("advanced_transformation", "port", riverSettings54, scriptService55);
        org.elasticsearch.script.ScriptService scriptService57 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("size", "hi!", riverSettings54, scriptService57);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition56);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition58);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoAdminPassword;
        java.lang.String str11 = builder0.gettypeName();
        boolean boolean12 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.includeCollection("");
        builder0.skipInitialImport = true;
        builder0.setriverIndexName("");
        builder0.statisticsTypeName = "ssl_verify_certificate";
        boolean boolean21 = builder0.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet22 = builder0.getincludeFields();
        java.lang.String str23 = builder0.statisticsIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextScore((float) ' ');
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        java.lang.String str18 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder8.dropCollection(true);
        boolean boolean21 = builder20.mongoSSLVerifyCertificate;
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "script_type", "collection", "secondary_read_preference", "throttle_size", "host", "actions", "drop_collection", "name", "initial_timestamp", "size", "script_type", "throttle_size", "hi!", "advanced_transformation", "name", "concurrent_requests" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder20.includeFields((java.util.Set<java.lang.String>) strSet40);
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder45.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet48 = builder45.excludeFields;
        builder45.setmongoCollection("hi!");
        boolean boolean51 = builder45.importAllCollections;
        java.lang.String str52 = builder45.mongoAdminPassword;
        builder45.typeName = "concurrent_bulk_requests";
        builder45.setskipInitialImport(false);
        boolean boolean57 = builder45.getadvancedTransformation();
        docScoreSearchScript0.setNextVar("null.initial_timestamp", (java.lang.Object) builder45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        java.lang.String str64 = builder60.getmongoLocalPassword();
        java.lang.String str65 = builder60.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder60.mongoLocalPassword("options");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder70.script("script");
        com.mongodb.BasicDBObject basicDBObject73 = builder72.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder72.typeName("connect_timeout");
        boolean boolean76 = builder72.mongoGridFS;
        boolean boolean77 = builder72.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition78 = builder72.build();
        java.lang.String str79 = mongoDBRiverDefinition78.mongoDb;
        java.lang.String str80 = mongoDBRiverDefinition78.getMongoLocalPassword();
        boolean boolean81 = mongoDBRiverDefinition78.getmongoGridFS();
        java.lang.String str82 = mongoDBRiverDefinition78.mongoAdminPassword;
        java.lang.String str83 = mongoDBRiverDefinition78.getPARENT_TYPES_FIELD();
        java.lang.String str84 = mongoDBRiverDefinition78.getOPTIONS_FIELD();
        docScoreSearchScript0.setNextVar("parent_types", (java.lang.Object) str84);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "parent_types" + "'", str83, "parent_types");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "options" + "'", str84, "options");
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.skipInitialImport;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "throttle_size" + "'", str16, "throttle_size");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("host", "skip_initial_import", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?skip_initial_import?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str14 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str18 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "flush_interval" + "'", str14, "flush_interval");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "skip_initial_import" + "'", str18, "skip_initial_import");
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoAdminUser("advanced_transformation");
        java.lang.String str14 = builder13.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder13.mongoGridFS(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "advanced_transformation" + "'", str14, "advanced_transformation");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.initial_timestamp" + "'", str15, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "import_all_collections" + "'", str17, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("concurrent_bulk_requests", "hi!");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?hi!?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoCollectionFilter;
        java.lang.String str14 = builder0.statisticsIndexName;
        java.lang.String str15 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.throttleSize((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getIncludeCollection();
        boolean boolean11 = mongoDBRiverDefinition8.getdropCollection();
        java.lang.String str12 = mongoDBRiverDefinition8.getINCLUDE_FIELDS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.getimportAllCollections();
        boolean boolean14 = mongoDBRiverDefinition8.isAdvancedTransformation();
        java.lang.String str15 = mongoDBRiverDefinition8.getDB_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "db" + "'", str15, "db");
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean14 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str15 = mongoDBRiverDefinition9.mongoLocalUser;
        int int16 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1000 + "'", int16 == 1000);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.mongoServers;
        boolean boolean15 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str17 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str21 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str22 = mongoDBRiverDefinition9.indexName;
        java.lang.String str23 = mongoDBRiverDefinition9.getFILTER_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "admin" + "'", str17, "admin");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "filter" + "'", str23, "filter");
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        java.lang.String str15 = builder0.getmongoLocalPassword();
        builder0.setmongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        builder18.setmongoCollection("initial_timestamp");
        boolean boolean24 = builder18.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.lang.String str28 = mongoDBRiverDefinition27.includeCollection;
        java.lang.String str29 = mongoDBRiverDefinition27.getIndexName();
        java.lang.String str30 = mongoDBRiverDefinition27.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition27.mongoAdminUser;
        java.util.Set<java.lang.String> strSet32 = mongoDBRiverDefinition27.parentTypes;
        java.lang.String str33 = mongoDBRiverDefinition27.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = mongoDBRiverDefinition27.mongoServers;
        builder0.setmongoServers(serverAddressList34);
        java.lang.String str36 = builder0.getriverName();
        com.mongodb.BasicDBObject basicDBObject37 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder0.mongoAdminUser("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.mongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "secondary_read_preference" + "'", str30, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "throttle_size" + "'", str33, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(basicDBObject37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = builder2.getadvancedTransformation();
        boolean boolean39 = builder2.mongoSecondaryReadPreference;
        boolean boolean40 = builder2.getdisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject41 = builder2.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder2.riverIndexName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoLocalPassword("include_fields");
        int int46 = builder43.getthrottleSize();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = builder43.build();
        java.lang.String str48 = builder43.mongoAdminPassword;
        java.lang.String str49 = builder43.gettypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.getimportAllCollections();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoSSLVerifyCertificate(false);
        builder0.mongoLocalUser = "servers";
        org.bson.types.Binary binary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.initialTimestamp(binary6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "script" + "'", str16, "script");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str20 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean21 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str22 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str23 = mongoDBRiverDefinition9.getFILTER_FIELD();
        int int24 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str25 = mongoDBRiverDefinition9.getScriptType();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "collection" + "'", str20, "collection");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "filter" + "'", str23, "filter");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        int int18 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.initial_timestamp" + "'", str15, "null.initial_timestamp");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "servers" + "'", str20, "servers");
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        java.lang.String str12 = builder0.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = builder0.getmongoServers();
        java.lang.String str14 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.connectTimeout((int) (short) -1);
        java.lang.String str17 = builder16.getmongoLocalPassword();
        builder16.setdropCollection(true);
        java.lang.String str20 = builder16.getriverIndexName();
        java.lang.String str21 = builder16.getindexName();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap1 = null;
        org.elasticsearch.script.ExecutableScript executableScript2 = docScoreNativeScriptFactory0.newScript(strMap1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript8 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder9.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet12 = builder9.excludeFields;
        com.mongodb.BasicDBObject basicDBObject13 = builder9.getmongoCollectionFilter();
        java.lang.String str14 = builder9.mongoLocalUser;
        builder9.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        com.mongodb.BasicDBObject basicDBObject21 = builder17.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder9.mongoCollectionFilter(basicDBObject21);
        org.elasticsearch.script.ExecutableScript executableScript23 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject21);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoSSLVerifyCertificate(true);
        builder25.script = "import_all_collections";
        java.lang.String str33 = builder25.script;
        java.lang.String str34 = builder25.scriptType;
        builder25.setimportAllCollections(true);
        java.lang.String str37 = builder25.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder38.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet41 = builder38.excludeFields;
        com.mongodb.BasicDBObject basicDBObject42 = builder38.getmongoCollectionFilter();
        java.lang.String str43 = builder38.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray44 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList45 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList45, serverAddressArray44);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList45);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder38.getmongoClientOptions();
        builder38.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder51.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet54 = builder51.excludeFields;
        com.mongodb.BasicDBObject basicDBObject55 = builder51.getmongoCollectionFilter();
        builder38.setmongoOplogFilter(basicDBObject55);
        boolean boolean57 = builder38.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder38.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder38.importAllCollections(false);
        builder38.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder38.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder38.mongoLocalUser("bulk_size");
        int int68 = builder67.getsocketTimeout();
        com.mongodb.BasicDBObject basicDBObject69 = builder67.mongoOplogFilter;
        builder25.mongoCollectionFilter = basicDBObject69;
        org.elasticsearch.river.RiverSettings riverSettings71 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        org.elasticsearch.script.ExecutableScript executableScript72 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder73.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet76 = builder73.excludeFields;
        builder73.setmongoCollection("initial_timestamp");
        boolean boolean79 = builder73.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder73.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder81);
        java.lang.String str83 = mongoDBRiverDefinition82.includeCollection;
        java.lang.String str84 = mongoDBRiverDefinition82.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet85 = mongoDBRiverDefinition82.excludeFields;
        boolean boolean86 = mongoDBRiverDefinition82.getstoreStatistics();
        boolean boolean87 = mongoDBRiverDefinition82.getmongoGridFS();
        java.lang.String str88 = mongoDBRiverDefinition82.getSECONDARY_READ_PREFERENCE_FIELD();
        int int89 = mongoDBRiverDefinition82.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject90 = mongoDBRiverDefinition82.mongoCollectionFilter;
        java.lang.String str91 = mongoDBRiverDefinition82.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str92 = mongoDBRiverDefinition82.getADMIN_DB_FIELD();
        java.lang.String str93 = mongoDBRiverDefinition82.getNAME_FIELD();
        boolean boolean94 = mongoDBRiverDefinition82.getmongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject95 = mongoDBRiverDefinition82.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript96 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject95);
        org.junit.Assert.assertNotNull(executableScript2);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(executableScript8);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executableScript23);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "import_all_collections" + "'", str33, "import_all_collections");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(serverAddressArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(mongoClientOptions48);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(executableScript72);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "collection" + "'", str84, "collection");
        org.junit.Assert.assertNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "secondary_read_preference" + "'", str88, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(basicDBObject90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "initial_timestamp" + "'", str91, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "admin" + "'", str92, "admin");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "name" + "'", str93, "name");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(basicDBObject95);
        org.junit.Assert.assertNotNull(executableScript96);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        boolean boolean15 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str16 = mongoDBRiverDefinition9.getDB_FIELD();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoCollection();
        java.lang.String str19 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "options" + "'", str19, "options");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        boolean boolean9 = mongoDBRiverDefinition8.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str11 = mongoDBRiverDefinition8.script;
        boolean boolean12 = mongoDBRiverDefinition8.getmongoSSLVerifyCertificate();
        java.lang.String str13 = mongoDBRiverDefinition8.getHOST_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getMongoOplogNamespace();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "host" + "'", str13, "host");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "null.null" + "'", str14, "null.null");
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        boolean boolean22 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "null.initial_timestamp" + "'", str21, "null.initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        java.util.Set<java.lang.String> strSet10 = builder0.getparentTypes();
        java.lang.String str11 = builder0.getindexName();
        builder0.includeCollection = "servers";
        java.lang.String str14 = builder0.script;
        builder0.setmongoLocalUser("ssl_verify_certificate");
        java.util.Set<java.lang.String> strSet17 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        builder18.setmongoCollection("initial_timestamp");
        boolean boolean24 = builder18.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.skipInitialImport(false);
        builder18.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder18.socketTimeout((int) (short) 1);
        builder18.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder18.importAllCollections(false);
        java.util.Set<java.lang.String> strSet35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.includeFields(strSet35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder37.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet40 = builder37.excludeFields;
        builder37.setmongoCollection("initial_timestamp");
        boolean boolean43 = builder37.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder37.skipInitialImport(false);
        java.lang.String str46 = builder45.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        com.mongodb.BasicDBObject basicDBObject51 = builder47.getmongoCollectionFilter();
        java.lang.String str52 = builder47.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray53 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList54 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList54, serverAddressArray53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder47.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList54);
        boolean boolean57 = builder56.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder58.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet61 = builder58.excludeFields;
        com.mongodb.BasicDBObject basicDBObject62 = builder58.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp63 = builder58.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray64 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList65 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList65, serverAddressArray64);
        builder58.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder56.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder69.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet72 = builder69.excludeFields;
        com.mongodb.BasicDBObject basicDBObject73 = builder69.getmongoCollectionFilter();
        java.lang.String str74 = builder69.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray75 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList76 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList76, serverAddressArray75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder69.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList76);
        java.lang.String str79 = builder69.mongoAdminPassword;
        java.lang.String[] strArray84 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        builder69.setincludeFields((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder56.excludeFields((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder45.parentTypes((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder36.excludeFields((java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet85);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(basicDBObject51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(serverAddressArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertNull(wildcardTimestamp63);
        org.junit.Assert.assertNotNull(serverAddressArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertNotNull(basicDBObject73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(serverAddressArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        builder9.setmongoDb("include_fields");
        int int12 = builder9.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.indexName("admin");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.scriptType("index");
        int int28 = builder27.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        com.mongodb.BasicDBObject basicDBObject33 = builder29.getmongoCollectionFilter();
        java.lang.String str34 = builder29.mongoLocalUser;
        builder29.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder37.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet40 = builder37.excludeFields;
        com.mongodb.BasicDBObject basicDBObject41 = builder37.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder29.mongoCollectionFilter(basicDBObject41);
        java.lang.String str43 = builder29.getstatisticsIndexName();
        java.lang.String str44 = builder29.getmongoLocalPassword();
        builder29.setmongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder47.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet50 = builder47.excludeFields;
        builder47.setmongoCollection("initial_timestamp");
        boolean boolean53 = builder47.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder47.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        java.lang.String str57 = mongoDBRiverDefinition56.includeCollection;
        java.lang.String str58 = mongoDBRiverDefinition56.getIndexName();
        java.lang.String str59 = mongoDBRiverDefinition56.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str60 = mongoDBRiverDefinition56.mongoAdminUser;
        java.util.Set<java.lang.String> strSet61 = mongoDBRiverDefinition56.parentTypes;
        java.lang.String str62 = mongoDBRiverDefinition56.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList63 = mongoDBRiverDefinition56.mongoServers;
        builder29.setmongoServers(serverAddressList63);
        java.lang.String str65 = builder29.getriverName();
        com.mongodb.BasicDBObject basicDBObject66 = builder29.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder27.mongoOplogFilter(basicDBObject66);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "secondary_read_preference" + "'", str59, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "throttle_size" + "'", str62, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        builder2.setstatisticsIndexName("password");
        builder2.dropCollection = true;
        boolean boolean13 = builder2.getdropCollection();
        boolean boolean14 = builder2.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.script("servers");
        builder16.setscript("null.null");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        java.lang.String str7 = builder2.mongoDb;
        builder2.setmongoLocalUser("admin");
        builder2.riverName = "null.initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder2.riverName("admin");
        java.lang.String str14 = builder2.script;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(true);
        java.lang.String str45 = builder44.typeName;
        int int46 = builder44.getconnectTimeout();
        builder44.setincludeCollection("concurrent_bulk_requests");
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder44.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder44.storeStatistics(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 'a');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        builder3.setmongoCollection("initial_timestamp");
        boolean boolean9 = builder3.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder3.skipInitialImport(false);
        builder3.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder3.socketTimeout((int) (short) 1);
        builder3.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder3.importAllCollections(false);
        java.util.Set<java.lang.String> strSet20 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.includeFields(strSet20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        builder22.setmongoCollection("initial_timestamp");
        boolean boolean28 = builder22.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.skipInitialImport(false);
        java.lang.String str31 = builder30.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        com.mongodb.BasicDBObject basicDBObject36 = builder32.getmongoCollectionFilter();
        java.lang.String str37 = builder32.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray38 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList39 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList39, serverAddressArray38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder32.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList39);
        boolean boolean42 = builder41.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp48 = builder43.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        builder43.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder41.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder54.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet57 = builder54.excludeFields;
        com.mongodb.BasicDBObject basicDBObject58 = builder54.getmongoCollectionFilter();
        java.lang.String str59 = builder54.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray60 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList61 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList61, serverAddressArray60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder54.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList61);
        java.lang.String str64 = builder54.mongoAdminPassword;
        java.lang.String[] strArray69 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder54.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder41.excludeFields((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder30.parentTypes((java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet70);
        java.lang.Object obj76 = docScoreSearchScript0.unwrap((java.lang.Object) builder21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder21.socketTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder78.riverIndexName("script_type");
        com.mongodb.MongoClientOptions mongoClientOptions81 = null;
        builder78.mongoClientOptions = mongoClientOptions81;
        builder78.dropCollection = false;
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(serverAddressArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNull(wildcardTimestamp48);
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(basicDBObject58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(serverAddressArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str14 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str17 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disable_index_refresh" + "'", str17, "disable_index_refresh");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.script("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet40);
        java.lang.String str44 = builder43.getstatisticsIndexName();
        builder43.setmongoAdminPassword("ssl_verify_certificate");
        builder43.connectTimeout = (byte) 0;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        boolean boolean13 = builder0.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.typeName("filter");
        java.lang.String str16 = builder15.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getIncludeFields();
        int int19 = mongoDBRiverDefinition9.connectTimeout;
        java.lang.String str20 = mongoDBRiverDefinition9.getPORT_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition9.getSOCKET_TIMEOUT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "port" + "'", str20, "port");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "host" + "'", str21, "host");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "socket_timeout" + "'", str22, "socket_timeout");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        boolean boolean17 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        java.lang.String str18 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "filter" + "'", str18, "filter");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index" + "'", str19, "index");
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.disableIndexRefresh(true);
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        builder10.setmongoClientOptions(mongoClientOptions11);
        java.lang.String str13 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder10.typeName("host");
        builder10.connectTimeout = 35;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder10.getinitialTimestamp();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(wildcardTimestamp18);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean19 = mongoDBRiverDefinition18.importAllCollections;
        int int20 = mongoDBRiverDefinition18.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject21 = mongoDBRiverDefinition18.mongoOplogFilter;
        int int22 = mongoDBRiverDefinition18.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 27017 + "'", int20 == 27017);
        org.junit.Assert.assertNull(basicDBObject21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str15 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.lang.String str20 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue21 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition9.getMongoServers();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_collection" + "'", str16, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script" + "'", str20, "script");
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(serverAddressList22);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.mongoSecondaryReadPreference = false;
        java.lang.String str13 = builder0.statisticsIndexName;
        int int14 = builder0.getthrottleSize();
        builder0.mongoDb = "index";
        java.lang.String str17 = builder0.getincludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder8.importAllCollections = true;
        builder8.mongoDb = "throttle_size";
        java.lang.String str13 = builder8.getmongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder8.setmongoClientOptions(mongoClientOptions14);
        java.lang.String str16 = builder8.mongoLocalPassword;
        java.util.Set<java.lang.String> strSet17 = builder8.getexcludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        boolean boolean8 = builder0.getmongoUseSSL();
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.includeCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoAdminUser("advanced_transformation");
        java.lang.String str14 = builder13.mongoAdminUser;
        builder13.advancedTransformation = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder13.mongoServers(serverAddressList17);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "advanced_transformation" + "'", str14, "advanced_transformation");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder7.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet10 = builder7.excludeFields;
        com.mongodb.BasicDBObject basicDBObject11 = builder7.getmongoCollectionFilter();
        java.lang.String str12 = builder7.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList14);
        java.lang.String str17 = builder7.mongoAdminPassword;
        java.lang.String[] strArray22 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder7.setincludeFields((java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet23);
        java.util.Set<java.lang.String> strSet27 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder28.mongoSSLVerifyCertificate(true);
        builder28.script = "import_all_collections";
        boolean boolean36 = builder28.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder28.mongoAdminUser("bulk_size");
        int int39 = builder38.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.mongoLocalUser("parent_types");
        java.util.List<com.mongodb.ServerAddress> serverAddressList42 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.mongoServers(serverAddressList42);
        java.lang.String str44 = builder38.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder45.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet48 = builder45.excludeFields;
        builder45.setmongoCollection("hi!");
        boolean boolean51 = builder45.importAllCollections;
        builder45.setconnectTimeout((int) (short) 10);
        builder45.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder56.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet59 = builder56.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder56.mongoSSLVerifyCertificate(true);
        boolean boolean62 = builder56.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder63.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet66 = builder63.excludeFields;
        com.mongodb.BasicDBObject basicDBObject67 = builder63.getmongoCollectionFilter();
        java.lang.String str68 = builder63.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray69 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList70 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList70, serverAddressArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder63.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList70);
        java.lang.String str73 = builder63.mongoAdminPassword;
        java.lang.String[] strArray78 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder63.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder56.parentTypes((java.util.Set<java.lang.String>) strSet79);
        builder45.includeFields = strSet79;
        builder38.setexcludeFields((java.util.Set<java.lang.String>) strSet79);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        java.util.Set<java.lang.String> strSet86 = builder0.includeFields;
        java.lang.String str87 = builder0.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(serverAddressArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition9.getmongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str20 = mongoDBRiverDefinition9.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.script("script");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder16.typeName("connect_timeout");
        boolean boolean20 = builder16.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.script("script");
        java.lang.String[] strArray55 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder23.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        builder16.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder13.includeCollection("local");
        builder13.typeName = "socket_timeout";
        com.mongodb.BasicDBObject basicDBObject65 = builder13.getmongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(basicDBObject65);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.lang.String str19 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean20 = mongoDBRiverDefinition9.isMongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondary_read_preference" + "'", str17, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        boolean boolean13 = builder12.mongoSSLVerifyCertificate;
        java.lang.String str14 = builder12.typeName;
        builder12.typeName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet23 = builder22.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        boolean boolean27 = builder24.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder28.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet31 = builder28.excludeFields;
        com.mongodb.BasicDBObject basicDBObject32 = builder28.getmongoCollectionFilter();
        java.lang.String str33 = builder28.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray34 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList35 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList35, serverAddressArray34);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder28.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList35);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder28.getmongoClientOptions();
        builder28.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder41.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet44 = builder41.excludeFields;
        com.mongodb.BasicDBObject basicDBObject45 = builder41.getmongoCollectionFilter();
        builder28.setmongoOplogFilter(basicDBObject45);
        com.mongodb.BasicDBObject basicDBObject47 = builder28.mongoOplogFilter;
        builder24.setmongoOplogFilter(basicDBObject47);
        builder22.setmongoCollectionFilter(basicDBObject47);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder12.mongoCollectionFilter(basicDBObject47);
        java.lang.String str51 = builder12.getscriptType();
        builder12.setriverIndexName("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder12.mongoAdminUser("import_all_collections");
        builder12.setmongoLocalUser("script_type");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(serverAddressArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getCONNECTION_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition8.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition8.indexName;
        int int13 = mongoDBRiverDefinition8.socketTimeout;
        int int14 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondary_read_preference" + "'", str9, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "connect_timeout" + "'", str10, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27017 + "'", int14 == 27017);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(1);
        java.util.Set<java.lang.String> strSet16 = builder15.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.getmongoClientOptions();
        builder18.throttleSize = (byte) 1;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mongoClientOptions19);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        com.mongodb.BasicDBObject basicDBObject18 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "user" + "'", str15, "user");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl" + "'", str16, "ssl");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(basicDBObject18);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        builder13.setimportAllCollections(true);
        java.lang.String str21 = builder13.getincludeCollection();
        boolean boolean22 = builder13.skipInitialImport;
        java.lang.String str23 = builder13.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("script", "name");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?name? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition8.getIncludeCollection();
        java.lang.String str11 = mongoDBRiverDefinition8.getRiverName();
        java.lang.String str12 = mongoDBRiverDefinition8.getTHROTTLE_SIZE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition8.mongoUseSSL;
        boolean boolean14 = mongoDBRiverDefinition8.getmongoSecondaryReadPreference();
        java.lang.String str15 = mongoDBRiverDefinition8.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition8.getDB_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "throttle_size" + "'", str12, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "db" + "'", str16, "db");
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        int int15 = mongoDBRiverDefinition9.connectTimeout;
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script_type" + "'", str18, "script_type");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "connect_timeout" + "'", str14, "connect_timeout");
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getTYPE_FIELD();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = mongoDBRiverDefinition9.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet24 = builder0.includeFields;
        java.lang.String str25 = builder0.getscript();
        builder0.setconnectTimeout(27017);
        boolean boolean28 = builder0.getmongoSSLVerifyCertificate();
        builder0.setstoreStatistics(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.statisticsTypeName("local");
        builder22.setconnectTimeout(0);
        java.lang.String str25 = builder22.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder26.setmongoSecondaryReadPreference(false);
        boolean boolean29 = builder26.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        com.mongodb.BasicDBObject basicDBObject34 = builder30.getmongoCollectionFilter();
        java.lang.String str35 = builder30.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray36 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList37 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList37, serverAddressArray36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder30.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList37);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder30.getmongoClientOptions();
        builder30.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        builder30.setmongoOplogFilter(basicDBObject47);
        com.mongodb.BasicDBObject basicDBObject49 = builder30.mongoOplogFilter;
        builder26.setmongoOplogFilter(basicDBObject49);
        builder22.mongoCollectionFilter = basicDBObject49;
        boolean boolean52 = builder22.mongoUseSSL;
        java.lang.String str53 = builder22.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(serverAddressArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(mongoClientOptions40);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertNotNull(basicDBObject49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        builder0.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.riverName("secondary_read_preference");
        builder24.setmongoDb("admin");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        builder2.setmongoAdminUser("import_all_collections");
        builder2.skipInitialImport = true;
        int int8 = builder2.throttleSize;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder2.getmongoClientOptions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(mongoClientOptions9);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet6 = builder5.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.skipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoLocalUser("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.mongoGridFS(true);
        builder14.includeCollection = "port";
        int int17 = builder14.connectTimeout;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        builder0.setstatisticsIndexName("user");
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.includeCollection("collection");
        builder21.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.dropCollection(false);
        builder25.riverName = "import_all_collections";
        boolean boolean30 = builder25.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder0.scriptType("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoLocalUser("bulk_size");
        builder0.setmongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.script("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.riverName("gridfs");
        builder0.statisticsTypeName = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder0.dropCollection(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        int int20 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str21 = mongoDBRiverDefinition9.mongoAdminUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder0.importAllCollections = false;
        boolean boolean27 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoCollection("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoCollection("secondary_read_preference");
        builder31.setmongoGridFS(false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.getADMIN_DB_FIELD();
        int int10 = mongoDBRiverDefinition8.getDEFAULT_DB_PORT();
        java.lang.String str11 = mongoDBRiverDefinition8.typeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "admin" + "'", str9, "admin");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean16 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str17 = mongoDBRiverDefinition9.script;
        java.lang.String str18 = mongoDBRiverDefinition9.mongoLocalPassword;
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoCollectionFilter;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(basicDBObject19);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str18 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.importAllCollections;
        int int20 = mongoDBRiverDefinition9.throttleSize;
        boolean boolean21 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        boolean boolean22 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl" + "'", str15, "ssl");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "credentials" + "'", str18, "credentials");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("exclude_fields");
        boolean boolean10 = builder0.getmongoUseSSL();
        builder0.setconnectTimeout(100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        builder13.setmongoCollection("initial_timestamp");
        boolean boolean19 = builder13.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.skipInitialImport(false);
        builder13.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder13.socketTimeout((int) (short) 1);
        builder13.includeCollection = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder13.importAllCollections(false);
        java.util.Set<java.lang.String> strSet30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder29.includeFields(strSet30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder32.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet35 = builder32.excludeFields;
        builder32.setmongoCollection("initial_timestamp");
        boolean boolean38 = builder32.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder32.skipInitialImport(false);
        java.lang.String str41 = builder40.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder42.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet45 = builder42.excludeFields;
        com.mongodb.BasicDBObject basicDBObject46 = builder42.getmongoCollectionFilter();
        java.lang.String str47 = builder42.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray48 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList49 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList49, serverAddressArray48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder42.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList49);
        boolean boolean52 = builder51.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder53.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet56 = builder53.excludeFields;
        com.mongodb.BasicDBObject basicDBObject57 = builder53.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp58 = builder53.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray59 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList60 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList60, serverAddressArray59);
        builder53.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder51.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder64.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet67 = builder64.excludeFields;
        com.mongodb.BasicDBObject basicDBObject68 = builder64.getmongoCollectionFilter();
        java.lang.String str69 = builder64.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray70 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList71 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList71, serverAddressArray70);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder64.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList71);
        java.lang.String str74 = builder64.mongoAdminPassword;
        java.lang.String[] strArray79 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        builder64.setincludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder51.excludeFields((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder40.parentTypes((java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet80);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet80);
        builder0.mongoSecondaryReadPreference = true;
        builder0.scriptType = "advanced_transformation";
        com.mongodb.BasicDBObject basicDBObject91 = builder0.getmongoCollectionFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(serverAddressArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertNull(wildcardTimestamp58);
        org.junit.Assert.assertNotNull(serverAddressArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNotNull(basicDBObject68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(serverAddressArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(basicDBObject91);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.indexName("port");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder6.mongoClientOptions;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder6.mongoServers;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(serverAddressList8);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("hi!");
        boolean boolean6 = builder0.importAllCollections;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.getmongoClientOptions();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        builder0.mongoClientOptions = mongoClientOptions8;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(mongoClientOptions7);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        java.lang.String str12 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.dropCollection(false);
        java.lang.String str15 = builder14.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp21 = builder16.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray22 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList23 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList23, serverAddressArray22);
        builder16.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList23);
        java.lang.String str26 = builder16.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.dropCollection(true);
        boolean boolean29 = builder28.mongoSSLVerifyCertificate;
        java.lang.String str30 = builder28.typeName;
        builder28.typeName = "include_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder33.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet36 = builder33.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder33.mongoSSLVerifyCertificate(true);
        java.util.Set<java.lang.String> strSet39 = builder38.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        boolean boolean43 = builder40.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder44.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet47 = builder44.excludeFields;
        com.mongodb.BasicDBObject basicDBObject48 = builder44.getmongoCollectionFilter();
        java.lang.String str49 = builder44.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray50 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList51 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList51, serverAddressArray50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder44.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList51);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder44.getmongoClientOptions();
        builder44.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder57.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet60 = builder57.excludeFields;
        com.mongodb.BasicDBObject basicDBObject61 = builder57.getmongoCollectionFilter();
        builder44.setmongoOplogFilter(basicDBObject61);
        com.mongodb.BasicDBObject basicDBObject63 = builder44.mongoOplogFilter;
        builder40.setmongoOplogFilter(basicDBObject63);
        builder38.setmongoCollectionFilter(basicDBObject63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder28.mongoCollectionFilter(basicDBObject63);
        com.mongodb.BasicDBObject basicDBObject67 = builder28.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder14.mongoCollectionFilter(basicDBObject67);
        int int69 = builder68.throttleSize;
        builder68.setstatisticsTypeName("port");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNull(wildcardTimestamp21);
        org.junit.Assert.assertNotNull(serverAddressArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(basicDBObject48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(serverAddressArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(mongoClientOptions54);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("hi!");
        boolean boolean6 = builder0.importAllCollections;
        java.lang.String str7 = builder0.mongoAdminPassword;
        java.lang.String str8 = builder0.mongoLocalPassword;
        builder0.mongoAdminUser = "ssl_verify_certificate";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoUseSSL(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        int int15 = mongoDBRiverDefinition9.connectTimeout;
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        int int19 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        boolean boolean20 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "admin" + "'", str18, "admin");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1000 + "'", int19 == 1000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.mongoCollectionFilter;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getNAME_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoLocalPassword();
        int int22 = mongoDBRiverDefinition9.connectTimeout;
        int int23 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        boolean boolean24 = mongoDBRiverDefinition9.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "admin" + "'", str19, "admin");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "name" + "'", str20, "name");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1000 + "'", int23 == 1000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getTYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "type" + "'", str14, "type");
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition9.isStoreStatistics();
        java.lang.String str15 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl_verify_certificate" + "'", str15, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondary_read_preference" + "'", str17, "secondary_read_preference");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings8 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = riverSettings8.settings();
        org.elasticsearch.script.ScriptService scriptService10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "", riverSettings8, scriptService10);
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition11.parentTypes;
        java.lang.String str13 = mongoDBRiverDefinition11.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition11.isImportAllCollections();
        int int15 = mongoDBRiverDefinition11.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_requests" + "'", str13, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder12.mongoDb("type");
        boolean boolean77 = builder12.getstoreStatistics();
        java.lang.String str78 = builder12.getmongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.riverName;
        java.lang.String str14 = mongoDBRiverDefinition9.indexName;
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        java.lang.String str16 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.initialTimestamp;
        java.lang.String str19 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str20 = mongoDBRiverDefinition9.getNAME_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "options" + "'", str16, "options");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk" + "'", str17, "bulk");
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "name" + "'", str20, "name");
        org.junit.Assert.assertNotNull(byteSizeValue21);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        com.mongodb.BasicDBObject basicDBObject17 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        java.lang.String str18 = mongoDBRiverDefinition9.getScript();
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        int int20 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str21 = mongoDBRiverDefinition9.getUSER_FIELD();
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition9.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "user" + "'", str21, "user");
        org.junit.Assert.assertNull(basicDBObject22);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        boolean boolean16 = builder12.dropCollection;
        builder12.setmongoLocalUser("advanced_transformation");
        builder12.mongoDb = "options";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.riverIndexName("");
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder0.mongoDb = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.storeStatistics(true);
        java.lang.String str18 = builder17.script;
        builder17.setriverName("local");
        boolean boolean21 = builder17.getskipInitialImport();
        java.util.Set<java.lang.String> strSet22 = builder17.getincludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder8.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.mongoLocalPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.typeName("concurrent_requests");
        java.lang.String str15 = builder14.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder14.statisticsTypeName("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.includeCollection("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoUseSSL(false);
        java.lang.String str25 = builder22.mongoAdminUser;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder27.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet30 = builder27.excludeFields;
        java.lang.String str31 = builder27.getmongoLocalPassword();
        builder27.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder27.mongoAdminUser("");
        builder35.mongoCollection = "hi!";
        builder35.setmongoAdminPassword("options");
        builder35.includeCollection = "";
        java.lang.String str42 = builder35.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder43.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        com.mongodb.BasicDBObject basicDBObject47 = builder43.getmongoCollectionFilter();
        java.lang.String str48 = builder43.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray49 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList50 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList50, serverAddressArray49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder43.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList50);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder43.getmongoClientOptions();
        builder43.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder56.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet59 = builder56.excludeFields;
        com.mongodb.BasicDBObject basicDBObject60 = builder56.getmongoCollectionFilter();
        builder43.setmongoOplogFilter(basicDBObject60);
        boolean boolean62 = builder43.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder43.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder43.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder67.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet70 = builder67.excludeFields;
        com.mongodb.BasicDBObject basicDBObject71 = builder67.getmongoCollectionFilter();
        java.lang.String str72 = builder67.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray73 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList74 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList74, serverAddressArray73);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder67.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList74);
        java.lang.String str77 = builder67.mongoAdminPassword;
        java.lang.String[] strArray82 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        builder67.setincludeFields((java.util.Set<java.lang.String>) strSet83);
        builder66.setparentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet83);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet83);
        builder14.setexcludeFields((java.util.Set<java.lang.String>) strSet83);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(basicDBObject26);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(basicDBObject47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(serverAddressArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(mongoClientOptions53);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(basicDBObject71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(serverAddressArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean18 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        java.lang.String str21 = mongoDBRiverDefinition9.getRiverName();
        boolean boolean22 = mongoDBRiverDefinition9.isMongoGridFS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl" + "'", str19, "ssl");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "localhost" + "'", str20, "localhost");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoSSLVerifyCertificate(true);
        builder6.script = "import_all_collections";
        boolean boolean14 = builder6.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder6.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject17 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject17);
        org.elasticsearch.script.ScriptService scriptService19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("password", "collection", riverSettings18, scriptService19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = riverSettings18.settings();
        org.elasticsearch.common.settings.Settings settings22 = riverSettings18.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = riverSettings18.settings();
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = riverSettings18.settings();
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings2, strMap24);
        org.elasticsearch.script.ScriptService scriptService26 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("collection", "disable_index_refresh", riverSettings25, scriptService26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = riverSettings25.settings();
        org.elasticsearch.common.settings.Settings settings29 = riverSettings25.globalSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = riverSettings25.settings();
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(settings22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(settings29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.util.Set<java.lang.String> strSet10 = builder9.getexcludeFields();
        builder9.settypeName("script");
        boolean boolean13 = builder9.mongoGridFS;
        builder9.setmongoAdminPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.socketTimeout((int) (short) 100);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str15 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str17 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.mongoCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "user" + "'", str12, "user");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "type" + "'", str15, "type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "connect_timeout" + "'", str16, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "store_statistics" + "'", str17, "store_statistics");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getUSER_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean17 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoLocalUser();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "user" + "'", str15, "user");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        java.lang.String str10 = builder8.getmongoLocalPassword();
        java.lang.String str11 = builder8.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        builder13.setmongoGridFS(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition9.mongoOplogFilter;
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        boolean boolean16 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean17 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean20 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.lang.String str21 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        boolean boolean22 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_requests" + "'", str19, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "include_fields" + "'", str21, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet10 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("actions");
        java.lang.String str13 = builder9.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        java.lang.String str20 = builder16.getmongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject21 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder9.mongoOplogFilter(basicDBObject21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder9.statisticsTypeName("secondary_read_preference");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        int int11 = builder10.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoLocalUser("parent_types");
        java.lang.String str14 = builder10.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder15.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet18 = builder15.excludeFields;
        builder15.setmongoCollection("initial_timestamp");
        boolean boolean21 = builder15.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str25 = mongoDBRiverDefinition24.includeCollection;
        java.lang.String str26 = mongoDBRiverDefinition24.getHOST_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition24.getMongoLocalPassword();
        java.lang.String str28 = mongoDBRiverDefinition24.script;
        boolean boolean29 = mongoDBRiverDefinition24.mongoSSLVerifyCertificate;
        java.lang.String str30 = mongoDBRiverDefinition24.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition24.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder10.mongoServers(serverAddressList31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoAdminUser("");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "host" + "'", str26, "host");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "script_type" + "'", str30, "script_type");
        org.junit.Assert.assertNotNull(serverAddressList31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        java.lang.String str22 = builder21.getmongoLocalPassword();
        java.lang.String str23 = builder21.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        builder21.mongoClientOptions = mongoClientOptions24;
        builder21.setincludeCollection("parent_types");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoGridFS();
        boolean boolean16 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str17 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getNAME_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "import_all_collections" + "'", str17, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "name" + "'", str18, "name");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextVar("connect_timeout", (java.lang.Object) "type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        builder7.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder19.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder19.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.indexName("");
        java.lang.String str32 = builder7.getstatisticsIndexName();
        builder7.mongoAdminPassword = "disable_index_refresh";
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder7.mongoClientOptions(mongoClientOptions35);
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) mongoClientOptions35);
        docScoreSearchScript0.setNextScore((float) 27017);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        java.lang.String str45 = builder40.mongoLocalUser;
        java.util.Set<java.lang.String> strSet46 = builder40.excludeFields;
        java.lang.Object obj47 = docScoreSearchScript0.unwrap((java.lang.Object) strSet46);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.typeName("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        java.lang.String str13 = builder8.mongoLocalUser;
        builder8.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder8.mongoCollectionFilter(basicDBObject20);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.mongoClientOptions;
        java.lang.String str23 = builder21.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder21.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        builder25.setmongoCollection("initial_timestamp");
        boolean boolean31 = builder25.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder25.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder33);
        java.lang.String str35 = mongoDBRiverDefinition34.includeCollection;
        java.lang.String str36 = mongoDBRiverDefinition34.getHOST_FIELD();
        java.lang.String str37 = mongoDBRiverDefinition34.getMongoLocalPassword();
        java.lang.String str38 = mongoDBRiverDefinition34.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger39 = mongoDBRiverDefinition34.getlogger();
        java.lang.String str40 = mongoDBRiverDefinition34.script;
        java.util.List<com.mongodb.ServerAddress> serverAddressList41 = mongoDBRiverDefinition34.getMongoServers();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder21.mongoServers(serverAddressList41);
        builder5.setmongoServers(serverAddressList41);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder5.mongoClientOptions;
        boolean boolean45 = builder5.getmongoGridFS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "host" + "'", str36, "host");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(eSLogger39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(serverAddressList41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str18 = mongoDBRiverDefinition9.script;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition9.getInitialTimestamp();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory13 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = null;
        org.elasticsearch.script.ExecutableScript executableScript15 = docScoreNativeScriptFactory13.newScript(strMap14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript21 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        builder22.setmongoCollection("initial_timestamp");
        boolean boolean28 = builder22.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.lang.String str32 = mongoDBRiverDefinition31.includeCollection;
        java.lang.String str33 = mongoDBRiverDefinition31.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet34 = mongoDBRiverDefinition31.excludeFields;
        boolean boolean35 = mongoDBRiverDefinition31.getstoreStatistics();
        boolean boolean36 = mongoDBRiverDefinition31.getmongoGridFS();
        java.lang.String str37 = mongoDBRiverDefinition31.getSECONDARY_READ_PREFERENCE_FIELD();
        int int38 = mongoDBRiverDefinition31.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject39 = mongoDBRiverDefinition31.mongoCollectionFilter;
        org.elasticsearch.script.ExecutableScript executableScript40 = docScoreNativeScriptFactory13.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject39);
        builder0.mongoCollectionFilter = basicDBObject39;
        builder0.setmongoCollection("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.scriptType("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder0.mongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder0.throttleSize(100);
        java.lang.String str50 = builder0.mongoCollection;
        java.lang.String str51 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder0.mongoDb("filter");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executableScript15);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "collection" + "'", str33, "collection");
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "secondary_read_preference" + "'", str37, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(executableScript40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ssl" + "'", str50, "ssl");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        builder0.setmongoLocalPassword("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.statisticsTypeName("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.statisticsIndexName("user");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        java.lang.String str5 = builder4.getmongoLocalUser();
        builder4.mongoGridFS = true;
        builder4.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder4.includeCollection("disable_index_refresh");
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder4.mongoClientOptions;
        builder4.statisticsIndexName = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder4.connectTimeout(35);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str15 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str16 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoDb;
        boolean boolean18 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "actions" + "'", str16, "actions");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        builder11.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder11.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder21.setmongoSecondaryReadPreference(false);
        boolean boolean24 = builder21.getmongoSSLVerifyCertificate();
        java.lang.String str25 = builder21.getriverIndexName();
        builder21.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder21.mongoUseSSL(true);
        builder21.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder21.script("bulk");
        com.mongodb.BasicDBObject basicDBObject34 = builder21.mongoCollectionFilter;
        builder11.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder36.script("script");
        com.mongodb.BasicDBObject basicDBObject39 = builder38.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder38.typeName("connect_timeout");
        boolean boolean42 = builder38.mongoGridFS;
        java.lang.String str43 = builder38.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder38.typeName("concurrent_requests");
        boolean boolean46 = builder45.skipInitialImport;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory47 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder48.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet51 = builder48.excludeFields;
        com.mongodb.BasicDBObject basicDBObject52 = builder48.getmongoCollectionFilter();
        java.lang.String str53 = builder48.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray54 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList55 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList55, serverAddressArray54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder48.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList55);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder48.getmongoClientOptions();
        builder48.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder61.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet64 = builder61.excludeFields;
        com.mongodb.BasicDBObject basicDBObject65 = builder61.getmongoCollectionFilter();
        builder48.setmongoOplogFilter(basicDBObject65);
        org.elasticsearch.script.ExecutableScript executableScript67 = docScoreNativeScriptFactory47.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject65);
        builder45.setmongoOplogFilter(basicDBObject65);
        builder11.setmongoCollectionFilter(basicDBObject65);
        builder10.mongoCollectionFilter = basicDBObject65;
        int int71 = builder10.socketTimeout;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(basicDBObject39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(serverAddressArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(mongoClientOptions58);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNotNull(basicDBObject65);
        org.junit.Assert.assertNotNull(executableScript67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getRiverName();
        boolean boolean17 = mongoDBRiverDefinition9.skipInitialImport;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str19 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getDB_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "size" + "'", str19, "size");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk" + "'", str20, "bulk");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "db" + "'", str21, "db");
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings8 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        org.elasticsearch.script.ScriptService scriptService9 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("skip_initial_import", "concurrent_requests", riverSettings8, scriptService9);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition10);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        boolean boolean9 = mongoDBRiverDefinition8.getskipInitialImport();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str11 = mongoDBRiverDefinition8.script;
        java.lang.String str12 = mongoDBRiverDefinition8.getOPTIONS_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition8.getIncludeFields();
        boolean boolean14 = mongoDBRiverDefinition8.isMongoGridFS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script" + "'", str11, "script");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "options" + "'", str12, "options");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = builder0.getmongoServers();
        int int7 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(false);
        boolean boolean10 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.socketTimeout((int) (short) -1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean13 = mongoDBRiverDefinition9.isSkipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean16 = builder0.getimportAllCollections();
        builder0.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.throttleSize((int) (short) 0);
        builder20.advancedTransformation = false;
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder20.mongoClientOptions(mongoClientOptions23);
        java.lang.String str25 = builder24.getscript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder8.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.skipInitialImport(true);
        boolean boolean13 = builder8.mongoSecondaryReadPreference;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder8.setmongoClientOptions(mongoClientOptions14);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        builder0.setstatisticsIndexName("user");
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.includeCollection("collection");
        builder21.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder21.throttleSize(8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder25.dropCollection(false);
        builder25.riverName = "import_all_collections";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder25.mongoSecondaryReadPreference(false);
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        builder25.mongoClientOptions = mongoClientOptions32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder25.mongoLocalUser("bulk");
        builder35.statisticsIndexName = "name";
        builder35.setincludeCollection("null.null");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) 10L);
        docScoreSearchScript0.setNextScore(0.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition17.getHOST_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.getMongoLocalPassword();
        java.lang.String str21 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition17.mongoClientOptions;
        java.lang.String str23 = mongoDBRiverDefinition17.getSTORE_STATISTICS_FIELD();
        java.lang.String str24 = mongoDBRiverDefinition17.includeCollection;
        int int25 = mongoDBRiverDefinition17.getSocketTimeout();
        java.lang.String str26 = mongoDBRiverDefinition17.riverName;
        docScoreSearchScript0.setNextVar("secondary_read_preference", (java.lang.Object) str26);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript29 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        builder30.setmongoCollection("initial_timestamp");
        boolean boolean36 = builder30.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = builder30.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder38);
        java.lang.String str40 = mongoDBRiverDefinition39.includeCollection;
        java.lang.String str41 = mongoDBRiverDefinition39.getCOLLECTION_FIELD();
        int int42 = mongoDBRiverDefinition39.throttleSize;
        java.lang.String str43 = mongoDBRiverDefinition39.getRiverName();
        java.lang.String str44 = mongoDBRiverDefinition39.getPARENT_TYPES_FIELD();
        java.lang.String str45 = mongoDBRiverDefinition39.getSERVERS_FIELD();
        java.lang.String str46 = mongoDBRiverDefinition39.mongoLocalUser;
        java.lang.Object obj47 = docScoreSearchScript29.unwrap((java.lang.Object) mongoDBRiverDefinition39);
        boolean boolean48 = mongoDBRiverDefinition39.getmongoUseSSL();
        docScoreSearchScript0.setNextVar("secondary_read_preference", (java.lang.Object) boolean48);
        org.apache.lucene.search.Scorer scorer50 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "script_type" + "'", str21, "script_type");
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "store_statistics" + "'", str23, "store_statistics");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "collection" + "'", str41, "collection");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "parent_types" + "'", str44, "parent_types");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "servers" + "'", str45, "servers");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.mongoSecondaryReadPreference(false);
        boolean boolean13 = builder12.getdropCollection();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.setmongoOplogFilter(basicDBObject14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder12.importAllCollections(true);
        boolean boolean18 = builder17.importAllCollections;
        builder17.mongoGridFS = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder12.riverName = "throttle_size";
        builder12.setmongoAdminUser("localhost");
        builder12.setimportAllCollections(true);
        java.lang.String str19 = builder12.getindexName();
        java.lang.String str20 = builder12.getscript();
        int int21 = builder12.getconnectTimeout();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = builder12.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(serverAddressList22);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.includeCollection("admin");
        builder7.setincludeCollection("store_statistics");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder7.mongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder7.advancedTransformation(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "advanced_transformation" + "'", str18, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "exclude_fields" + "'", str19, "exclude_fields");
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str15 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "admin" + "'", str15, "admin");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSecondaryReadPreference(false);
        boolean boolean18 = builder15.advancedTransformation;
        java.util.Set<java.lang.String> strSet19 = builder15.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.mongoAdminUser("throttle_size");
        builder23.setskipInitialImport(false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        java.lang.String str5 = builder4.getmongoLocalUser();
        builder4.mongoGridFS = true;
        java.lang.String str8 = builder4.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.mongoAdminPassword("");
        boolean boolean11 = builder10.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder10.mongoLocalUser("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.riverIndexName("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.script;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getRiverIndexName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "concurrent_requests" + "'", str18, "concurrent_requests");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.includeCollection("exclude_fields");
        java.lang.String str5 = builder4.getmongoLocalUser();
        builder4.mongoGridFS = true;
        boolean boolean8 = builder4.getdisableIndexRefresh();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder4.includeCollection("exclude_fields");
        java.lang.String str11 = builder4.script;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder4.mongoLocalPassword("advanced_transformation");
        boolean boolean14 = builder13.mongoGridFS;
        builder13.setmongoLocalPassword("name");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        builder8.includeCollection = "";
        builder8.setdropCollection(true);
        boolean boolean17 = builder8.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        com.mongodb.BasicDBObject basicDBObject22 = builder18.getmongoCollectionFilter();
        java.lang.String str23 = builder18.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder18.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList25);
        boolean boolean28 = builder27.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        com.mongodb.BasicDBObject basicDBObject33 = builder29.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp34 = builder29.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray35 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList36 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList36, serverAddressArray35);
        builder29.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder27.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList36);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder41.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet44 = builder41.excludeFields;
        com.mongodb.BasicDBObject basicDBObject45 = builder41.getmongoCollectionFilter();
        java.lang.String str46 = builder41.mongoLocalUser;
        builder41.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder41.skipInitialImport(true);
        int int51 = builder41.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder52.script("script");
        com.mongodb.BasicDBObject basicDBObject55 = builder54.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder54.typeName("connect_timeout");
        boolean boolean58 = builder54.mongoGridFS;
        java.lang.String str59 = builder54.mongoDb;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder54.typeName("concurrent_requests");
        java.lang.String str62 = builder54.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder63.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet66 = builder63.excludeFields;
        com.mongodb.BasicDBObject basicDBObject67 = builder63.getmongoCollectionFilter();
        java.lang.String str68 = builder63.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray69 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList70 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList70, serverAddressArray69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder63.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList70);
        java.lang.String str73 = builder63.mongoAdminPassword;
        java.lang.String[] strArray78 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder63.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        builder54.setexcludeFields((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder83 = builder41.excludeFields((java.util.Set<java.lang.String>) strSet79);
        builder8.setincludeFields((java.util.Set<java.lang.String>) strSet79);
        builder8.setriverIndexName("collection");
        java.lang.String str87 = builder8.riverIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNull(wildcardTimestamp34);
        org.junit.Assert.assertNotNull(serverAddressArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(basicDBObject55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(basicDBObject67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(serverAddressArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "collection" + "'", str87, "collection");
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        builder0.script = "import_all_collections";
        boolean boolean8 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoAdminUser("bulk_size");
        com.mongodb.BasicDBObject basicDBObject11 = builder10.getmongoCollectionFilter();
        java.lang.String str12 = builder10.getstatisticsIndexName();
        java.lang.String str13 = builder10.mongoLocalUser;
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder10.setmongoClientOptions(mongoClientOptions14);
        java.lang.String str16 = builder10.mongoLocalPassword;
        java.util.List<com.mongodb.ServerAddress> serverAddressList17 = builder10.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(serverAddressList17);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        org.elasticsearch.common.unit.TimeValue timeValue13 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoLocalPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.parentTypes;
        com.mongodb.MongoClientOptions mongoClientOptions18 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str20 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(mongoClientOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "actions" + "'", str20, "actions");
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str13 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getSERVERS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = mongoDBRiverDefinition9.getDEFAULT_BULK_SIZE();
        java.lang.String str18 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "skip_initial_import" + "'", str13, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "servers" + "'", str14, "servers");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script_type" + "'", str15, "script_type");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_requests" + "'", str16, "concurrent_requests");
        org.junit.Assert.assertNotNull(byteSizeValue17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "exclude_fields" + "'", str18, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "exclude_fields" + "'", str19, "exclude_fields");
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        int int16 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.storeStatistics(false);
        java.lang.String str21 = builder18.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder18.disableIndexRefresh(false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminPassword;
        boolean boolean16 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str17 = mongoDBRiverDefinition9.scriptType;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean18 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = mongoDBRiverDefinition9.initialTimestamp;
        com.mongodb.MongoClientOptions mongoClientOptions21 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str22 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str23 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ssl" + "'", str19, "ssl");
        org.junit.Assert.assertNull(wildcardTimestamp20);
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "exclude_fields" + "'", str23, "exclude_fields");
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) 0L);
        docScoreSearchScript0.setNextVar("disable_index_refresh", (java.lang.Object) "index");
        docScoreSearchScript0.setNextScore((float) 10L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        boolean boolean19 = mongoDBRiverDefinition17.mongoGridFS;
        java.lang.String str20 = mongoDBRiverDefinition17.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition17.getExcludeFields();
        java.lang.String str22 = mongoDBRiverDefinition17.mongoLocalUser;
        java.lang.Object obj23 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder24.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet27 = builder24.excludeFields;
        builder24.setmongoCollection("initial_timestamp");
        boolean boolean30 = builder24.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder24.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.lang.String str34 = mongoDBRiverDefinition33.includeCollection;
        java.lang.String str35 = mongoDBRiverDefinition33.getTypeName();
        com.mongodb.BasicDBObject basicDBObject36 = mongoDBRiverDefinition33.getMongoCollectionFilter();
        java.lang.String str37 = mongoDBRiverDefinition33.mongoLocalPassword;
        java.lang.Object obj38 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.script("script");
        com.mongodb.BasicDBObject basicDBObject42 = builder41.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.typeName("connect_timeout");
        boolean boolean45 = builder41.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder46.script("script");
        java.lang.String[] strArray80 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        builder48.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet81);
        java.lang.String str85 = builder41.mongoDb;
        java.lang.String str86 = builder41.mongoAdminPassword;
        builder41.includeCollection = "throttle_size";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder41.typeName("connect_timeout");
        builder41.mongoAdminPassword = "admin";
        java.lang.String str93 = builder41.mongoLocalUser;
        java.lang.Object obj94 = docScoreSearchScript0.unwrap((java.lang.Object) str93);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(basicDBObject42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + "" + "'", obj94, "");
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        builder2.setmongoCollection("initial_timestamp");
        boolean boolean8 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = mongoDBRiverDefinition11.includeCollection;
        java.lang.String str13 = mongoDBRiverDefinition11.getTypeName();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        builder0.mongoOplogFilter = basicDBObject14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        java.lang.String str21 = builder16.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray22 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList23 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList23, serverAddressArray22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList23);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder16.getmongoClientOptions();
        builder16.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        com.mongodb.BasicDBObject basicDBObject33 = builder29.getmongoCollectionFilter();
        builder16.setmongoOplogFilter(basicDBObject33);
        boolean boolean35 = builder16.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder16.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder16.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        java.lang.String str45 = builder40.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray46 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList47 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList47, serverAddressArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder40.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        java.lang.String str50 = builder40.mongoAdminPassword;
        java.lang.String[] strArray55 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder40.setincludeFields((java.util.Set<java.lang.String>) strSet56);
        builder39.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.script("bulk_size");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(serverAddressArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(serverAddressArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        java.lang.String str6 = builder0.includeCollection;
        boolean boolean7 = builder0.getimportAllCollections();
        builder0.setmongoAdminPassword("bulk");
        boolean boolean10 = builder0.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getDB_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str21 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "db" + "'", str18, "db");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "null.initial_timestamp" + "'", str19, "null.initial_timestamp");
        org.junit.Assert.assertNull(basicDBObject20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index" + "'", str21, "index");
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        java.lang.String str16 = builder15.statisticsTypeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.mongoSSLVerifyCertificate(false);
        builder15.setskipInitialImport(true);
        builder15.setmongoLocalPassword("port");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        int int25 = builder24.getthrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp26 = builder24.getinitialTimestamp();
        builder24.socketTimeout = (byte) 1;
        java.lang.String str29 = builder24.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder24.scriptType("host");
        java.lang.String str32 = builder31.typeName;
        builder31.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder31.scriptType("parent_types");
        builder36.mongoGridFS = false;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("advanced_transformation", "ssl_verify_certificate");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?ssl_verify_certificate?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = mongoDBRiverDefinition9.mongoServers;
        int int15 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean16 = mongoDBRiverDefinition9.getskipInitialImport();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(serverAddressList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        java.util.Set<java.lang.String> strSet15 = builder0.getparentTypes();
        builder0.advancedTransformation = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str19 = mongoDBRiverDefinition18.mongoAdminUser;
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition18.getIncludeFields();
        java.lang.String str21 = mongoDBRiverDefinition18.getCOLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "collection" + "'", str21, "collection");
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition9.riverName;
        java.lang.String str16 = mongoDBRiverDefinition9.mongoLocalUser;
        java.lang.String str17 = mongoDBRiverDefinition9.getUSER_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "user" + "'", str17, "user");
        org.junit.Assert.assertNull(wildcardTimestamp18);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSecondaryReadPreference(false);
        boolean boolean18 = builder15.advancedTransformation;
        java.util.Set<java.lang.String> strSet19 = builder15.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder15.advancedTransformation(false);
        builder21.riverName = "db";
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory24 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder26.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet29 = builder26.excludeFields;
        com.mongodb.BasicDBObject basicDBObject30 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder26.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray32 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList33 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList33, serverAddressArray32);
        builder26.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        builder25.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList33);
        builder25.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder25.advancedTransformation(false);
        com.mongodb.BasicDBObject basicDBObject41 = builder40.getmongoCollectionFilter();
        org.elasticsearch.script.ExecutableScript executableScript42 = docScoreNativeScriptFactory24.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder21.mongoOplogFilter(basicDBObject41);
        builder21.script = "user";
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertNotNull(serverAddressArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertNotNull(executableScript42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        builder2.setdropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = builder2.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder2.scriptType("name");
        boolean boolean10 = builder2.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder2.riverIndexName("null.initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder2.importAllCollections(false);
        builder14.statisticsIndexName = "host";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.mongoUseSSL = false;
        builder2.setmongoLocalUser("drop_collection");
        builder2.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.socketTimeout((int) (short) 10);
        builder11.setthrottleSize((int) (short) -1);
        int int14 = builder11.getconnectTimeout();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalPassword("");
        java.util.Set<java.lang.String> strSet4 = builder3.getexcludeFields();
        java.util.Set<java.lang.String> strSet5 = builder3.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.connectTimeout(0);
        builder7.statisticsIndexName = "null.initial_timestamp";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.script;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition9.getInitialTimestamp();
        int int20 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean21 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        builder1.setmongoCollection("initial_timestamp");
        boolean boolean7 = builder1.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.includeCollection;
        java.lang.String str12 = mongoDBRiverDefinition10.getCOLLECTION_FIELD();
        int int13 = mongoDBRiverDefinition10.throttleSize;
        java.lang.String str14 = mongoDBRiverDefinition10.getRiverName();
        java.lang.String str15 = mongoDBRiverDefinition10.getPARENT_TYPES_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition10.getSERVERS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition10.mongoLocalUser;
        java.lang.Object obj18 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition10);
        java.lang.String str19 = mongoDBRiverDefinition10.mongoAdminUser;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "collection" + "'", str12, "collection");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "parent_types" + "'", str15, "parent_types");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "servers" + "'", str16, "servers");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        boolean boolean14 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.initial_timestamp" + "'", str15, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_fields" + "'", str16, "include_fields");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "parent_types" + "'", str17, "parent_types");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        builder2.riverIndexName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.mongoCollection("parent_types");
        builder10.setimportAllCollections(false);
        java.lang.String str13 = builder10.riverIndexName;
        builder10.setriverName("import_all_collections");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "credentials" + "'", str13, "credentials");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoGridFS(false);
        java.util.Set<java.lang.String> strSet3 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.advancedTransformation(false);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder0.setmongoClientOptions(mongoClientOptions6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        builder8.setmongoCollection("initial_timestamp");
        boolean boolean14 = builder8.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str18 = mongoDBRiverDefinition17.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition17.getHOST_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition17.getUSER_FIELD();
        java.util.Set<java.lang.String> strSet21 = mongoDBRiverDefinition17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions22 = mongoDBRiverDefinition17.mongoClientOptions;
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = mongoDBRiverDefinition17.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.mongoServers(serverAddressList23);
        builder24.setmongoLocalUser("name");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "host" + "'", str19, "host");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "user" + "'", str20, "user");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        builder2.setstatisticsIndexName("password");
        builder2.dropCollection = true;
        builder2.throttleSize = 35;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoAdminUser("include_fields");
        builder2.setskipInitialImport(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        com.mongodb.BasicDBObject basicDBObject13 = builder0.mongoCollectionFilter;
        java.util.Set<java.lang.String> strSet14 = builder0.parentTypes;
        builder0.setmongoLocalPassword("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.statisticsTypeName("options");
        boolean boolean19 = builder0.storeStatistics;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder0.importAllCollections = false;
        boolean boolean27 = builder0.getskipInitialImport();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.mongoCollection("user");
        builder29.setindexName("socket_timeout");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        com.mongodb.BasicDBObject basicDBObject21 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.mongoSSLVerifyCertificate = true;
        java.lang.Class<?> wildcardClass25 = builder0.getClass();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        builder9.mongoAdminPassword = "include_collection";
        builder9.mongoUseSSL = false;
        builder9.importAllCollections = false;
        builder9.setriverIndexName("localhost");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.statisticsTypeName("host");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder0.setmongoClientOptions(mongoClientOptions21);
        builder0.setstatisticsTypeName("import_all_collections");
        builder0.setsocketTimeout(27017);
        builder0.throttleSize = (short) 10;
        boolean boolean29 = builder0.mongoGridFS;
        int int30 = builder0.connectTimeout;
        java.lang.String str31 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.advancedTransformation(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoCollection("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        com.mongodb.BasicDBObject basicDBObject21 = builder17.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder17.initialTimestamp;
        builder17.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder17.typeName("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder17.statisticsIndexName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject29 = builder28.getmongoCollectionFilter();
        org.elasticsearch.common.settings.Settings settings30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder31.excludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder73.script("script");
        com.mongodb.BasicDBObject basicDBObject76 = builder75.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder31.mongoOplogFilter(basicDBObject76);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder31.mongoLocalPassword("bulk_timeout");
        builder31.setriverIndexName("disable_index_refresh");
        builder31.mongoLocalUser = "";
        com.mongodb.BasicDBObject basicDBObject84 = builder31.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings85 = new org.elasticsearch.river.RiverSettings(settings30, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject84);
        builder28.mongoOplogFilter = basicDBObject84;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder16.mongoCollectionFilter(basicDBObject84);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder16.mongoSSLVerifyCertificate(false);
        builder89.setconnectTimeout(97);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(basicDBObject76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(basicDBObject84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        int int19 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        boolean boolean20 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str21 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str22 = mongoDBRiverDefinition9.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.util.Set<java.lang.String> strSet23 = mongoDBRiverDefinition9.excludeFields;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 27017 + "'", int19 == 27017);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "import_all_collections" + "'", str22, "import_all_collections");
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout(1);
        builder2.setdropCollection(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.statisticsIndexName;
        int int18 = mongoDBRiverDefinition9.getThrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        int int15 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str17 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue18 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ssl" + "'", str17, "ssl");
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean16 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean17 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean18 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str19 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getRiverName();
        java.lang.String str21 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean22 = mongoDBRiverDefinition9.getdropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "type" + "'", str19, "type");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "disable_index_refresh" + "'", str21, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.lang.String str6 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.indexName("exclude_fields");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder10.getinitialTimestamp();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.statisticsTypeName("host");
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder0.setmongoClientOptions(mongoClientOptions21);
        builder0.setmongoAdminPassword("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.dropCollection(false);
        java.lang.String str27 = builder0.getmongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bulk_size" + "'", str27, "bulk_size");
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str20 = mongoDBRiverDefinition9.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "script" + "'", str18, "script");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        boolean boolean13 = mongoDBRiverDefinition9.disableIndexRefresh;
        boolean boolean14 = mongoDBRiverDefinition9.importAllCollections;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder13.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoCollection("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        boolean boolean19 = mongoDBRiverDefinition18.importAllCollections;
        java.lang.String str20 = mongoDBRiverDefinition18.getHOST_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition18.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean22 = mongoDBRiverDefinition18.mongoUseSSL;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "host" + "'", str20, "host");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "concurrent_bulk_requests" + "'", str21, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = builder12.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition9.mongoClientOptions;
        org.elasticsearch.common.unit.TimeValue timeValue18 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bulk" + "'", str15, "bulk");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ssl" + "'", str16, "ssl");
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder4.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet7 = builder4.excludeFields;
        builder4.setmongoCollection("initial_timestamp");
        boolean boolean10 = builder4.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder4.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.lang.String str14 = mongoDBRiverDefinition13.includeCollection;
        java.lang.String str15 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition13.isImportAllCollections();
        boolean boolean17 = mongoDBRiverDefinition13.mongoGridFS;
        docScoreSearchScript0.setNextVar("collection", (java.lang.Object) mongoDBRiverDefinition13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        builder19.setmongoCollection("initial_timestamp");
        boolean boolean25 = builder19.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder19.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.lang.String str29 = mongoDBRiverDefinition28.includeCollection;
        java.lang.String str30 = mongoDBRiverDefinition28.getHOST_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition28.getMongoLocalPassword();
        java.lang.String str32 = mongoDBRiverDefinition28.script;
        java.lang.String str33 = mongoDBRiverDefinition28.mongoAdminUser;
        java.lang.String str34 = mongoDBRiverDefinition28.typeName;
        org.elasticsearch.common.logging.ESLogger eSLogger35 = mongoDBRiverDefinition28.getlogger();
        java.lang.Object obj36 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder38.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet41 = builder38.excludeFields;
        builder38.setmongoCollection("initial_timestamp");
        boolean boolean44 = builder38.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder38.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        java.lang.String str48 = mongoDBRiverDefinition47.includeCollection;
        java.lang.String str49 = mongoDBRiverDefinition47.getHOST_FIELD();
        java.lang.String str50 = mongoDBRiverDefinition47.getMongoLocalPassword();
        java.lang.String str51 = mongoDBRiverDefinition47.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str52 = mongoDBRiverDefinition47.getFILTER_FIELD();
        int int53 = mongoDBRiverDefinition47.socketTimeout;
        boolean boolean54 = mongoDBRiverDefinition47.disableIndexRefresh;
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) mongoDBRiverDefinition47);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "host" + "'", str30, "host");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(eSLogger35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "host" + "'", str49, "host");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "script_type" + "'", str51, "script_type");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "filter" + "'", str52, "filter");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str17 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverIndexName();
        boolean boolean19 = mongoDBRiverDefinition9.isSkipInitialImport();
        boolean boolean20 = mongoDBRiverDefinition9.getstoreStatistics();
        java.util.List<com.mongodb.ServerAddress> serverAddressList21 = mongoDBRiverDefinition9.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_bulk_requests" + "'", str17, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressList21);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        java.lang.String str12 = mongoDBRiverDefinition9.getTYPE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getNAME_FIELD();
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.getIncludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "type" + "'", str12, "type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str16 = mongoDBRiverDefinition9.getScript();
        java.lang.String str17 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        int int18 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition9.mongoClientOptions;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "include_fields" + "'", str17, "include_fields");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1000 + "'", int18 == 1000);
        org.junit.Assert.assertNull(mongoClientOptions19);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder7.includeCollection("admin");
        boolean boolean12 = builder11.dropCollection;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str17 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str19 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getIndexName();
        org.elasticsearch.common.logging.ESLogger eSLogger21 = mongoDBRiverDefinition9.getlogger();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ssl" + "'", str15, "ssl");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gridfs" + "'", str17, "gridfs");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "throttle_size" + "'", str19, "throttle_size");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(eSLogger21);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("hi!");
        boolean boolean6 = builder0.importAllCollections;
        java.lang.String str7 = builder0.mongoAdminPassword;
        builder0.typeName = "concurrent_bulk_requests";
        builder0.setskipInitialImport(false);
        boolean boolean12 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.script("null.null");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder14.storeStatistics(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(true);
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.script("import_all_collections");
        boolean boolean21 = builder0.storeStatistics;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("disable_index_refresh", "admin", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?admin?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean14 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoDb();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder24.script("script");
        java.lang.String[] strArray58 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder26.setparentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder21.excludeFields((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.script("script");
        com.mongodb.BasicDBObject basicDBObject66 = builder65.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder21.mongoOplogFilter(basicDBObject66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder21.mongoLocalPassword("bulk_timeout");
        builder21.setriverIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder72.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet75 = builder72.excludeFields;
        builder72.setmongoCollection("initial_timestamp");
        boolean boolean78 = builder72.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder72.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder80);
        java.lang.String str82 = mongoDBRiverDefinition81.includeCollection;
        java.lang.String str83 = mongoDBRiverDefinition81.getHOST_FIELD();
        boolean boolean84 = mongoDBRiverDefinition81.isAdvancedTransformation();
        java.lang.String str85 = mongoDBRiverDefinition81.getINCLUDE_COLLECTION_FIELD();
        boolean boolean86 = mongoDBRiverDefinition81.getmongoSSLVerifyCertificate();
        java.lang.String str87 = mongoDBRiverDefinition81.getHOST_FIELD();
        boolean boolean88 = mongoDBRiverDefinition81.mongoSSLVerifyCertificate;
        java.lang.String str89 = mongoDBRiverDefinition81.getSERVERS_FIELD();
        boolean boolean90 = mongoDBRiverDefinition81.storeStatistics;
        java.util.List<com.mongodb.ServerAddress> serverAddressList91 = mongoDBRiverDefinition81.getMongoServers();
        builder21.mongoServers = serverAddressList91;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder0.mongoServers(serverAddressList91);
        java.lang.String str94 = builder0.scriptType;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(basicDBObject66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "host" + "'", str83, "host");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "include_collection" + "'", str85, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "host" + "'", str87, "host");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "servers" + "'", str89, "servers");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(serverAddressList91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int13 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoLocalPassword;
        java.lang.String str15 = mongoDBRiverDefinition9.getPORT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "port" + "'", str15, "port");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        boolean boolean18 = mongoDBRiverDefinition9.storeStatistics;
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str21 = mongoDBRiverDefinition9.riverIndexName;
        boolean boolean22 = mongoDBRiverDefinition9.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        builder2.setmongoAdminUser("import_all_collections");
        builder2.skipInitialImport = true;
        java.lang.String str8 = builder2.getmongoLocalUser();
        java.lang.String str9 = builder2.typeName;
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder2.mongoClientOptions;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(mongoClientOptions10);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.util.Set<java.lang.String> strSet3 = builder2.getexcludeFields();
        builder2.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder17.scriptType("bulk_size");
        builder17.setstatisticsIndexName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder17.mongoSecondaryReadPreference(false);
        builder23.setstatisticsTypeName("drop_collection");
        java.util.Set<java.lang.String> strSet26 = null;
        builder23.setincludeFields(strSet26);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        builder0.setdisableIndexRefresh(true);
        java.lang.String str12 = builder0.getmongoCollection();
        builder0.statisticsIndexName = "host";
        int int15 = builder0.getconnectTimeout();
        builder0.setstatisticsIndexName("db");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoUseSSL(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.scriptType("include_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.indexName("");
        builder0.mongoGridFS = true;
        java.util.Set<java.lang.String> strSet12 = builder0.getexcludeFields();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean13 = mongoDBRiverDefinition9.getskipInitialImport();
        boolean boolean14 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalUser();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        int int15 = mongoDBRiverDefinition9.getDEFAULT_BULK_ACTIONS();
        java.lang.String str16 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str18 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean19 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str20 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        java.lang.String str22 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        boolean boolean23 = mongoDBRiverDefinition9.isDropCollection();
        java.lang.String str24 = mongoDBRiverDefinition9.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1000 + "'", int15 == 1000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "type" + "'", str16, "type");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "type" + "'", str18, "type");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "collection" + "'", str20, "collection");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index" + "'", str21, "index");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ssl_verify_certificate" + "'", str24, "ssl_verify_certificate");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        builder0.mongoAdminUser = "options";
        com.mongodb.BasicDBObject basicDBObject18 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.typeName("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.throttleSize((int) (short) 0);
        java.lang.String str23 = builder22.mongoDb;
        java.lang.String str24 = builder22.getscript();
        builder22.scriptType = "initial_timestamp";
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str15 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean16 = mongoDBRiverDefinition9.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str19 = mongoDBRiverDefinition9.getIndexName();
        com.mongodb.BasicDBObject basicDBObject20 = mongoDBRiverDefinition9.mongoCollectionFilter;
        boolean boolean21 = mongoDBRiverDefinition9.disableIndexRefresh;
        com.mongodb.BasicDBObject basicDBObject22 = mongoDBRiverDefinition9.getMongoOplogFilter();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "include_collection" + "'", str13, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "host" + "'", str15, "host");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "password" + "'", str17, "password");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(basicDBObject22);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        java.lang.String str12 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoLocalUser;
        int int15 = mongoDBRiverDefinition9.socketTimeout;
        int int16 = mongoDBRiverDefinition9.getConnectTimeout();
        boolean boolean17 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script_type" + "'", str12, "script_type");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.mongoLocalUser = "parent_types";
        builder12.dropCollection = true;
        java.lang.String str18 = builder12.getriverIndexName();
        builder12.disableIndexRefresh = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        boolean boolean16 = builder13.getmongoSSLVerifyCertificate();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        com.mongodb.BasicDBObject basicDBObject21 = builder17.getmongoCollectionFilter();
        java.lang.String str22 = builder17.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList24);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder17.getmongoClientOptions();
        builder17.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet33 = builder30.excludeFields;
        com.mongodb.BasicDBObject basicDBObject34 = builder30.getmongoCollectionFilter();
        builder17.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = builder17.mongoOplogFilter;
        builder13.setmongoOplogFilter(basicDBObject36);
        builder0.mongoCollectionFilter = basicDBObject36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.includeCollection("hi!");
        com.mongodb.BasicDBObject basicDBObject41 = builder0.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.riverName("hi!");
        com.mongodb.MongoClientOptions mongoClientOptions44 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.mongoClientOptions(mongoClientOptions44);
        java.util.Set<java.lang.String> strSet46 = builder43.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.mongoAdminUser("");
        builder43.typeName = "host";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(basicDBObject34);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(basicDBObject41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoDb("");
        java.lang.String str44 = builder41.getstatisticsTypeName();
        builder41.setskipInitialImport(false);
        builder41.connectTimeout = (byte) 1;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder49.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet52 = builder49.excludeFields;
        builder49.setmongoCollection("initial_timestamp");
        boolean boolean55 = builder49.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder49.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        java.lang.String str59 = mongoDBRiverDefinition58.includeCollection;
        java.lang.String str60 = mongoDBRiverDefinition58.getHOST_FIELD();
        java.lang.String str61 = mongoDBRiverDefinition58.getMongoLocalPassword();
        java.lang.String str62 = mongoDBRiverDefinition58.script;
        java.lang.String str63 = mongoDBRiverDefinition58.mongoAdminUser;
        int int64 = mongoDBRiverDefinition58.getDEFAULT_BULK_ACTIONS();
        boolean boolean65 = mongoDBRiverDefinition58.getmongoSSLVerifyCertificate();
        java.lang.String str66 = mongoDBRiverDefinition58.typeName;
        java.lang.String str67 = mongoDBRiverDefinition58.getMongoOplogNamespace();
        java.lang.String str68 = mongoDBRiverDefinition58.getStatisticsTypeName();
        com.mongodb.BasicDBObject basicDBObject69 = mongoDBRiverDefinition58.mongoCollectionFilter;
        builder41.mongoOplogFilter = basicDBObject69;
        builder41.advancedTransformation = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "host" + "'", str60, "host");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1000 + "'", int64 == 1000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "null.initial_timestamp" + "'", str67, "null.initial_timestamp");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(basicDBObject69);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder8.importAllCollections = true;
        builder8.mongoDb = "throttle_size";
        java.lang.String str13 = builder8.getmongoCollection();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder8.setmongoClientOptions(mongoClientOptions14);
        builder8.connectTimeout = 0;
        java.lang.String str18 = builder8.getmongoCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        int int15 = mongoDBRiverDefinition9.connectTimeout;
        int int16 = mongoDBRiverDefinition9.getSocketTimeout();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        boolean boolean18 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str19 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = mongoDBRiverDefinition9.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.initial_timestamp" + "'", str17, "null.initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script_type" + "'", str19, "script_type");
        org.junit.Assert.assertNotNull(serverAddressList20);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getTYPE_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.mongoSecondaryReadPreference;
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        java.lang.String str16 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoAdminUser();
        boolean boolean18 = mongoDBRiverDefinition9.isDropCollection();
        boolean boolean19 = mongoDBRiverDefinition9.getmongoGridFS();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        java.lang.String str14 = mongoDBRiverDefinition9.getRiverIndexName();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str17 = mongoDBRiverDefinition9.getUSER_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getNAME_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "user" + "'", str17, "user");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "drop_collection" + "'", str18, "drop_collection");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "name" + "'", str19, "name");
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject15 = builder12.mongoOplogFilter;
        builder12.setmongoUseSSL(false);
        java.lang.String str18 = builder12.getstatisticsTypeName();
        builder12.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.mongoDb("connect_timeout");
        int int23 = builder22.getthrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "throttle_size" + "'", str18, "throttle_size");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder0.mongoOplogFilter;
        java.lang.String str20 = builder0.riverName;
        com.mongodb.BasicDBObject basicDBObject21 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.mongoLocalPassword("servers");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder0.mongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "script_type" + "'", str20, "script_type");
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.mongoUseSSL(false);
        builder16.setriverIndexName("");
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        builder16.setmongoClientOptions(mongoClientOptions19);
        builder16.setincludeCollection("initial_timestamp");
        boolean boolean23 = builder16.importAllCollections;
        java.lang.String str24 = builder16.mongoAdminPassword;
        java.lang.String str25 = builder16.mongoDb;
        boolean boolean26 = builder16.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoLocalPassword("type");
        boolean boolean9 = builder0.getimportAllCollections();
        builder0.skipInitialImport = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoCollection();
        boolean boolean18 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet20 = mongoDBRiverDefinition9.getIncludeFields();
        java.lang.String str21 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "flush_interval" + "'", str21, "flush_interval");
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "parent_types" + "'", str17, "parent_types");
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        java.lang.String str10 = builder8.getmongoLocalPassword();
        java.lang.String str11 = builder8.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        boolean boolean14 = builder8.storeStatistics;
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.mongoClientOptions(mongoClientOptions15);
        builder16.setriverName("collection");
        com.mongodb.BasicDBObject basicDBObject19 = builder16.getmongoOplogFilter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(basicDBObject19);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.disableIndexRefresh;
        java.lang.String str19 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str20 = mongoDBRiverDefinition9.mongoAdminPassword;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.getInitialTimestamp();
        com.mongodb.MongoClientOptions mongoClientOptions19 = mongoDBRiverDefinition9.getMongoClientOptions();
        boolean boolean20 = mongoDBRiverDefinition9.dropCollection;
        java.lang.String str21 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str22 = mongoDBRiverDefinition9.getIncludeCollection();
        java.lang.String str23 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        boolean boolean24 = mongoDBRiverDefinition9.mongoUseSSL;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "initial_timestamp" + "'", str21, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "store_statistics" + "'", str23, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        java.util.Set<java.lang.String> strSet6 = builder0.excludeFields;
        boolean boolean7 = builder0.getdisableIndexRefresh();
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serverAddressList8);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalPassword("");
        java.util.Set<java.lang.String> strSet4 = builder3.getexcludeFields();
        java.util.Set<java.lang.String> strSet5 = builder3.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder3.connectTimeout(0);
        java.util.Set<java.lang.String> strSet8 = builder7.includeFields;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.script("script");
        com.mongodb.BasicDBObject basicDBObject12 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean16 = builder0.getimportAllCollections();
        builder0.mongoSSLVerifyCertificate = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.throttleSize((int) (short) 0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder20.mongoGridFS(true);
        java.lang.String str23 = builder20.mongoLocalUser;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean11 = mongoDBRiverDefinition8.getmongoGridFS();
        java.lang.String str12 = mongoDBRiverDefinition8.getHOST_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition8.getACTIONS_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "host" + "'", str12, "host");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "actions" + "'", str13, "actions");
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str16 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        boolean boolean20 = mongoDBRiverDefinition9.dropCollection;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "initial_timestamp" + "'", str15, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gridfs" + "'", str16, "gridfs");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "host" + "'", str17, "host");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "password" + "'", str18, "password");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index" + "'", str19, "index");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder3.script("script");
        java.lang.String[] strArray37 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("script");
        com.mongodb.BasicDBObject basicDBObject45 = builder44.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.mongoOplogFilter(basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder0.mongoLocalPassword("bulk_timeout");
        builder0.setriverIndexName("disable_index_refresh");
        builder0.mongoLocalUser = "";
        java.lang.String str53 = builder0.getriverName();
        builder0.setmongoSSLVerifyCertificate(false);
        boolean boolean56 = builder0.disableIndexRefresh;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.riverIndexName("size");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue15 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean17 = mongoDBRiverDefinition9.isImportAllCollections();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        java.lang.String str17 = builder13.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("script");
        java.lang.String[] strArray52 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        builder20.setparentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder13.parentTypes((java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet53);
        java.lang.String str58 = builder12.mongoCollection;
        int int59 = builder12.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder12.advancedTransformation(false);
        builder61.mongoSSLVerifyCertificate = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        boolean boolean1 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        builder2.setmongoCollection("initial_timestamp");
        boolean boolean8 = builder2.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder2.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str12 = mongoDBRiverDefinition11.includeCollection;
        java.lang.String str13 = mongoDBRiverDefinition11.getTypeName();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition11.getMongoCollectionFilter();
        builder0.mongoOplogFilter = basicDBObject14;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        com.mongodb.BasicDBObject basicDBObject20 = builder16.getmongoCollectionFilter();
        java.lang.String str21 = builder16.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray22 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList23 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList23, serverAddressArray22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder16.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList23);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder16.getmongoClientOptions();
        builder16.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        com.mongodb.BasicDBObject basicDBObject33 = builder29.getmongoCollectionFilter();
        builder16.setmongoOplogFilter(basicDBObject33);
        boolean boolean35 = builder16.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder16.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder16.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        java.lang.String str45 = builder40.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray46 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList47 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList47, serverAddressArray46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder40.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        java.lang.String str50 = builder40.mongoAdminPassword;
        java.lang.String[] strArray55 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        builder40.setincludeFields((java.util.Set<java.lang.String>) strSet56);
        builder39.setparentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder60.mongoCollection("local");
        java.util.Set<java.lang.String> strSet63 = builder60.getincludeFields();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(serverAddressArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(serverAddressArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strSet63);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder13.mongoClientOptions;
        java.lang.String str15 = builder13.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition16 = builder13.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder17.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet20 = builder17.excludeFields;
        com.mongodb.BasicDBObject basicDBObject21 = builder17.getmongoCollectionFilter();
        java.lang.String str22 = builder17.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder17.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList24);
        boolean boolean27 = builder26.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder26.riverIndexName("filter");
        java.lang.String[] strArray59 = new java.lang.String[] { "script", "ssl_verify_certificate", "size", "host", "password", "initial_timestamp", "initial_timestamp", "import_all_collections", "", "socket_timeout", "options", "script_type", "store_statistics", "include_collection", "advanced_transformation", "import_all_collections", "hi!", "store_statistics", "gridfs", "type", "db", "credentials", "collection", "type", "skip_initial_import", "filter", "connect_timeout", "credentials", "script_type" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder29.excludeFields = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder13.includeFields((java.util.Set<java.lang.String>) strSet60);
        org.bson.types.BSONTimestamp bSONTimestamp64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.initialTimestamp(bSONTimestamp64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition16);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.lang.String[] strArray34 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = builder2.getadvancedTransformation();
        boolean boolean39 = builder2.mongoSecondaryReadPreference;
        builder2.mongoUseSSL = true;
        java.lang.String str42 = builder2.statisticsTypeName;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean13 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str14 = mongoDBRiverDefinition9.riverName;
        boolean boolean15 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getACTIONS_FIELD();
        boolean boolean18 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "actions" + "'", str17, "actions");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.script;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = mongoDBRiverDefinition9.getInitialTimestamp();
        int int20 = mongoDBRiverDefinition9.getConnectTimeout();
        java.lang.String str21 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "exclude_fields" + "'", str17, "exclude_fields");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "exclude_fields" + "'", str21, "exclude_fields");
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getDB_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str16 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.statisticsIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "db" + "'", str14, "db");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "drop_collection" + "'", str16, "drop_collection");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.riverName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.mongoLocalPassword("");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoOplogFilter();
        java.lang.String str5 = builder3.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(basicDBObject4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextVar("connect_timeout", (java.lang.Object) "type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = builder8.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray14 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList15 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList15, serverAddressArray14);
        builder8.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        builder7.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder19.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet22 = builder19.excludeFields;
        com.mongodb.BasicDBObject basicDBObject23 = builder19.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp24 = builder19.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder19.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder7.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList26);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder7.indexName("");
        java.lang.String str32 = builder7.getstatisticsIndexName();
        builder7.mongoAdminPassword = "disable_index_refresh";
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder7.mongoClientOptions(mongoClientOptions35);
        docScoreSearchScript0.setNextVar("skip_initial_import", (java.lang.Object) mongoClientOptions35);
        docScoreSearchScript0.setNextScore((float) 27017);
        docScoreSearchScript0.setNextScore((float) (short) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.script("script");
        java.lang.String[] strArray76 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        builder44.setparentTypes((java.util.Set<java.lang.String>) strSet77);
        boolean boolean80 = builder44.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder44.scriptType("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder84 = builder82.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder84.mongoAdminPassword("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder88 = builder86.includeCollection("credentials");
        java.lang.Object obj89 = docScoreSearchScript0.unwrap((java.lang.Object) "credentials");
        org.apache.lucene.search.Scorer scorer90 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNotNull(serverAddressArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(basicDBObject23);
        org.junit.Assert.assertNull(wildcardTimestamp24);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + "credentials" + "'", obj89, "credentials");
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoSSLVerifyCertificate(true);
        java.lang.String str6 = builder0.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.script("user");
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder8.mongoClientOptions = mongoClientOptions9;
        boolean boolean11 = builder8.getstoreStatistics();
        boolean boolean12 = builder8.dropCollection;
        int int13 = builder8.throttleSize;
        builder8.script = "local";
        java.lang.String str16 = builder8.getscript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "local" + "'", str16, "local");
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        java.util.Set<java.lang.String> strSet9 = builder0.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(false);
        boolean boolean12 = builder11.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder14.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet17 = builder14.excludeFields;
        com.mongodb.BasicDBObject basicDBObject18 = builder14.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp19 = builder14.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray20 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList21 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList21, serverAddressArray20);
        builder14.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList21);
        builder13.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder25.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet28 = builder25.excludeFields;
        com.mongodb.BasicDBObject basicDBObject29 = builder25.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp30 = builder25.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder25.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder13.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList32);
        builder13.mongoSecondaryReadPreference = false;
        boolean boolean38 = builder13.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        com.mongodb.BasicDBObject basicDBObject44 = builder40.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp45 = builder40.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray46 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList47 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList47, serverAddressArray46);
        builder40.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        builder39.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList47);
        builder39.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder39.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder54.mongoSecondaryReadPreference(false);
        boolean boolean57 = builder54.mongoGridFS;
        com.mongodb.ServerAddress[] serverAddressArray58 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList59 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList59, serverAddressArray58);
        builder54.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList59);
        builder13.mongoServers = serverAddressList59;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder11.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder63.mongoLocalUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder65);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNull(wildcardTimestamp19);
        org.junit.Assert.assertNotNull(serverAddressArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNull(wildcardTimestamp30);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(basicDBObject44);
        org.junit.Assert.assertNull(wildcardTimestamp45);
        org.junit.Assert.assertNotNull(serverAddressArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serverAddressArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        int int3 = builder2.throttleSize;
        java.util.List<com.mongodb.ServerAddress> serverAddressList4 = builder2.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder2.indexName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.mongoSecondaryReadPreference(true);
        builder6.setstoreStatistics(false);
        builder6.settypeName("admin");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serverAddressList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        builder24.mongoCollection = "collection";
        builder24.mongoSecondaryReadPreference = true;
        int int29 = builder24.getconnectTimeout();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        java.lang.String str5 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoLocalPassword("options");
        builder7.mongoGridFS = false;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition9.getMongoClientOptions();
        java.lang.String str13 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        boolean boolean15 = mongoDBRiverDefinition9.isStoreStatistics();
        com.mongodb.MongoClientOptions mongoClientOptions16 = mongoDBRiverDefinition9.mongoClientOptions;
        java.lang.String str17 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "store_statistics" + "'", str14, "store_statistics");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "concurrent_requests" + "'", str17, "concurrent_requests");
        org.junit.Assert.assertNull(wildcardTimestamp18);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder10.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet13 = builder10.excludeFields;
        com.mongodb.BasicDBObject basicDBObject14 = builder10.getmongoCollectionFilter();
        java.lang.String str15 = builder10.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray16 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList17 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList17, serverAddressArray16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList17);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder10.getmongoClientOptions();
        builder10.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder23.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet26 = builder23.excludeFields;
        com.mongodb.BasicDBObject basicDBObject27 = builder23.getmongoCollectionFilter();
        builder10.setmongoOplogFilter(basicDBObject27);
        boolean boolean29 = builder10.mongoGridFS;
        boolean boolean30 = builder10.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder31.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet34 = builder31.excludeFields;
        com.mongodb.BasicDBObject basicDBObject35 = builder31.getmongoCollectionFilter();
        java.lang.String str36 = builder31.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray37 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList38 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList38, serverAddressArray37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder31.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList38);
        boolean boolean41 = builder40.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder42.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet45 = builder42.excludeFields;
        com.mongodb.BasicDBObject basicDBObject46 = builder42.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp47 = builder42.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray48 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList49 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList49, serverAddressArray48);
        builder42.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder40.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder53.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet56 = builder53.excludeFields;
        com.mongodb.BasicDBObject basicDBObject57 = builder53.getmongoCollectionFilter();
        java.lang.String str58 = builder53.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray59 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList60 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList60, serverAddressArray59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder53.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList60);
        java.lang.String str63 = builder53.mongoAdminPassword;
        java.lang.String[] strArray68 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder53.setincludeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder40.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder10.includeFields = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder9.includeFields((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder9.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition77 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder76);
        boolean boolean78 = mongoDBRiverDefinition77.getstoreStatistics();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(basicDBObject35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(serverAddressArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(basicDBObject46);
        org.junit.Assert.assertNull(wildcardTimestamp47);
        org.junit.Assert.assertNotNull(serverAddressArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(basicDBObject57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(serverAddressArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.mongoUseSSL = true;
        builder8.throttleSize = (short) 1;
        builder8.riverIndexName = "password";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoCollection("filter");
        com.mongodb.BasicDBObject basicDBObject16 = builder15.mongoOplogFilter;
        builder15.setscript("gridfs");
        java.lang.String str19 = builder15.statisticsIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition9.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition9.mongoCollection;
        java.lang.String str15 = mongoDBRiverDefinition9.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str18 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.statisticsTypeName;
        java.lang.String str20 = mongoDBRiverDefinition9.getLOCAL_DB_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getBULK_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition9.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "skip_initial_import" + "'", str15, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_collection" + "'", str16, "include_collection");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "initial_timestamp" + "'", str18, "initial_timestamp");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "local" + "'", str20, "local");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk" + "'", str21, "bulk");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.statisticsIndexName;
        java.lang.String str15 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet16 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean17 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminUser();
        java.util.Set<java.lang.String> strSet19 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str20 = mongoDBRiverDefinition9.getScript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "collection" + "'", str15, "collection");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        boolean boolean12 = mongoDBRiverDefinition9.isAdvancedTransformation();
        java.lang.String str13 = mongoDBRiverDefinition9.getMongoCollection();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.isMongoUseSSL();
        java.lang.String str18 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "initial_timestamp" + "'", str13, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_bulk_requests" + "'", str15, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "collection" + "'", str16, "collection");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ssl" + "'", str18, "ssl");
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        java.lang.Object obj2 = docScoreSearchScript0.unwrap((java.lang.Object) true);
        docScoreSearchScript0.setNextScore(100.0f);
        docScoreSearchScript0.setNextScore((float) 10);
        docScoreSearchScript0.setNextScore((float) 35);
        docScoreSearchScript0.setNextScore((-1.0f));
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + true + "'", obj2, true);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        com.mongodb.MongoClientOptions mongoClientOptions23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder22.mongoClientOptions(mongoClientOptions23);
        builder24.mongoCollection = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder24.mongoLocalUser("import_all_collections");
        java.lang.String str29 = builder28.indexName;
        boolean boolean30 = builder28.mongoSecondaryReadPreference;
        int int31 = builder28.getsocketTimeout();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder12.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet15 = builder12.excludeFields;
        com.mongodb.BasicDBObject basicDBObject16 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder12.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray18 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList19 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList19, serverAddressArray18);
        builder12.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder0.indexName("");
        builder0.importAllCollections = false;
        boolean boolean27 = builder0.getskipInitialImport();
        boolean boolean28 = builder0.getmongoUseSSL();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = builder0.getmongoServers();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNull(wildcardTimestamp17);
        org.junit.Assert.assertNotNull(serverAddressArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(serverAddressList29);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.scriptType("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = builder18.build();
        java.lang.String str20 = mongoDBRiverDefinition19.getScriptType();
        java.lang.String str21 = mongoDBRiverDefinition19.getINCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondary_read_preference" + "'", str20, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "include_fields" + "'", str21, "include_fields");
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        java.lang.String str14 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        com.mongodb.BasicDBObject basicDBObject15 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str16 = mongoDBRiverDefinition9.getStatisticsIndexName();
        boolean boolean17 = mongoDBRiverDefinition9.isAdvancedTransformation();
        boolean boolean18 = mongoDBRiverDefinition9.isDisableIndexRefresh();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_size" + "'", str14, "bulk_size");
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        int int16 = mongoDBRiverDefinition9.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition9.getdropCollection();
        java.lang.String str18 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        com.mongodb.BasicDBObject basicDBObject19 = mongoDBRiverDefinition9.mongoOplogFilter;
        java.lang.String str20 = mongoDBRiverDefinition9.getBULK_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondary_read_preference" + "'", str15, "secondary_read_preference");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "include_fields" + "'", str18, "include_fields");
        org.junit.Assert.assertNull(basicDBObject19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bulk" + "'", str20, "bulk");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        java.lang.String str15 = builder0.getmongoLocalPassword();
        builder0.setmongoAdminUser("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        builder18.setmongoCollection("initial_timestamp");
        boolean boolean24 = builder18.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder18.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.lang.String str28 = mongoDBRiverDefinition27.includeCollection;
        java.lang.String str29 = mongoDBRiverDefinition27.getIndexName();
        java.lang.String str30 = mongoDBRiverDefinition27.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str31 = mongoDBRiverDefinition27.mongoAdminUser;
        java.util.Set<java.lang.String> strSet32 = mongoDBRiverDefinition27.parentTypes;
        java.lang.String str33 = mongoDBRiverDefinition27.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = mongoDBRiverDefinition27.mongoServers;
        builder0.setmongoServers(serverAddressList34);
        java.lang.String str36 = builder0.getriverName();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder0.mongoServers;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "secondary_read_preference" + "'", str30, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "throttle_size" + "'", str33, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(serverAddressList37);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition9.parentTypes;
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.getExcludeFields();
        java.lang.String str19 = mongoDBRiverDefinition9.statisticsIndexName;
        java.lang.String str20 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.scriptType;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondary_read_preference" + "'", str20, "secondary_read_preference");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        java.util.Set<java.lang.String> strSet3 = builder2.getexcludeFields();
        builder2.setstatisticsIndexName("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder10.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet13 = builder10.excludeFields;
        com.mongodb.BasicDBObject basicDBObject14 = builder10.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp15 = builder10.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray16 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList17 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList17, serverAddressArray16);
        builder10.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList17);
        java.lang.String str20 = builder10.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder10.dropCollection(true);
        java.lang.String str23 = builder10.mongoCollection;
        java.lang.String str24 = builder10.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = builder10.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder10.mongoSSLVerifyCertificate(true);
        com.mongodb.BasicDBObject basicDBObject28 = builder10.getmongoCollectionFilter();
        java.lang.String str29 = builder10.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder30.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder30.includeCollection("exclude_fields");
        boolean boolean35 = builder34.advancedTransformation;
        java.util.Set<java.lang.String> strSet36 = builder34.getexcludeFields();
        int int37 = builder34.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder34.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder40.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet43 = builder40.excludeFields;
        builder40.setmongoCollection("hi!");
        boolean boolean46 = builder40.importAllCollections;
        builder40.setconnectTimeout((int) (short) 10);
        builder40.mongoCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder51.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet54 = builder51.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder51.mongoSSLVerifyCertificate(true);
        boolean boolean57 = builder51.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder58.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet61 = builder58.excludeFields;
        com.mongodb.BasicDBObject basicDBObject62 = builder58.getmongoCollectionFilter();
        java.lang.String str63 = builder58.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray64 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList65 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList65, serverAddressArray64);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder58.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList65);
        java.lang.String str68 = builder58.mongoAdminPassword;
        java.lang.String[] strArray73 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        builder58.setincludeFields((java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder51.parentTypes((java.util.Set<java.lang.String>) strSet74);
        builder40.includeFields = strSet74;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder34.excludeFields((java.util.Set<java.lang.String>) strSet74);
        builder10.setexcludeFields((java.util.Set<java.lang.String>) strSet74);
        builder7.includeFields = strSet74;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNull(wildcardTimestamp15);
        org.junit.Assert.assertNotNull(serverAddressArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(basicDBObject28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(basicDBObject62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(serverAddressArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.script;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.getMongoServers();
        java.lang.String str17 = mongoDBRiverDefinition9.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet18 = mongoDBRiverDefinition9.excludeFields;
        org.elasticsearch.common.unit.TimeValue timeValue19 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.riverName;
        java.lang.String str14 = mongoDBRiverDefinition9.indexName;
        boolean boolean15 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str16 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean17 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean18 = mongoDBRiverDefinition9.advancedTransformation;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(false);
        builder12.riverName = "throttle_size";
        builder12.setmongoAdminUser("localhost");
        builder12.setimportAllCollections(true);
        builder12.setriverName("connect_timeout");
        builder12.disableIndexRefresh = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("db", "skip_initial_import");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?skip_initial_import?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getIncludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "include_fields" + "'", str12, "include_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.mongoUseSSL = false;
        builder2.setmongoLocalUser("drop_collection");
        builder2.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder2.socketTimeout((int) (short) 10);
        builder2.mongoUseSSL = true;
        builder2.riverIndexName = "advanced_transformation";
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.lang.String str3 = builder0.getmongoDb();
        boolean boolean4 = builder0.storeStatistics;
        builder0.mongoLocalUser = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder8.setmongoClientOptions(mongoClientOptions9);
        builder8.setmongoAdminPassword("drop_collection");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        boolean boolean10 = mongoDBRiverDefinition8.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition8.mongoOplogFilter;
        com.mongodb.MongoClientOptions mongoClientOptions12 = mongoDBRiverDefinition8.mongoClientOptions;
        java.lang.String str13 = mongoDBRiverDefinition8.getOPTIONS_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition8.getLOCAL_DB_FIELD();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition8.getExcludeFields();
        int int16 = mongoDBRiverDefinition8.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "options" + "'", str13, "options");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "local" + "'", str14, "local");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1000 + "'", int16 == 1000);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("throttle_size");
        builder14.setadvancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder14.mongoDb("exclude_fields");
        java.lang.String str19 = builder18.indexName;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp20 = builder18.initialTimestamp;
        builder18.mongoAdminUser = "host";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(wildcardTimestamp20);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("null.null", "exclude_fields", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?exclude_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder3.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet6 = builder3.excludeFields;
        com.mongodb.BasicDBObject basicDBObject7 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings8 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = riverSettings8.settings();
        org.elasticsearch.script.ScriptService scriptService10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("drop_collection", "", riverSettings8, scriptService10);
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition11.parentTypes;
        java.lang.String str13 = mongoDBRiverDefinition11.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean14 = mongoDBRiverDefinition11.isMongoSecondaryReadPreference();
        java.lang.String str15 = mongoDBRiverDefinition11.typeName;
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "concurrent_requests" + "'", str13, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "drop_collection" + "'", str15, "drop_collection");
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder15.mongoSecondaryReadPreference(false);
        java.lang.String str18 = builder15.getindexName();
        builder15.setmongoUseSSL(false);
        boolean boolean21 = builder15.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder15.socketTimeout(0);
        boolean boolean24 = builder23.importAllCollections;
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getRiverIndexName();
        java.lang.String str20 = mongoDBRiverDefinition9.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str21 = mongoDBRiverDefinition9.getIncludeCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "throttle_size" + "'", str17, "throttle_size");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "exclude_fields" + "'", str20, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        boolean boolean3 = builder0.getmongoSSLVerifyCertificate();
        java.lang.String str4 = builder0.getriverIndexName();
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoUseSSL(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoDb("");
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = builder10.getmongoServers();
        builder10.mongoLocalPassword = "include_collection";
        boolean boolean14 = builder10.skipInitialImport;
        builder10.throttleSize = ' ';
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.script("script");
        java.lang.String[] strArray39 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet40);
        java.lang.String str44 = builder43.getstatisticsIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.riverName("parent_types");
        builder43.mongoCollection = "bulk_timeout";
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder6.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet9 = builder6.excludeFields;
        com.mongodb.BasicDBObject basicDBObject10 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp11 = builder6.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray12 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList13 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList13, serverAddressArray12);
        builder6.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder2.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList13);
        builder2.mongoCollection = "servers";
        int int19 = builder2.throttleSize;
        builder2.throttleSize = 0;
        builder2.statisticsIndexName = "include_collection";
        builder2.storeStatistics = false;
        builder2.script = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder2.typeName("size");
        java.lang.String str30 = builder29.getstatisticsTypeName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNull(wildcardTimestamp11);
        org.junit.Assert.assertNotNull(serverAddressArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        builder0.setmongoAdminPassword("store_statistics");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.scriptType("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("throttle_size");
        com.mongodb.BasicDBObject basicDBObject15 = builder12.mongoOplogFilter;
        builder12.setmongoUseSSL(false);
        java.lang.String str18 = builder12.getstatisticsTypeName();
        builder12.importAllCollections = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder12.mongoDb("connect_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder12.mongoGridFS(false);
        java.lang.String str25 = builder24.riverIndexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "throttle_size" + "'", str18, "throttle_size");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminUser("ssl");
        int int16 = builder0.getconnectTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.includeCollection("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.storeStatistics(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder18.typeName("skip_initial_import");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str18 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "filter" + "'", str18, "filter");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_bulk_requests" + "'", str19, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "drop_collection" + "'", str20, "drop_collection");
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        builder0.mongoDb = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.disableIndexRefresh(true);
        builder0.mongoCollection = "script";
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder0.initialTimestamp;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(wildcardTimestamp22);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        java.util.Set<java.lang.String> strSet10 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.script("actions");
        java.lang.String str13 = builder9.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder9.disableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet19 = builder16.excludeFields;
        java.lang.String str20 = builder16.getmongoLocalPassword();
        com.mongodb.BasicDBObject basicDBObject21 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder9.mongoOplogFilter(basicDBObject21);
        java.lang.String str23 = builder22.mongoAdminUser;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(basicDBObject21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.riverName;
        java.lang.String str14 = mongoDBRiverDefinition9.indexName;
        java.lang.String str15 = mongoDBRiverDefinition9.getScript();
        java.lang.String str16 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = mongoDBRiverDefinition9.initialTimestamp;
        boolean boolean19 = mongoDBRiverDefinition9.importAllCollections;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "options" + "'", str16, "options");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk" + "'", str17, "bulk");
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.setstatisticsTypeName("ssl_verify_certificate");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoSSLVerifyCertificate(true);
        builder0.settypeName("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.scriptType("user");
        java.lang.String str14 = builder13.riverName;
        builder13.importAllCollections = true;
        builder13.setmongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        builder0.mongoUseSSL = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder0.build();
        boolean boolean6 = mongoDBRiverDefinition5.getstoreStatistics();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder0.getmongoClientOptions();
        builder0.riverName = "script_type";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        builder0.setmongoOplogFilter(basicDBObject17);
        boolean boolean19 = builder0.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoAdminPassword("user");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.importAllCollections(false);
        java.util.Set<java.lang.String> strSet24 = builder0.includeFields;
        java.lang.String str25 = builder0.mongoCollection;
        builder0.mongoAdminPassword = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder0.storeStatistics(false);
        com.mongodb.BasicDBObject basicDBObject30 = builder29.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder29.mongoSecondaryReadPreference(true);
        boolean boolean33 = builder32.mongoUseSSL;
        builder32.setmongoDb("connect_timeout");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("throttle_size", "user");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?user?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        boolean boolean11 = mongoDBRiverDefinition9.mongoUseSSL;
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str13 = mongoDBRiverDefinition9.indexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_timeout" + "'", str10, "bulk_timeout");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "null.initial_timestamp" + "'", str12, "null.initial_timestamp");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.getGRIDFS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject16 = mongoDBRiverDefinition9.getMongoOplogFilter();
        java.lang.String str17 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getFLUSH_INTERVAL_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        boolean boolean20 = mongoDBRiverDefinition9.getmongoSecondaryReadPreference();
        java.lang.String str21 = mongoDBRiverDefinition9.indexName;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gridfs" + "'", str14, "gridfs");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_requests" + "'", str15, "concurrent_requests");
        org.junit.Assert.assertNull(basicDBObject16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "include_fields" + "'", str17, "include_fields");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "flush_interval" + "'", str18, "flush_interval");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index" + "'", str19, "index");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getSTORE_STATISTICS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getINCLUDE_FIELDS_FIELD();
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str18 = mongoDBRiverDefinition9.getMongoAdminPassword();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "store_statistics" + "'", str15, "store_statistics");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "include_fields" + "'", str16, "include_fields");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder41.mongoUseSSL(false);
        builder43.dropCollection = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.statisticsTypeName("bulk_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder49.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet52 = builder49.excludeFields;
        com.mongodb.BasicDBObject basicDBObject53 = builder49.getmongoCollectionFilter();
        java.lang.String str54 = builder49.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder49.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList56);
        boolean boolean59 = builder58.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder60.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet63 = builder60.excludeFields;
        com.mongodb.BasicDBObject basicDBObject64 = builder60.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp65 = builder60.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray66 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList67 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList67, serverAddressArray66);
        builder60.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder58.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList67);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder48.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList67);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(basicDBObject53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNotNull(basicDBObject64);
        org.junit.Assert.assertNull(wildcardTimestamp65);
        org.junit.Assert.assertNotNull(serverAddressArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getTypeName();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        boolean boolean13 = mongoDBRiverDefinition9.isMongoSSLVerifyCertificate();
        java.lang.String str14 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        int int15 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str16 = mongoDBRiverDefinition9.getCONCURRENT_REQUESTS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "parent_types" + "'", str14, "parent_types");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "concurrent_requests" + "'", str16, "concurrent_requests");
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition9.excludeFields;
        java.lang.String str14 = mongoDBRiverDefinition9.getOPTIONS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.mongoAdminUser;
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition9.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition9.script;
        java.lang.String str18 = mongoDBRiverDefinition9.getDEFAULT_DB_HOST();
        boolean boolean19 = mongoDBRiverDefinition9.importAllCollections;
        boolean boolean20 = mongoDBRiverDefinition9.getmongoSSLVerifyCertificate();
        java.lang.String str21 = mongoDBRiverDefinition9.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "options" + "'", str14, "options");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "localhost" + "'", str18, "localhost");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ssl" + "'", str21, "ssl");
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getCOLLECTION_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition9.excludeFields;
        boolean boolean13 = mongoDBRiverDefinition9.getstoreStatistics();
        boolean boolean14 = mongoDBRiverDefinition9.getmongoGridFS();
        java.lang.String str15 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str18 = mongoDBRiverDefinition9.getSIZE_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "collection" + "'", str11, "collection");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "script" + "'", str15, "script");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "null.initial_timestamp" + "'", str17, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "size" + "'", str18, "size");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "script" + "'", str19, "script");
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.script;
        java.lang.String str14 = mongoDBRiverDefinition9.mongoAdminUser;
        java.lang.String str15 = mongoDBRiverDefinition9.getCONNECTION_TIMEOUT();
        java.lang.String str16 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getMongoCollection();
        boolean boolean18 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str19 = mongoDBRiverDefinition9.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.riverIndexName;
        java.lang.String str21 = mongoDBRiverDefinition9.getBULK_SIZE_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "connect_timeout" + "'", str15, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "filter" + "'", str16, "filter");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "include_collection" + "'", str19, "include_collection");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bulk_size" + "'", str21, "bulk_size");
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.mongoAdminUser;
        boolean boolean14 = mongoDBRiverDefinition9.isImportAllCollections();
        java.lang.String str15 = mongoDBRiverDefinition9.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        java.lang.String str17 = mongoDBRiverDefinition9.getBULK_TIMEOUT_FIELD();
        java.lang.String str18 = mongoDBRiverDefinition9.getFILTER_FIELD();
        java.lang.String str19 = mongoDBRiverDefinition9.mongoDb;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.initial_timestamp" + "'", str15, "null.initial_timestamp");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "admin" + "'", str16, "admin");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk_timeout" + "'", str17, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "filter" + "'", str18, "filter");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder12.typeName;
        builder12.setmongoSecondaryReadPreference(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder16.setmongoSecondaryReadPreference(false);
        boolean boolean19 = builder16.getmongoSSLVerifyCertificate();
        java.lang.String str20 = builder16.getriverIndexName();
        builder16.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder16.mongoUseSSL(true);
        builder16.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder16.script("bulk");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder29.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet32 = builder29.excludeFields;
        java.lang.String str33 = builder29.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.script("script");
        java.lang.String[] strArray68 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder36.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder28.parentTypes((java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder12.excludeFields((java.util.Set<java.lang.String>) strSet69);
        builder74.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder74.dropCollection(true);
        boolean boolean79 = builder74.getdropCollection();
        java.util.Set<java.lang.String> strSet80 = builder74.getparentTypes();
        builder74.dropCollection = true;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(strSet80);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("secondary_read_preference");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?secondary_read_preference?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.script("script");
        java.lang.String[] strArray41 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder2.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        java.lang.String str46 = builder2.mongoDb;
        java.lang.String str47 = builder2.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder48.setmongoSecondaryReadPreference(false);
        boolean boolean51 = builder48.getmongoSSLVerifyCertificate();
        java.lang.String str52 = builder48.getriverIndexName();
        builder48.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder48.mongoUseSSL(true);
        builder48.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder48.script("bulk");
        com.mongodb.BasicDBObject basicDBObject61 = builder48.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder2.mongoOplogFilter(basicDBObject61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        int int18 = mongoDBRiverDefinition9.throttleSize;
        java.lang.String str19 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str20 = mongoDBRiverDefinition9.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "concurrent_bulk_requests" + "'", str19, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "parent_types" + "'", str20, "parent_types");
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        builder0.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoAdminPassword("hi!");
        boolean boolean10 = builder9.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder9.statisticsIndexName("script_type");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        boolean boolean13 = builder12.mongoSSLVerifyCertificate;
        java.lang.String[] strArray31 = new java.lang.String[] { "connect_timeout", "script_type", "collection", "secondary_read_preference", "throttle_size", "host", "actions", "drop_collection", "name", "initial_timestamp", "size", "script_type", "throttle_size", "hi!", "advanced_transformation", "name", "concurrent_requests" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder12.includeFields((java.util.Set<java.lang.String>) strSet32);
        builder12.includeCollection = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder37.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet40 = builder37.excludeFields;
        com.mongodb.BasicDBObject basicDBObject41 = builder37.getmongoCollectionFilter();
        java.lang.String str42 = builder37.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray43 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList44 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList44, serverAddressArray43);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder37.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList44);
        boolean boolean47 = builder46.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder48.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet51 = builder48.excludeFields;
        com.mongodb.BasicDBObject basicDBObject52 = builder48.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp53 = builder48.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray54 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList55 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList55, serverAddressArray54);
        builder48.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder46.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder59.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet62 = builder59.excludeFields;
        com.mongodb.BasicDBObject basicDBObject63 = builder59.getmongoCollectionFilter();
        java.lang.String str64 = builder59.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray65 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList66 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList66, serverAddressArray65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder59.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList66);
        java.lang.String str69 = builder59.mongoAdminPassword;
        java.lang.String[] strArray74 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder59.setincludeFields((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder46.excludeFields((java.util.Set<java.lang.String>) strSet75);
        java.lang.String str79 = builder78.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = builder78.importAllCollections(true);
        java.lang.String str82 = builder81.typeName;
        builder81.mongoGridFS = true;
        boolean boolean85 = builder81.advancedTransformation;
        com.mongodb.BasicDBObject basicDBObject86 = builder81.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder12.mongoOplogFilter(basicDBObject86);
        int int88 = builder87.getthrottleSize();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(basicDBObject41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(serverAddressArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(basicDBObject52);
        org.junit.Assert.assertNull(wildcardTimestamp53);
        org.junit.Assert.assertNotNull(serverAddressArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(serverAddressArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(basicDBObject86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        java.lang.String str4 = builder0.getmongoLocalPassword();
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminUser("");
        builder8.mongoCollection = "hi!";
        builder8.setmongoAdminPassword("options");
        builder8.includeCollection = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder8.dropCollection(true);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getCREDENTIALS_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getMongoLocalPassword();
        org.elasticsearch.common.unit.TimeValue timeValue17 = mongoDBRiverDefinition9.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "concurrent_bulk_requests" + "'", str12, "concurrent_bulk_requests");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "credentials" + "'", str14, "credentials");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_bulk_requests" + "'", str15, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(timeValue17);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        boolean boolean7 = builder2.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = builder2.build();
        java.lang.String str9 = mongoDBRiverDefinition8.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition8.getMongoLocalPassword();
        boolean boolean11 = mongoDBRiverDefinition8.getmongoGridFS();
        boolean boolean12 = mongoDBRiverDefinition8.skipInitialImport;
        java.lang.String str13 = mongoDBRiverDefinition8.statisticsTypeName;
        java.lang.String str14 = mongoDBRiverDefinition8.mongoDb;
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition8.getMongoClientOptions();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition8.mongoServers;
        java.lang.String str17 = mongoDBRiverDefinition8.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "initial_timestamp" + "'", str17, "initial_timestamp");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder2.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet5 = builder2.excludeFields;
        com.mongodb.BasicDBObject basicDBObject6 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp7 = builder2.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray8 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList9 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList9, serverAddressArray8);
        builder2.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList9);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp18 = builder13.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder13.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder1.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.mongoClientOptions(mongoClientOptions24);
        int int26 = builder23.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder27.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet30 = builder27.excludeFields;
        com.mongodb.BasicDBObject basicDBObject31 = builder27.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp32 = builder27.initialTimestamp;
        builder27.mongoDb = "initial_timestamp";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder27.mongoAdminPassword("hi!");
        boolean boolean37 = builder36.getmongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject38 = builder36.getmongoOplogFilter();
        builder36.mongoSecondaryReadPreference = false;
        java.lang.String str41 = builder36.getriverName();
        com.mongodb.BasicDBObject basicDBObject42 = builder36.mongoCollectionFilter;
        builder23.setmongoCollectionFilter(basicDBObject42);
        org.elasticsearch.river.RiverSettings riverSettings44 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject42);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(wildcardTimestamp7);
        org.junit.Assert.assertNotNull(serverAddressArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(wildcardTimestamp18);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(basicDBObject31);
        org.junit.Assert.assertNull(wildcardTimestamp32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(basicDBObject38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(basicDBObject42);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getIndexName();
        java.lang.String str12 = mongoDBRiverDefinition9.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition9.getStatisticsTypeName();
        java.lang.String str14 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition9.getTHROTTLE_SIZE_FIELD();
        int int16 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        boolean boolean17 = mongoDBRiverDefinition9.getimportAllCollections();
        java.lang.String str18 = mongoDBRiverDefinition9.getRiverName();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "host" + "'", str14, "host");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "throttle_size" + "'", str15, "throttle_size");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27017 + "'", int16 == 27017);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder1.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet4 = builder1.excludeFields;
        com.mongodb.BasicDBObject basicDBObject5 = builder1.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = builder1.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder1.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList8);
        builder0.mongoLocalUser = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.advancedTransformation(false);
        com.mongodb.BasicDBObject basicDBObject16 = builder15.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder15.scriptType("secondary_read_preference");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder18.script("index");
        boolean boolean21 = builder18.getdisableIndexRefresh();
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder2.typeName("connect_timeout");
        boolean boolean6 = builder2.mongoGridFS;
        java.lang.String str7 = builder2.mongoDb;
        builder2.setmongoLocalUser("admin");
        builder2.riverName = "null.initial_timestamp";
        java.lang.String str12 = builder2.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder13.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet16 = builder13.excludeFields;
        com.mongodb.BasicDBObject basicDBObject17 = builder13.getmongoCollectionFilter();
        java.lang.String str18 = builder13.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder13.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        java.lang.String str23 = builder13.mongoAdminPassword;
        java.lang.String[] strArray28 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        builder13.setincludeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder2.includeFields((java.util.Set<java.lang.String>) strSet29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.dropCollection(false);
        java.util.Set<java.lang.String> strSet35 = builder34.getexcludeFields();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "connect_timeout" + "'", str12, "connect_timeout");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strSet35);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.lang.String str15 = mongoDBRiverDefinition9.getDISABLE_INDEX_REFRESH_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition9.getPASSWORD_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions17 = mongoDBRiverDefinition9.mongoClientOptions;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disable_index_refresh" + "'", str15, "disable_index_refresh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "password" + "'", str16, "password");
        org.junit.Assert.assertNull(mongoClientOptions17);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        builder0.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder8.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet11 = builder8.excludeFields;
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.mongoCollectionFilter(basicDBObject12);
        java.lang.String str14 = builder0.getstatisticsIndexName();
        java.lang.String str15 = builder0.getmongoLocalPassword();
        boolean boolean16 = builder0.mongoSSLVerifyCertificate;
        com.mongodb.BasicDBObject basicDBObject17 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder18.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet21 = builder18.excludeFields;
        com.mongodb.BasicDBObject basicDBObject22 = builder18.getmongoCollectionFilter();
        java.lang.String str23 = builder18.mongoLocalUser;
        builder18.setscript("drop_collection");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder26.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet29 = builder26.excludeFields;
        com.mongodb.BasicDBObject basicDBObject30 = builder26.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder18.mongoCollectionFilter(basicDBObject30);
        builder31.throttleSize = '#';
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.importAllCollections(true);
        boolean boolean36 = builder31.importAllCollections;
        builder31.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder39.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet42 = builder39.excludeFields;
        java.lang.String str43 = builder39.getmongoLocalPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder44.script("script");
        java.lang.String[] strArray78 = new java.lang.String[] { "include_collection", "host", "hi!", "drop_collection", "size", "filter", "bulk_timeout", "drop_collection", "concurrent_bulk_requests", "servers", "localhost", "store_statistics", "script", "secondary_read_preference", "throttle_size", "parent_types", "db", "type", "admin", "filter", "servers", "user", "secondary_read_preference", "connect_timeout", "local", "host", "drop_collection", "user", "password", "ssl_verify_certificate", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        builder46.setparentTypes((java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = builder39.parentTypes((java.util.Set<java.lang.String>) strSet79);
        builder31.parentTypes = strSet79;
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet79);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(basicDBObject30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        boolean boolean11 = mongoDBRiverDefinition9.mongoGridFS;
        boolean boolean12 = mongoDBRiverDefinition9.advancedTransformation;
        java.lang.String str13 = mongoDBRiverDefinition9.getADMIN_DB_FIELD();
        boolean boolean14 = mongoDBRiverDefinition9.getdisableIndexRefresh();
        boolean boolean15 = mongoDBRiverDefinition9.isMongoSecondaryReadPreference();
        java.lang.String str16 = mongoDBRiverDefinition9.mongoCollection;
        java.util.Set<java.lang.String> strSet17 = mongoDBRiverDefinition9.includeFields;
        java.lang.String str18 = mongoDBRiverDefinition9.getINDEX_OBJECT();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "admin" + "'", str13, "admin");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "initial_timestamp" + "'", str16, "initial_timestamp");
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index" + "'", str18, "index");
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder1.script("script");
        com.mongodb.BasicDBObject basicDBObject4 = builder3.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder3.typeName("connect_timeout");
        boolean boolean7 = builder3.mongoGridFS;
        boolean boolean8 = builder3.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = builder3.build();
        java.lang.String str10 = mongoDBRiverDefinition9.mongoDb;
        boolean boolean11 = mongoDBRiverDefinition9.mongoUseSSL;
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition9.mongoOplogFilter;
        com.mongodb.BasicDBObject basicDBObject13 = mongoDBRiverDefinition9.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.elasticsearch.common.settings.Settings settings15 = riverSettings14.globalSettings();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(basicDBObject13);
        org.junit.Assert.assertNull(settings15);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = builder0.build();
        boolean boolean16 = builder0.mongoSSLVerifyCertificate;
        java.lang.String str17 = builder0.getindexName();
        boolean boolean18 = builder0.getmongoSSLVerifyCertificate();
        java.util.Set<java.lang.String> strSet19 = builder0.getparentTypes();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = builder0.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        java.lang.String str10 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.dropCollection(true);
        java.lang.String str13 = builder0.mongoCollection;
        java.lang.String str14 = builder0.includeCollection;
        builder0.riverName = "ssl";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoAdminPassword("concurrent_requests");
        builder18.settypeName("disable_index_refresh");
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        com.mongodb.BasicDBObject basicDBObject4 = builder0.getmongoCollectionFilter();
        java.lang.String str5 = builder0.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray6 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList7 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList7, serverAddressArray6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList7);
        boolean boolean10 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder11.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet14 = builder11.excludeFields;
        com.mongodb.BasicDBObject basicDBObject15 = builder11.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp16 = builder11.initialTimestamp;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder9.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder22.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet25 = builder22.excludeFields;
        com.mongodb.BasicDBObject basicDBObject26 = builder22.getmongoCollectionFilter();
        java.lang.String str27 = builder22.mongoLocalUser;
        com.mongodb.ServerAddress[] serverAddressArray28 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList29 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList29, serverAddressArray28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.mongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList29);
        java.lang.String str32 = builder22.mongoAdminPassword;
        java.lang.String[] strArray37 = new java.lang.String[] { "admin", "script_type", "credentials", "password" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        builder22.setincludeFields((java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder9.excludeFields((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str42 = builder41.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder41.importAllCollections(true);
        java.lang.String str45 = builder44.typeName;
        builder44.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.statisticsTypeName("");
        java.lang.String str50 = builder49.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder49.mongoDb("advanced_transformation");
        java.lang.String str53 = builder52.getscript();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(basicDBObject4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(serverAddressArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(wildcardTimestamp16);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(serverAddressArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = builder0.script("script");
        com.mongodb.BasicDBObject basicDBObject3 = builder2.getmongoCollectionFilter();
        builder2.setmongoLocalPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.connectTimeout((-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder7.mongoGridFS(false);
        boolean boolean10 = builder7.mongoSSLVerifyCertificate;
        builder7.disableIndexRefresh = true;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(basicDBObject3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet3 = builder0.excludeFields;
        builder0.setmongoCollection("initial_timestamp");
        boolean boolean6 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str10 = mongoDBRiverDefinition9.includeCollection;
        java.lang.String str11 = mongoDBRiverDefinition9.getHOST_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition9.getMongoLocalPassword();
        java.lang.String str13 = mongoDBRiverDefinition9.scriptType;
        org.elasticsearch.common.logging.ESLogger eSLogger14 = mongoDBRiverDefinition9.getlogger();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition9.getIncludeFields();
        org.elasticsearch.common.logging.ESLogger eSLogger16 = mongoDBRiverDefinition9.getlogger();
        int int17 = mongoDBRiverDefinition9.getDEFAULT_DB_PORT();
        int int18 = mongoDBRiverDefinition9.connectTimeout;
        int int19 = mongoDBRiverDefinition9.socketTimeout;
        java.lang.String str20 = mongoDBRiverDefinition9.getIndexName();
        int int21 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean22 = mongoDBRiverDefinition9.isDropCollection();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "host" + "'", str11, "host");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(eSLogger14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(eSLogger16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27017 + "'", int17 == 27017);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }
}

