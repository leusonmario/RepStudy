import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        boolean boolean13 = mongoDBRiverDefinition12.mongoGridFS;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = builder32.getmongoCollectionFilter();
        java.lang.String str39 = builder32.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray40 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList41 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList41, serverAddressArray40);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList41);
        java.lang.String str44 = builder32.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        builder32.mongoClientOptions = mongoClientOptions45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder48.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = builder48.getmongoCollectionFilter();
        builder48.setskipInitialImport(false);
        java.lang.String str57 = builder48.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder48.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject60 = builder59.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder32.mongoCollectionFilter(basicDBObject60);
        java.lang.Object obj62 = docScoreSearchScript0.unwrap((java.lang.Object) builder32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(serverAddressArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript4.setNextScore((float) (byte) 1);
        java.lang.Object obj8 = docScoreSearchScript4.unwrap((java.lang.Object) (-1));
        java.lang.Object obj10 = docScoreSearchScript4.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = builder14.getmongoCollectionFilter();
        builder13.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) basicDBObject33);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) docScoreSearchScript4);
        org.elasticsearch.common.settings.Settings settings42 = null;
        org.elasticsearch.common.settings.Settings settings43 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory44 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings45 = null;
        org.elasticsearch.common.settings.Settings settings46 = null;
        org.elasticsearch.common.settings.Settings settings47 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder48.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = builder48.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings55 = new org.elasticsearch.river.RiverSettings(settings47, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings56 = new org.elasticsearch.river.RiverSettings(settings46, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings57 = new org.elasticsearch.river.RiverSettings(settings45, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.script.ExecutableScript executableScript58 = docScoreNativeScriptFactory44.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings59 = new org.elasticsearch.river.RiverSettings(settings43, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        org.elasticsearch.river.RiverSettings riverSettings60 = new org.elasticsearch.river.RiverSettings(settings42, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject54);
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) basicDBObject54);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext62 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-1) + "'", obj8, (-1));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "bulk" + "'", obj10, "bulk");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertNotNull(executableScript58);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        java.lang.String str22 = builder21.mongoLocalUser;
        builder21.setdisableIndexRefresh(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder21.importAllCollections(true);
        builder26.setconnectTimeout(1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.typeName;
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder29.mongoCollectionFilter = basicDBObject31;
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder29.mongoOplogFilter = basicDBObject33;
        builder29.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = builder29.mongoServers;
        java.lang.String[] strArray41 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet42);
        builder26.setincludeFields((java.util.Set<java.lang.String>) strSet42);
        builder26.indexName = "skip_initial_import";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.lang.String str12 = builder11.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder11.mongoGridFS(true);
        builder11.storeStatistics = true;
        boolean boolean17 = builder11.getadvancedTransformation();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str9 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.connectTimeout(1);
        builder13.skipInitialImport = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition10.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition10.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition10.isMongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition10.getdisableIndexRefresh();
        int int16 = mongoDBRiverDefinition10.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition10.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.mongoGridFS;
        java.lang.String str7 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str8 = mongoDBRiverDefinition1.statisticsTypeName;
        int int9 = mongoDBRiverDefinition1.connectTimeout;
        java.lang.String str10 = mongoDBRiverDefinition1.getSTORE_STATISTICS_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "store_statistics" + "'", str10, "store_statistics");
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str7 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.includeCollection;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str13 = mongoDBRiverDefinition12.getBULK_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.lang.String str13 = mongoDBRiverDefinition12.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet14 = mongoDBRiverDefinition12.excludeFields;
        java.lang.String str15 = mongoDBRiverDefinition12.mongoAdminUser;
        docScoreSearchScript0.setNextVar("exclude_fields", (java.lang.Object) mongoDBRiverDefinition12);
        java.lang.Object obj18 = docScoreSearchScript0.unwrap((java.lang.Object) "collection");
        org.apache.lucene.search.Scorer scorer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "collection" + "'", obj18, "collection");
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition2.includeFields;
        java.lang.String str8 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = builder11.getmongoCollectionFilter();
        java.lang.String str18 = builder11.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        java.lang.String str23 = builder11.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        builder11.mongoClientOptions = mongoClientOptions24;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder26.mongoAdminPassword("db");
        builder31.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.connectTimeout(1);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory36 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder39.setmongoOplogFilter(basicDBObject43);
        com.mongodb.BasicDBObject basicDBObject45 = builder39.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings46 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.script.ExecutableScript executableScript48 = docScoreNativeScriptFactory36.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder31.mongoCollectionFilter(basicDBObject45);
        builder11.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder0.mongoCollectionFilter(basicDBObject45);
        builder0.setstoreStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = builder0.getstatisticsTypeName();
        builder0.setstatisticsTypeName("password");
        java.lang.String str5 = builder0.getstatisticsIndexName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp8 = mongoDBRiverDefinition2.getInitialTimestamp();
        boolean boolean9 = mongoDBRiverDefinition2.getdropCollection();
        java.lang.String str10 = mongoDBRiverDefinition2.getStatisticsTypeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(wildcardTimestamp8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str9 = mongoDBRiverDefinition2.statisticsIndexName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.mongoOplogFilter = basicDBObject15;
        builder11.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder11.mongoServers;
        java.lang.String[] strArray23 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder11.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        builder8.parentTypes = strSet24;
        builder0.excludeFields = strSet24;
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str32 = mongoDBRiverDefinition31.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "parent_types" + "'", str32, "parent_types");
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.lang.String str12 = builder8.getmongoCollection();
        builder8.dropCollection = false;
        builder8.mongoLocalUser = "local";
        org.bson.types.Binary binary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder8.initialTimestamp(binary17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.statisticsTypeName("bulk_size");
        builder9.includeCollection = "port";
        builder9.mongoAdminPassword = "localhost";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.Set<java.lang.String> strSet20 = builder18.includeFields;
        java.lang.String str21 = builder18.getstatisticsIndexName();
        builder18.setsocketTimeout(10);
        builder18.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder18.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder30);
        java.util.Set<java.lang.String> strSet32 = builder30.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder30.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder30.setmongoOplogFilter(basicDBObject34);
        com.mongodb.BasicDBObject basicDBObject36 = builder30.getmongoCollectionFilter();
        builder29.mongoCollectionFilter = basicDBObject36;
        org.elasticsearch.river.RiverSettings riverSettings38 = new org.elasticsearch.river.RiverSettings(settings28, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder18.mongoCollectionFilter(basicDBObject36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder9.mongoOplogFilter(basicDBObject36);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(basicDBObject36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition2.includeFields;
        boolean boolean8 = mongoDBRiverDefinition2.isStoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.storeStatistics(true);
        builder66.settypeName("type");
        builder66.mongoLocalPassword = "localhost";
        boolean boolean73 = builder66.skipInitialImport;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder66.storeStatistics(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str9 = mongoDBRiverDefinition2.getTYPE_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_bulk_requests" + "'", str7, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript4.setNextScore((float) (byte) 1);
        java.lang.Object obj8 = docScoreSearchScript4.unwrap((java.lang.Object) (-1));
        java.lang.Object obj10 = docScoreSearchScript4.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = builder14.getmongoCollectionFilter();
        builder13.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) basicDBObject33);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) docScoreSearchScript4);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext41 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-1) + "'", obj8, (-1));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "bulk" + "'", obj10, "bulk");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript38);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition1.getlogger();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNotNull(eSLogger7);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        boolean boolean9 = builder0.mongoSecondaryReadPreference;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder10.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder10.mongoDb("secondary_read_preference");
        java.lang.String str17 = builder10.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder10.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        java.lang.String str24 = builder20.mongoAdminUser;
        java.lang.String str25 = builder20.getriverName();
        builder20.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder20.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder20.dropCollection(false);
        builder20.setmongoLocalPassword("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.util.Set<java.lang.String> strSet36 = builder34.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder34.setmongoOplogFilter(basicDBObject38);
        com.mongodb.BasicDBObject basicDBObject40 = builder34.getmongoCollectionFilter();
        builder34.setskipInitialImport(false);
        builder34.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.typeName;
        com.mongodb.BasicDBObject basicDBObject47 = null;
        builder45.mongoCollectionFilter = basicDBObject47;
        java.lang.String str49 = builder45.mongoAdminUser;
        builder45.disableIndexRefresh = false;
        java.lang.String str52 = builder45.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str54 = builder53.typeName;
        com.mongodb.BasicDBObject basicDBObject55 = null;
        builder53.mongoCollectionFilter = basicDBObject55;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder53.mongoUseSSL(true);
        java.lang.String[] strArray68 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        builder58.setparentTypes((java.util.Set<java.lang.String>) strSet69);
        builder45.parentTypes = strSet69;
        builder34.includeFields = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder20.includeFields((java.util.Set<java.lang.String>) strSet69);
        builder19.includeFields = strSet69;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder0.excludeFields((java.util.Set<java.lang.String>) strSet69);
        boolean boolean77 = builder76.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bulk_size" + "'", str17, "bulk_size");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.riverName("");
        boolean boolean47 = builder46.getmongoSecondaryReadPreference();
        boolean boolean48 = builder46.advancedTransformation;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        java.lang.String str4 = builder0.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject5 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        builder11.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.connectTimeout(1);
        java.util.Set<java.lang.String> strSet16 = builder15.parentTypes;
        builder15.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.typeName;
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder19.mongoCollectionFilter = basicDBObject21;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder19.mongoOplogFilter = basicDBObject23;
        builder19.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList27 = builder19.mongoServers;
        java.lang.String[] strArray31 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        builder19.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        builder15.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet32);
        int int37 = builder0.getsocketTimeout();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(basicDBObject5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(serverAddressList27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript4.setNextScore((float) (byte) 1);
        java.lang.Object obj8 = docScoreSearchScript4.unwrap((java.lang.Object) (-1));
        java.lang.Object obj10 = docScoreSearchScript4.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = builder14.getmongoCollectionFilter();
        builder13.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) basicDBObject33);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) docScoreSearchScript4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.mongoUseSSL(true);
        builder41.connectTimeout = (byte) -1;
        builder41.setsocketTimeout((int) (short) 1);
        java.lang.String str51 = builder41.getstatisticsTypeName();
        java.lang.String str52 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.Object obj54 = docScoreSearchScript0.unwrap((java.lang.Object) builder41);
        java.lang.String str55 = builder41.getstatisticsIndexName();
        boolean boolean56 = builder41.getmongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-1) + "'", obj8, (-1));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "bulk" + "'", obj10, "bulk");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoCollection();
        java.lang.String str7 = mongoDBRiverDefinition2.riverIndexName;
        int int8 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getTHROTTLE_SIZE_FIELD();
        int int5 = mongoDBRiverDefinition3.getConnectTimeout();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "throttle_size" + "'", str4, "throttle_size");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        builder0.disableIndexRefresh = false;
        builder0.setadvancedTransformation(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        java.lang.String str22 = builder21.mongoLocalUser;
        builder21.setdisableIndexRefresh(true);
        builder21.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp27 = builder21.getinitialTimestamp();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardTimestamp27);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean8 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("local");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?local?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        int int5 = mongoDBRiverDefinition1.socketTimeout;
        boolean boolean6 = mongoDBRiverDefinition1.skipInitialImport;
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition5.getMongoServers();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str8 = mongoDBRiverDefinition5.mongoDb;
        java.lang.String str9 = mongoDBRiverDefinition5.getNAME_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "name" + "'", str9, "name");
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.skipInitialImport(false);
        boolean boolean6 = builder0.mongoSSLVerifyCertificate;
        org.bson.types.BSONTimestamp bSONTimestamp7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.initialTimestamp(bSONTimestamp7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = builder0.includeCollection;
        builder0.mongoLocalUser = "name";
        int int11 = builder0.connectTimeout;
        java.lang.Class<?> wildcardClass12 = builder0.getClass();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder23.setmongoOplogFilter(basicDBObject27);
        boolean boolean29 = builder23.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.socketTimeout((int) ' ');
        java.lang.String str32 = builder31.mongoCollection;
        int int33 = builder31.throttleSize;
        java.lang.Object obj34 = docScoreSearchScript0.unwrap((java.lang.Object) builder31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean20 = builder17.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str22 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) mongoDBRiverDefinition21);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getMongoAdminUser();
        java.lang.String str12 = mongoDBRiverDefinition10.getSCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = builder32.getmongoCollectionFilter();
        builder32.setskipInitialImport(false);
        java.lang.String str41 = builder32.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder32.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject44 = builder43.mongoCollectionFilter;
        docScoreSearchScript0.setNextVar("throttle_size", (java.lang.Object) builder43);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext46 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(basicDBObject44);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.setmongoOplogFilter(basicDBObject15);
        boolean boolean17 = builder11.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet20 = builder19.excludeFields;
        builder19.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject25 = builder19.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        java.lang.String str30 = builder26.mongoAdminUser;
        builder26.disableIndexRefresh = false;
        java.lang.String str33 = builder26.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder26.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder35.setmongoOplogFilter(basicDBObject39);
        boolean boolean41 = builder35.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray42 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList43 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList43, serverAddressArray42);
        builder35.mongoServers = serverAddressList43;
        java.lang.String str46 = builder35.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str48 = builder47.typeName;
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder47.mongoCollectionFilter = basicDBObject49;
        java.lang.String str51 = builder47.mongoAdminUser;
        builder47.disableIndexRefresh = false;
        java.lang.String str54 = builder47.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.typeName;
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder55.mongoCollectionFilter = basicDBObject57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder55.mongoUseSSL(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder60.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder47.parentTypes = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet71);
        builder26.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder0.includeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder79);
        java.util.Set<java.lang.String> strSet81 = builder79.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions82 = builder79.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject83 = null;
        builder79.setmongoOplogFilter(basicDBObject83);
        boolean boolean85 = builder79.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray86 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList87 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList87, serverAddressArray86);
        builder79.mongoServers = serverAddressList87;
        builder0.mongoServers = serverAddressList87;
        int int91 = builder0.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(strSet81);
        org.junit.Assert.assertNull(mongoClientOptions82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(serverAddressArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("connect_timeout", "actions", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?actions?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "exclude_fields" + "'", str5, "exclude_fields");
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.storeStatistics(false);
        int int9 = builder8.getsocketTimeout();
        builder8.statisticsIndexName = "index";
        builder8.setmongoLocalUser("gridfs");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = builder0.mongoCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        java.lang.String str9 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getHOST_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gridfs" + "'", str9, "gridfs");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "host" + "'", str10, "host");
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        boolean boolean9 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet10 = builder8.getincludeFields();
        builder8.advancedTransformation = true;
        builder8.setriverIndexName("db");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.importAllCollections(false);
        builder0.includeCollection = "";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.riverIndexName("advanced_transformation");
        boolean boolean10 = builder9.getmongoSecondaryReadPreference();
        java.util.Set<java.lang.String> strSet11 = builder9.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        java.lang.String str11 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(false);
        boolean boolean14 = builder13.advancedTransformation;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        boolean boolean10 = builder0.disableIndexRefresh;
        java.lang.String str11 = builder0.statisticsIndexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        builder0.mongoSSLVerifyCertificate = false;
        boolean boolean12 = builder0.getadvancedTransformation();
        java.lang.String str13 = builder0.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript4.setNextScore((float) (byte) 1);
        java.lang.Object obj8 = docScoreSearchScript4.unwrap((java.lang.Object) (-1));
        java.lang.Object obj10 = docScoreSearchScript4.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = builder14.getmongoCollectionFilter();
        builder13.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) basicDBObject33);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) docScoreSearchScript4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder41.mongoOplogFilter = basicDBObject45;
        builder41.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder41.typeName("secondary_read_preference");
        boolean boolean51 = builder50.skipInitialImport;
        java.lang.String str52 = builder50.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder50.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder54);
        boolean boolean56 = builder54.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.util.Set<java.lang.String> strSet60 = builder58.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject62 = null;
        builder58.setmongoOplogFilter(basicDBObject62);
        com.mongodb.BasicDBObject basicDBObject64 = builder58.getmongoCollectionFilter();
        builder57.mongoCollectionFilter = basicDBObject64;
        builder54.mongoCollectionFilter = basicDBObject64;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextSource((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-1) + "'", obj8, (-1));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "bulk" + "'", obj10, "bulk");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNull(mongoClientOptions61);
        org.junit.Assert.assertNotNull(basicDBObject64);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("options");
        java.lang.String str18 = builder17.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        java.util.Set<java.lang.String> strSet8 = builder5.parentTypes;
        builder5.setmongoLocalUser("concurrent_bulk_requests");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        int int15 = mongoDBRiverDefinition14.getThrottleSize();
        boolean boolean16 = mongoDBRiverDefinition14.mongoSSLVerifyCertificate;
        java.lang.String str17 = mongoDBRiverDefinition14.getNAME_FIELD();
        boolean boolean18 = mongoDBRiverDefinition14.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "name" + "'", str17, "name");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.isAdvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_requests" + "'", str6, "concurrent_requests");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        boolean boolean6 = mongoDBRiverDefinition2.isMongoUseSSL();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getskipInitialImport();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl_verify_certificate" + "'", str7, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str9 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str10 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getMongoDb();
        boolean boolean12 = mongoDBRiverDefinition2.mongoGridFS;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getCONCURRENT_BULK_REQUESTS_FIELD();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        org.elasticsearch.common.logging.ESLogger eSLogger7 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str8 = mongoDBRiverDefinition2.getDB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoDb;
        java.lang.String str10 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNotNull(eSLogger7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "db" + "'", str8, "db");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk_size" + "'", str10, "bulk_size");
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder13.mongoCollection("ssl");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder13.mongoDb("connect_timeout");
        java.lang.String str22 = builder21.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("name", "drop_collection", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?drop_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str11 = mongoDBRiverDefinition10.getCONNECTION_TIMEOUT();
        java.lang.String str12 = mongoDBRiverDefinition10.getCREDENTIALS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject14 = mongoDBRiverDefinition10.getMongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject14;
        builder0.setmongoSSLVerifyCertificate(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "connect_timeout" + "'", str11, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "credentials" + "'", str12, "credentials");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "localhost" + "'", str13, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject14);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = builder0.getmongoCollection();
        boolean boolean12 = builder0.getstoreStatistics();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = builder0.build();
        java.lang.String str14 = mongoDBRiverDefinition13.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.connectTimeout = (short) 1;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition2.initialTimestamp;
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str7 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str8 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        int int9 = mongoDBRiverDefinition2.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str11 = mongoDBRiverDefinition2.typeName;
        java.lang.String str12 = mongoDBRiverDefinition2.getBULK_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "socket_timeout" + "'", str10, "socket_timeout");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bulk" + "'", str12, "bulk");
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setriverName("");
        builder0.setmongoAdminUser("bulk_size");
        boolean boolean8 = builder0.getskipInitialImport();
        int int9 = builder0.getsocketTimeout();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str10 = mongoDBRiverDefinition1.script;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setstoreStatistics(false);
        builder0.mongoLocalPassword = "hi!";
        builder0.mongoUseSSL = true;
        builder0.setmongoDb("advanced_transformation");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str8 = builder0.includeCollection;
        builder0.mongoLocalUser = "name";
        com.mongodb.BasicDBObject basicDBObject11 = builder0.getmongoOplogFilter();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long33 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        boolean boolean22 = builder21.getimportAllCollections();
        builder21.mongoLocalUser = "hi!";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder0.setmongoClientOptions(mongoClientOptions9);
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        builder0.mongoDb = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setimportAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.throttleSize((int) (byte) 1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject11);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean5 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "port" + "'", str3, "port");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "secondary_read_preference" + "'", str6, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getSKIP_INITIAL_IMPORT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition10.mongoSSLVerifyCertificate;
        java.lang.String str13 = mongoDBRiverDefinition10.getFILTER_FIELD();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp14 = mongoDBRiverDefinition10.initialTimestamp;
        boolean boolean15 = mongoDBRiverDefinition10.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "skip_initial_import" + "'", str11, "skip_initial_import");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "filter" + "'", str13, "filter");
        org.junit.Assert.assertNull(wildcardTimestamp14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder5.setmongoAdminUser("hi!");
        boolean boolean8 = builder5.disableIndexRefresh;
        int int9 = builder5.getthrottleSize();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        builder5.mongoClientOptions = mongoClientOptions10;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        docScoreSearchScript0.setNextScore((float) 1);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext7 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setriverIndexName("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.typeName("skip_initial_import");
        java.lang.String str11 = builder10.mongoDb;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str6 = mongoDBRiverDefinition1.getMongoAdminPassword();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str12 = builder11.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition1.getMongoClientOptions();
        java.lang.String str7 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue9 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertNotNull(byteSizeValue9);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setconnectTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.mongoClientOptions;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder0.mongoClientOptions;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNull(mongoClientOptions14);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        java.lang.String str17 = builder14.getstatisticsIndexName();
        builder14.setsocketTimeout(10);
        builder14.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder14.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder26);
        java.util.Set<java.lang.String> strSet28 = builder26.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder26.setmongoOplogFilter(basicDBObject30);
        com.mongodb.BasicDBObject basicDBObject32 = builder26.getmongoCollectionFilter();
        builder25.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.RiverSettings riverSettings34 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder14.mongoCollectionFilter(basicDBObject32);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp36 = builder14.getinitialTimestamp();
        boolean boolean37 = builder14.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.typeName;
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder38.mongoCollectionFilter = basicDBObject40;
        java.lang.String str42 = builder38.mongoAdminUser;
        java.lang.String str43 = builder38.getriverName();
        builder38.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder38.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet50 = builder38.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition52 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder51);
        int int53 = mongoDBRiverDefinition52.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = mongoDBRiverDefinition52.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder38.mongoServers(serverAddressList54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder14.mongoServers(serverAddressList54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder56.mongoSSLVerifyCertificate(false);
        int int59 = builder56.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str61 = builder60.mongoCollection;
        builder60.setmongoUseSSL(false);
        org.elasticsearch.common.settings.Settings settings64 = null;
        org.elasticsearch.common.settings.Settings settings65 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder66);
        java.util.Set<java.lang.String> strSet68 = builder66.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder66.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject70 = null;
        builder66.setmongoOplogFilter(basicDBObject70);
        com.mongodb.BasicDBObject basicDBObject72 = builder66.getmongoCollectionFilter();
        builder66.setskipInitialImport(false);
        java.lang.String str75 = builder66.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder66.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject78 = builder77.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings79 = new org.elasticsearch.river.RiverSettings(settings65, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        org.elasticsearch.river.RiverSettings riverSettings80 = new org.elasticsearch.river.RiverSettings(settings64, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject78);
        builder60.mongoCollectionFilter = basicDBObject78;
        builder56.setmongoCollectionFilter(basicDBObject78);
        builder13.mongoOplogFilter = basicDBObject78;
        java.lang.String str84 = builder13.mongoCollection;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(basicDBObject32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(wildcardTimestamp36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(basicDBObject72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(basicDBObject78);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        builder0.setadvancedTransformation(false);
        int int11 = builder0.getsocketTimeout();
        java.lang.String str12 = builder0.indexName;
        builder0.includeCollection = "bulk_size";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = builder32.getmongoCollectionFilter();
        builder32.setskipInitialImport(false);
        java.lang.String str41 = builder32.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder32.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject44 = builder43.mongoCollectionFilter;
        docScoreSearchScript0.setNextVar("throttle_size", (java.lang.Object) builder43);
        org.apache.lucene.search.Scorer scorer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(basicDBObject44);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        builder8.setmongoGridFS(true);
        builder8.setmongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminPassword("admin");
        builder17.setincludeCollection("password");
        builder17.riverName = "db";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder3.mongoUseSSL(true);
        builder3.connectTimeout = (byte) -1;
        builder3.setsocketTimeout((int) (short) 1);
        java.lang.String str13 = builder3.getstatisticsTypeName();
        boolean boolean14 = builder3.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder3.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        java.lang.String str20 = builder17.mongoAdminUser;
        java.lang.String str21 = builder17.statisticsTypeName;
        com.mongodb.BasicDBObject basicDBObject22 = builder17.mongoCollectionFilter;
        builder3.setmongoCollectionFilter(basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings24 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings26 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(basicDBObject22);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.isStoreStatistics();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoLocalUser("name");
        builder0.setmongoSecondaryReadPreference(false);
        java.util.Set<java.lang.String> strSet17 = builder0.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.importAllCollections(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.lang.String str11 = mongoDBRiverDefinition10.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "options" + "'", str11, "options");
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder4.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        builder4.mongoServers = serverAddressList12;
        java.lang.String str15 = builder4.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder16.mongoAdminUser;
        builder16.disableIndexRefresh = false;
        java.lang.String str23 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoUseSSL(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        builder16.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeCollection("type");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder4);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet12 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        int int15 = mongoDBRiverDefinition14.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoServers(serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str21 = mongoDBRiverDefinition20.typeName;
        boolean boolean22 = mongoDBRiverDefinition20.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "import_all_collections" + "'", str21, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder13.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder13.getmongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject19;
        boolean boolean21 = builder0.getmongoGridFS();
        builder0.setmongoUseSSL(false);
        java.lang.String str24 = builder0.mongoDb;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.getmongoSSLVerifyCertificate();
        boolean boolean4 = mongoDBRiverDefinition2.mongoGridFS;
        boolean boolean5 = mongoDBRiverDefinition2.getadvancedTransformation();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        java.lang.String str10 = builder8.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.connectTimeout((int) (short) 0);
        java.util.Set<java.lang.String> strSet13 = builder12.getparentTypes();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        java.lang.String str17 = builder14.getstatisticsIndexName();
        builder14.setsocketTimeout(10);
        builder14.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder14.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder14.mongoCollectionFilter = basicDBObject24;
        builder14.setmongoSecondaryReadPreference(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.typeName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.mongoCollectionFilter = basicDBObject30;
        java.lang.String str32 = builder28.mongoAdminUser;
        builder28.disableIndexRefresh = false;
        java.lang.String str35 = builder28.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder36.mongoUseSSL(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        builder28.parentTypes = strSet52;
        builder14.parentTypes = strSet52;
        builder12.setexcludeFields((java.util.Set<java.lang.String>) strSet52);
        java.lang.String str58 = builder12.script;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.connectTimeout((int) ' ');
        java.lang.String str12 = builder11.mongoAdminPassword;
        java.lang.String str13 = builder11.getincludeCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        builder8.setmongoAdminUser("bulk");
        builder8.setmongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject13 = builder8.mongoCollectionFilter;
        boolean boolean14 = builder8.skipInitialImport;
        builder8.setstatisticsTypeName("drop_collection");
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp17 = builder8.initialTimestamp;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardTimestamp17);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        java.lang.String str10 = builder8.typeName;
        java.lang.String str11 = builder8.scriptType;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = mongoDBRiverDefinition12.getBULK_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bulk" + "'", str13, "bulk");
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        java.lang.String str7 = builder0.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray8 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList9 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList9, serverAddressArray8);
        builder0.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList9);
        java.lang.String str12 = builder0.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        builder0.mongoClientOptions = mongoClientOptions13;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setmongoUseSSL(false);
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder0.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder0.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(serverAddressArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        boolean boolean16 = builder15.storeStatistics;
        boolean boolean17 = builder15.mongoSSLVerifyCertificate;
        builder15.setconnectTimeout((int) (short) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        builder0.typeName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int15 = builder0.getthrottleSize();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str9 = mongoDBRiverDefinition2.statisticsTypeName;
        boolean boolean10 = mongoDBRiverDefinition2.isMongoGridFS();
        java.lang.String str11 = mongoDBRiverDefinition2.mongoLocalPassword;
        boolean boolean12 = mongoDBRiverDefinition2.isMongoUseSSL();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        java.lang.String[] strArray12 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet13);
        builder0.setmongoAdminUser("socket_timeout");
        builder0.setscript("include_fields");
        java.lang.String str20 = builder0.statisticsIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.util.Set<java.lang.String> strSet3 = builder1.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder1.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder1.setmongoOplogFilter(basicDBObject5);
        boolean boolean7 = builder1.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder1.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet10 = builder9.excludeFields;
        builder9.setmongoAdminUser("ssl");
        com.mongodb.BasicDBObject basicDBObject13 = builder9.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject13);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(basicDBObject13);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str7 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.script;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition2.includeFields;
        int int12 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "script_type" + "'", str7, "script_type");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "throttle_size" + "'", str9, "throttle_size");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.scriptType;
        java.lang.String str6 = mongoDBRiverDefinition2.riverName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "collection" + "'", str4, "collection");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        builder5.setconnectTimeout(1000);
        builder5.setriverIndexName("skip_initial_import");
        builder5.includeCollection = "port";
        boolean boolean14 = builder5.getmongoUseSSL();
        java.lang.String str15 = builder5.getstatisticsTypeName();
        builder5.setmongoSecondaryReadPreference(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        builder5.setmongoAdminUser("throttle_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder12.socketTimeout((int) ' ');
        java.lang.String str21 = builder20.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.Set<java.lang.String> strSet24 = builder22.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder22.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder22.setmongoOplogFilter(basicDBObject26);
        boolean boolean28 = builder22.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder22.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet31 = builder30.excludeFields;
        builder30.setriverName("hi!");
        builder30.setmongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder36.mongoUseSSL(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder41.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str58 = builder57.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str60 = builder59.typeName;
        com.mongodb.BasicDBObject basicDBObject61 = null;
        builder59.mongoCollectionFilter = basicDBObject61;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder59.mongoUseSSL(true);
        java.lang.String[] strArray74 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        builder64.setparentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder57.parentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder56.parentTypes((java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder80 = builder30.excludeFields((java.util.Set<java.lang.String>) strSet75);
        builder20.includeFields = strSet75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder82 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str83 = builder82.typeName;
        com.mongodb.BasicDBObject basicDBObject84 = null;
        builder82.mongoCollectionFilter = basicDBObject84;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder82.mongoUseSSL(true);
        builder82.connectTimeout = (byte) -1;
        int int90 = builder82.socketTimeout;
        java.lang.String str91 = builder82.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder93 = builder82.mongoAdminPassword("local");
        java.lang.String str94 = builder93.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder93.importAllCollections(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList97 = builder96.mongoServers;
        builder20.setmongoServers(serverAddressList97);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder5.mongoServers(serverAddressList97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(serverAddressList97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getPORT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition1.getOPTIONS_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "options" + "'", str8, "options");
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        int int3 = builder0.getconnectTimeout();
        builder0.mongoLocalUser = "socket_timeout";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.mongoAdminUser("ssl");
        boolean boolean8 = builder7.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) '4');
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("", "script_type");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?script_type?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = builder32.getmongoCollectionFilter();
        java.lang.String str39 = builder32.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray40 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList41 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList41, serverAddressArray40);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList41);
        java.lang.String str44 = builder32.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        builder32.mongoClientOptions = mongoClientOptions45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder48.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = builder48.getmongoCollectionFilter();
        builder48.setskipInitialImport(false);
        java.lang.String str57 = builder48.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder48.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject60 = builder59.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder32.mongoCollectionFilter(basicDBObject60);
        java.lang.Object obj62 = docScoreSearchScript0.unwrap((java.lang.Object) builder32);
        java.lang.String str63 = builder32.getincludeCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(serverAddressArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        com.mongodb.BasicDBObject basicDBObject8 = builder5.mongoCollectionFilter;
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        builder5.setmongoClientOptions(mongoClientOptions9);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder5.scriptType("bulk_timeout");
        java.lang.String str13 = builder12.getriverIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("include_fields");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.advancedTransformation(false);
        builder0.setskipInitialImport(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.skipInitialImport(true);
        builder11.mongoLocalUser = "password";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str13 = mongoDBRiverDefinition12.getTHROTTLE_SIZE_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition12.includeCollection;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "throttle_size" + "'", str13, "throttle_size");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setmongoUseSSL(false);
        builder0.setscript("local");
        builder0.setmongoAdminPassword("filter");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str10 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str11 = mongoDBRiverDefinition2.typeName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "import_all_collections" + "'", str5, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "script" + "'", str8, "script");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.importAllCollections(false);
        builder9.setconnectTimeout((int) (byte) 100);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoGridFS(true);
        java.lang.String str14 = builder9.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        int int9 = builder0.throttleSize;
        java.lang.String str10 = builder0.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        java.lang.String str14 = builder11.mongoAdminUser;
        builder11.setskipInitialImport(true);
        java.lang.String[] strArray27 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder11.parentTypes = strSet28;
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str32 = builder0.getriverIndexName();
        builder0.throttleSize = 100;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        boolean boolean6 = mongoDBRiverDefinition2.mongoUseSSL;
        int int7 = mongoDBRiverDefinition2.getDEFAULT_BULK_ACTIONS();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean13 = mongoDBRiverDefinition12.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder5.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.typeName;
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder23.mongoCollectionFilter = basicDBObject25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.mongoUseSSL(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder28.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder21.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder20.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.bson.types.Binary binary44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder43.initialTimestamp(binary44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getNAME_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name" + "'", str5, "name");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str4 = mongoDBRiverDefinition3.getTHROTTLE_SIZE_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition3.getSKIP_INITIAL_IMPORT_FIELD();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition3.getIncludeFields();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "throttle_size" + "'", str4, "throttle_size");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "skip_initial_import" + "'", str5, "skip_initial_import");
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = builder0.getinitialTimestamp();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.indexName("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.statisticsTypeName("user");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder4.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition5.mongoServers;
        java.lang.String str7 = mongoDBRiverDefinition5.riverIndexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminUser("hi!");
        builder11.throttleSize = (-1);
        boolean boolean14 = builder11.mongoUseSSL;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder11.mongoSecondaryReadPreference(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = mongoDBRiverDefinition25.mongoAdminPassword;
        int int27 = mongoDBRiverDefinition25.connectTimeout;
        java.lang.String str28 = mongoDBRiverDefinition25.getScriptType();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition25);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.lang.String str12 = builder8.getmongoCollection();
        int int13 = builder8.getconnectTimeout();
        builder8.mongoLocalUser = "import_all_collections";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) '4');
        docScoreSearchScript0.setNextScore(1.0f);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        int int14 = builder13.getsocketTimeout();
        builder13.typeName = "hi!";
        java.lang.String str17 = builder13.mongoAdminPassword;
        boolean boolean18 = builder13.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_DB_PORT();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition5.getMongoClientOptions();
        boolean boolean9 = mongoDBRiverDefinition5.getstoreStatistics();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = docScoreSearchScript0.run();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoAdminPassword();
        org.elasticsearch.common.logging.ESLogger eSLogger9 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str10 = mongoDBRiverDefinition2.getRiverIndexName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(eSLogger9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getSIZE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getOPTIONS_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "options" + "'", str7, "options");
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.mongoGridFS;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "import_all_collections" + "'", str5, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "import_all_collections" + "'", str8, "import_all_collections");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.storeStatistics;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str6 = builder5.typeName;
        com.mongodb.BasicDBObject basicDBObject7 = null;
        builder5.mongoCollectionFilter = basicDBObject7;
        java.lang.String str9 = builder5.mongoAdminUser;
        builder5.disableIndexRefresh = false;
        java.lang.String str12 = builder5.typeName;
        builder5.mongoAdminPassword = "";
        int int15 = builder5.getconnectTimeout();
        java.lang.Object obj16 = docScoreSearchScript0.unwrap((java.lang.Object) int15);
        // The following exception was thrown during execution in test generation
        try {
            float float17 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 0 + "'", obj16, 0);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        int int5 = mongoDBRiverDefinition2.socketTimeout;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "collection" + "'", str4, "collection");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str5 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str7 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean9 = mongoDBRiverDefinition1.disableIndexRefresh;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "credentials" + "'", str7, "credentials");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        builder0.setmongoSecondaryReadPreference(true);
        builder0.setindexName("options");
        builder0.setmongoDb("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.Set<java.lang.String> strSet20 = builder18.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder18.setmongoOplogFilter(basicDBObject22);
        boolean boolean24 = builder18.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder18.mongoServers = serverAddressList26;
        java.lang.String str29 = builder18.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        java.lang.String str34 = builder30.mongoAdminUser;
        builder30.disableIndexRefresh = false;
        java.lang.String str37 = builder30.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.typeName;
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder38.mongoCollectionFilter = basicDBObject40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder38.mongoUseSSL(true);
        java.lang.String[] strArray53 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        builder43.setparentTypes((java.util.Set<java.lang.String>) strSet54);
        builder30.parentTypes = strSet54;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder18.parentTypes((java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder58.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject61 = builder58.mongoCollectionFilter;
        org.elasticsearch.common.settings.Settings settings62 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder63);
        java.util.Set<java.lang.String> strSet65 = builder63.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions66 = builder63.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject67 = null;
        builder63.setmongoOplogFilter(basicDBObject67);
        com.mongodb.BasicDBObject basicDBObject69 = builder63.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings70 = new org.elasticsearch.river.RiverSettings(settings62, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject69);
        builder58.setmongoOplogFilter(basicDBObject69);
        builder0.mongoOplogFilter = basicDBObject69;
        builder0.setmongoLocalPassword("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder0.script("script_type");
        boolean boolean77 = builder76.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder76.throttleSize((int) '#');
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(basicDBObject61);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNull(mongoClientOptions66);
        org.junit.Assert.assertNotNull(basicDBObject69);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        java.lang.String str11 = builder0.typeName;
        org.bson.types.BSONTimestamp bSONTimestamp12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.initialTimestamp(bSONTimestamp12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getIMPORT_ALL_COLLECTIONS_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str8 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "import_all_collections" + "'", str5, "import_all_collections");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "name" + "'", str6, "name");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        int int11 = builder10.getthrottleSize();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.socketTimeout(27017);
        builder13.setdropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.util.Set<java.lang.String> strSet18 = builder16.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder16.setmongoOplogFilter(basicDBObject20);
        boolean boolean22 = builder16.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        builder16.mongoServers = serverAddressList24;
        java.lang.String str27 = builder16.mongoAdminPassword;
        java.lang.String str28 = builder16.getscriptType();
        java.lang.String str29 = builder16.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder16.connectTimeout((int) (short) 0);
        builder31.typeName = "credentials";
        java.lang.Object obj34 = docScoreSearchScript0.unwrap((java.lang.Object) builder31);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.util.Set<java.lang.String> strSet3 = builder1.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions4 = builder1.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder1.setmongoOplogFilter(basicDBObject5);
        com.mongodb.BasicDBObject basicDBObject7 = builder1.getmongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject7;
        boolean boolean9 = builder0.getmongoSecondaryReadPreference();
        com.mongodb.BasicDBObject basicDBObject10 = builder0.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mongoClientOptions4);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(basicDBObject10);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        boolean boolean9 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet10 = builder8.getincludeFields();
        java.util.Set<java.lang.String> strSet11 = builder8.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        boolean boolean10 = mongoDBRiverDefinition2.disableIndexRefresh;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str8 = mongoDBRiverDefinition1.getIncludeCollection();
        java.lang.String str9 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition1.getACTIONS_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondary_read_preference" + "'", str11, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "skip_initial_import" + "'", str12, "skip_initial_import");
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.util.Set<java.lang.String> strSet7 = builder5.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.getmongoClientOptions();
        builder5.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        builder5.excludeFields = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder0.includeFields((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        builder41.setriverIndexName("include_collection");
        com.mongodb.BasicDBObject basicDBObject45 = builder41.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(basicDBObject45);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition7.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition7.getMongoOplogFilter();
        boolean boolean10 = mongoDBRiverDefinition7.importAllCollections;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.connectTimeout(1000);
        java.lang.String str11 = builder0.getmongoAdminPassword();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        java.lang.String str20 = builder15.getriverName();
        builder15.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder26.mongoOplogFilter = basicDBObject30;
        builder26.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList34 = builder26.mongoServers;
        java.lang.String[] strArray38 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder26.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        builder23.parentTypes = strSet39;
        builder15.excludeFields = strSet39;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet39);
        int int46 = builder45.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(serverAddressList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str4 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getRiverName();
        int int8 = mongoDBRiverDefinition2.socketTimeout;
        boolean boolean9 = mongoDBRiverDefinition2.getimportAllCollections();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_requests" + "'", str4, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "drop_collection" + "'", str5, "drop_collection");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str3 = mongoDBRiverDefinition1.getRiverIndexName();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.getExcludeFields();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strSet4);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition7.getMongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition7.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition7.statisticsIndexName;
        java.lang.String str11 = mongoDBRiverDefinition7.scriptType;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.socketTimeout = 'a';
        builder0.setmongoDb("ssl");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.lang.String str12 = builder8.getmongoCollection();
        boolean boolean13 = builder8.mongoSSLVerifyCertificate;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setriverName("");
        builder0.setmongoLocalUser("credentials");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        boolean boolean22 = builder21.getimportAllCollections();
        java.lang.String str23 = builder21.mongoAdminUser;
        builder21.setincludeCollection("include_fields");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        builder0.mongoAdminUser = "collection";
        builder0.setmongoGridFS(false);
        builder0.disableIndexRefresh = false;
        int int10 = builder0.throttleSize;
        boolean boolean11 = builder0.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder13.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.mongoLocalUser("options");
        builder13.mongoSSLVerifyCertificate = true;
        builder13.settypeName("password");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        builder0.mongoSSLVerifyCertificate = false;
        builder0.setscript("user");
        java.lang.String str14 = builder0.mongoLocalUser;
        boolean boolean15 = builder0.storeStatistics;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.statisticsIndexName;
        builder0.setstatisticsIndexName("script");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        com.mongodb.BasicDBObject basicDBObject38 = builder32.getmongoCollectionFilter();
        java.lang.String str39 = builder32.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray40 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList41 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList41, serverAddressArray40);
        builder32.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList41);
        java.lang.String str44 = builder32.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        builder32.mongoClientOptions = mongoClientOptions45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder48.setmongoOplogFilter(basicDBObject52);
        com.mongodb.BasicDBObject basicDBObject54 = builder48.getmongoCollectionFilter();
        builder48.setskipInitialImport(false);
        java.lang.String str57 = builder48.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder48.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject60 = builder59.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder32.mongoCollectionFilter(basicDBObject60);
        java.lang.Object obj62 = docScoreSearchScript0.unwrap((java.lang.Object) builder32);
        java.lang.String str63 = builder32.getincludeCollection();
        java.util.Set<java.lang.String> strSet64 = builder32.getexcludeFields();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(basicDBObject38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(serverAddressArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(basicDBObject54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(basicDBObject60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(strSet64);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.getDB_FIELD();
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.includeFields;
        java.lang.String str5 = mongoDBRiverDefinition1.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "db" + "'", str3, "db");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "advanced_transformation" + "'", str5, "advanced_transformation");
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory4 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.util.Set<java.lang.String> strSet10 = builder8.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder8.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder8.setmongoOplogFilter(basicDBObject12);
        com.mongodb.BasicDBObject basicDBObject14 = builder8.getmongoCollectionFilter();
        builder7.mongoCollectionFilter = basicDBObject14;
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory4.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject14);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = riverSettings19.settings();
        org.elasticsearch.river.RiverSettings riverSettings21 = new org.elasticsearch.river.RiverSettings(settings2, strMap20);
        org.elasticsearch.river.RiverSettings riverSettings22 = new org.elasticsearch.river.RiverSettings(settings1, strMap20);
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings0, strMap20);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(basicDBObject14);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition10.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition10.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition10.mongoDb;
        org.elasticsearch.common.logging.ESLogger eSLogger15 = mongoDBRiverDefinition10.getlogger();
        boolean boolean16 = mongoDBRiverDefinition10.isMongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(eSLogger15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.mongoSSLVerifyCertificate = true;
        builder0.includeCollection = "collection";
        builder0.mongoSecondaryReadPreference = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        builder0.setmongoSecondaryReadPreference(false);
        builder0.setstatisticsTypeName("exclude_fields");
        com.mongodb.BasicDBObject basicDBObject15 = builder0.mongoOplogFilter;
        boolean boolean16 = builder0.getmongoGridFS();
        builder0.script = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str20 = builder19.typeName;
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder19.mongoCollectionFilter = basicDBObject21;
        java.lang.String str23 = builder19.mongoAdminUser;
        java.lang.String str24 = builder19.getriverName();
        builder19.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder19.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder19.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder31);
        int int33 = mongoDBRiverDefinition32.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str34 = mongoDBRiverDefinition32.scriptType;
        boolean boolean35 = mongoDBRiverDefinition32.importAllCollections;
        java.lang.String str36 = mongoDBRiverDefinition32.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList37 = mongoDBRiverDefinition32.mongoServers;
        builder30.setmongoServers(serverAddressList37);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.getmongoClientOptions();
        builder39.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str47 = builder46.typeName;
        com.mongodb.BasicDBObject basicDBObject48 = null;
        builder46.mongoCollectionFilter = basicDBObject48;
        java.lang.String str50 = builder46.mongoAdminUser;
        builder46.disableIndexRefresh = false;
        java.lang.String str53 = builder46.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str55 = builder54.typeName;
        com.mongodb.BasicDBObject basicDBObject56 = null;
        builder54.mongoCollectionFilter = basicDBObject56;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder54.mongoUseSSL(true);
        java.lang.String[] strArray69 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        builder59.setparentTypes((java.util.Set<java.lang.String>) strSet70);
        builder46.parentTypes = strSet70;
        builder39.excludeFields = strSet70;
        builder30.setincludeFields((java.util.Set<java.lang.String>) strSet70);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet70);
        builder0.setstatisticsIndexName("parent_types");
        boolean boolean79 = builder0.getstoreStatistics();
        boolean boolean80 = builder0.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(basicDBObject15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "collection" + "'", str36, "collection");
        org.junit.Assert.assertNotNull(serverAddressList37);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("include_collection", "drop_collection", false);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?drop_collection?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.parentTypes;
        java.lang.String str7 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        boolean boolean8 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null.null" + "'", str7, "null.null");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.setmongoOplogFilter(basicDBObject15);
        com.mongodb.BasicDBObject basicDBObject17 = builder11.getmongoCollectionFilter();
        java.lang.String str18 = builder11.getindexName();
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder11.setmongoServers((java.util.List<com.mongodb.ServerAddress>) serverAddressList20);
        java.lang.String str23 = builder11.getstatisticsTypeName();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        builder11.mongoClientOptions = mongoClientOptions24;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder26.mongoAdminPassword("db");
        builder31.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder31.connectTimeout(1);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory36 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings37 = null;
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder39.setmongoOplogFilter(basicDBObject43);
        com.mongodb.BasicDBObject basicDBObject45 = builder39.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings46 = new org.elasticsearch.river.RiverSettings(settings38, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.river.RiverSettings riverSettings47 = new org.elasticsearch.river.RiverSettings(settings37, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.script.ExecutableScript executableScript48 = docScoreNativeScriptFactory36.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject45);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder31.mongoCollectionFilter(basicDBObject45);
        builder11.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder0.mongoCollectionFilter(basicDBObject45);
        java.lang.String str52 = builder51.indexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(basicDBObject17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(basicDBObject45);
        org.junit.Assert.assertNotNull(executableScript48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        builder0.setadvancedTransformation(false);
        int int11 = builder0.getsocketTimeout();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet13 = builder0.parentTypes;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str15 = builder14.mongoCollection;
        builder14.setmongoUseSSL(false);
        builder14.setconnectTimeout(0);
        boolean boolean20 = builder14.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder14.mongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        builder24.setsocketTimeout(0);
        boolean boolean28 = builder24.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoUseSSL(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        java.lang.String str50 = builder24.statisticsIndexName;
        builder24.advancedTransformation = false;
        java.lang.String str53 = builder24.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = builder24.getmongoServers();
        java.lang.String str55 = builder24.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str57 = builder56.typeName;
        com.mongodb.BasicDBObject basicDBObject58 = null;
        builder56.mongoCollectionFilter = basicDBObject58;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = builder56.mongoUseSSL(true);
        java.lang.String[] strArray71 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        builder61.setparentTypes((java.util.Set<java.lang.String>) strSet72);
        builder24.includeFields = strSet72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder23.includeFields((java.util.Set<java.lang.String>) strSet72);
        boolean boolean77 = builder76.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str79 = builder78.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition80 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder78);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder81 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str82 = builder81.typeName;
        com.mongodb.BasicDBObject basicDBObject83 = null;
        builder81.mongoCollectionFilter = basicDBObject83;
        com.mongodb.BasicDBObject basicDBObject85 = null;
        builder81.mongoOplogFilter = basicDBObject85;
        builder81.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList89 = builder81.mongoServers;
        java.lang.String[] strArray93 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet94 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet94, strArray93);
        builder81.setparentTypes((java.util.Set<java.lang.String>) strSet94);
        builder78.parentTypes = strSet94;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder98 = builder76.includeFields((java.util.Set<java.lang.String>) strSet94);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder99 = builder0.includeFields((java.util.Set<java.lang.String>) strSet94);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(serverAddressList89);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        java.lang.String str11 = builder10.mongoLocalUser;
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder13.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder13.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings12, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject19);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder10.mongoCollectionFilter(basicDBObject19);
        boolean boolean22 = builder21.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        boolean boolean6 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str7 = mongoDBRiverDefinition1.getIncludeCollection();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder11.statisticsTypeName("bulk_size");
        builder11.includeCollection = "port";
        builder11.setmongoGridFS(false);
        java.lang.String str20 = builder11.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder11.connectTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        builder24.setsocketTimeout(0);
        boolean boolean28 = builder24.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoUseSSL(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        builder24.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder11.includeFields((java.util.Set<java.lang.String>) strSet46);
        builder0.setincludeFields((java.util.Set<java.lang.String>) strSet46);
        builder0.importAllCollections = false;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoGridFS(true);
        builder4.disableIndexRefresh = false;
        int int9 = builder4.getthrottleSize();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.typeName;
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder9.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder14.mongoClientOptions = mongoClientOptions15;
        builder14.setmongoCollection("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = builder21.getmongoCollectionFilter();
        builder20.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        builder14.setmongoCollectionFilter(basicDBObject27);
        builder0.setmongoOplogFilter(basicDBObject27);
        builder0.settypeName("user");
        builder0.setconnectTimeout(32);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript29);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        builder5.setriverName("index");
        builder5.mongoCollection = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.mongoLocalUser("local");
        builder24.setmongoAdminPassword("script_type");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str6 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str8 = mongoDBRiverDefinition2.getSIZE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "options" + "'", str6, "options");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "size" + "'", str8, "size");
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        boolean boolean10 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.mongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.riverName("host");
        builder0.mongoCollection = "credentials";
        builder0.setriverName("bulk_timeout");
        boolean boolean19 = builder0.mongoGridFS;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        builder20.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.typeName;
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder27.mongoCollectionFilter = basicDBObject29;
        java.lang.String str31 = builder27.mongoAdminUser;
        builder27.disableIndexRefresh = false;
        java.lang.String str34 = builder27.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoUseSSL(true);
        java.lang.String[] strArray50 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder40.setparentTypes((java.util.Set<java.lang.String>) strSet51);
        builder27.parentTypes = strSet51;
        builder20.excludeFields = strSet51;
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet51);
        builder11.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder11.statisticsTypeName("type");
        java.lang.String str61 = builder60.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str2 = builder1.typeName;
        com.mongodb.BasicDBObject basicDBObject3 = null;
        builder1.mongoCollectionFilter = basicDBObject3;
        java.lang.String str5 = builder1.mongoAdminUser;
        java.lang.String str6 = builder1.getriverName();
        builder1.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder1.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder1.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet13 = builder1.getexcludeFields();
        builder1.setskipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.lang.String str19 = mongoDBRiverDefinition18.getCONNECTION_TIMEOUT();
        java.lang.String str20 = mongoDBRiverDefinition18.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = mongoDBRiverDefinition18.getDEFAULT_BULK_SIZE();
        java.lang.String str22 = mongoDBRiverDefinition18.indexName;
        java.lang.String str23 = mongoDBRiverDefinition18.getCONNECTION_TIMEOUT();
        boolean boolean24 = mongoDBRiverDefinition18.isDisableIndexRefresh();
        com.mongodb.BasicDBObject basicDBObject25 = mongoDBRiverDefinition18.getMongoCollectionFilter();
        builder1.mongoOplogFilter = basicDBObject25;
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject25);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "connect_timeout" + "'", str19, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "credentials" + "'", str20, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "connect_timeout" + "'", str23, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(basicDBObject25);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.typeName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.mongoCollectionFilter = basicDBObject12;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.mongoOplogFilter = basicDBObject14;
        builder10.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder10.mongoServers;
        java.lang.String[] strArray22 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet23);
        builder7.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet23);
        builder27.riverName = "script_type";
        builder27.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        boolean boolean38 = builder32.dropCollection;
        boolean boolean39 = builder32.dropCollection;
        boolean boolean40 = builder32.mongoSecondaryReadPreference;
        int int41 = builder32.throttleSize;
        java.lang.String str42 = builder32.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.util.Set<java.lang.String> strSet45 = builder43.includeFields;
        java.lang.String str46 = builder43.mongoAdminUser;
        builder43.setskipInitialImport(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder43.parentTypes = strSet60;
        builder32.setincludeFields((java.util.Set<java.lang.String>) strSet60);
        builder27.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean65 = builder27.skipInitialImport;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp66 = builder27.initialTimestamp;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(wildcardTimestamp66);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory10 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.script.ExecutableScript executableScript20 = docScoreNativeScriptFactory10.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        builder5.setmongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder5.indexName("ssl");
        boolean boolean24 = builder5.getstoreStatistics();
        boolean boolean25 = builder5.getmongoSecondaryReadPreference();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(executableScript20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        builder0.dropCollection = false;
        boolean boolean14 = builder0.getmongoUseSSL();
        builder0.mongoLocalUser = "gridfs";
        builder0.statisticsIndexName = "script_type";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        boolean boolean8 = builder0.mongoSecondaryReadPreference;
        builder0.setadvancedTransformation(false);
        int int11 = builder0.getsocketTimeout();
        java.lang.String str12 = builder0.indexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str14 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        boolean boolean15 = mongoDBRiverDefinition13.getimportAllCollections();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "collection" + "'", str14, "collection");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean5 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        int int9 = mongoDBRiverDefinition2.getDEFAULT_DB_PORT();
        java.lang.String str10 = mongoDBRiverDefinition2.script;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "port" + "'", str3, "port");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "secondary_read_preference" + "'", str6, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27017 + "'", int9 == 27017);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        boolean boolean6 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        java.lang.String str7 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverIndexName();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean10 = mongoDBRiverDefinition2.getdropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "concurrent_requests" + "'", str7, "concurrent_requests");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        builder0.setconnectTimeout(100);
        com.mongodb.BasicDBObject basicDBObject6 = null;
        builder0.mongoOplogFilter = basicDBObject6;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        org.elasticsearch.common.settings.Settings settings6 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.typeName;
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder7.mongoCollectionFilter = basicDBObject9;
        java.lang.String str11 = builder7.mongoAdminUser;
        builder7.disableIndexRefresh = false;
        java.lang.String str14 = builder7.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.util.Set<java.lang.String> strSet18 = builder16.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder16.setmongoOplogFilter(basicDBObject20);
        com.mongodb.BasicDBObject basicDBObject22 = builder16.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings23 = new org.elasticsearch.river.RiverSettings(settings15, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        builder7.setmongoOplogFilter(basicDBObject22);
        org.elasticsearch.river.RiverSettings riverSettings25 = new org.elasticsearch.river.RiverSettings(settings6, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.mongoOplogFilter(basicDBObject22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder27.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.mongoCollection;
        builder32.setmongoUseSSL(false);
        builder32.setconnectTimeout(0);
        boolean boolean38 = builder32.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder32.mongoAdminPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str44 = builder43.typeName;
        com.mongodb.BasicDBObject basicDBObject45 = null;
        builder43.mongoCollectionFilter = basicDBObject45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = builder43.mongoUseSSL(true);
        java.lang.String[] strArray58 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        builder48.setparentTypes((java.util.Set<java.lang.String>) strSet59);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = builder48.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str65 = builder64.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str67 = builder66.typeName;
        com.mongodb.BasicDBObject basicDBObject68 = null;
        builder66.mongoCollectionFilter = basicDBObject68;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder66.mongoUseSSL(true);
        java.lang.String[] strArray81 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        builder71.setparentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder85 = builder64.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder86 = builder63.parentTypes((java.util.Set<java.lang.String>) strSet82);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder87 = builder41.includeFields((java.util.Set<java.lang.String>) strSet82);
        builder40.includeFields = strSet82;
        builder27.parentTypes = strSet82;
        builder26.parentTypes = strSet82;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(basicDBObject22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        boolean boolean10 = mongoDBRiverDefinition2.getstoreStatistics();
        int int11 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.storeStatistics(false);
        org.bson.types.Binary binary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder0.initialTimestamp(binary6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.mongoClientOptions;
        builder0.importAllCollections = false;
        builder0.setmongoSecondaryReadPreference(false);
        builder0.setstatisticsTypeName("exclude_fields");
        java.util.Set<java.lang.String> strSet15 = builder0.parentTypes;
        builder0.includeCollection = "socket_timeout";
        java.lang.String str18 = builder0.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        int int3 = mongoDBRiverDefinition1.getThrottleSize();
        java.lang.String str4 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "connect_timeout" + "'", str2, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        boolean boolean16 = builder10.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder10.mongoServers = serverAddressList18;
        java.lang.String str21 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.typeName;
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder22.mongoCollectionFilter = basicDBObject24;
        java.lang.String str26 = builder22.mongoAdminUser;
        builder22.disableIndexRefresh = false;
        java.lang.String str29 = builder22.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoUseSSL(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        builder22.parentTypes = strSet46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder9.mongoAdminPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder9.riverIndexName("drop_collection");
        builder55.throttleSize = 1;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        builder8.setmongoAdminUser("bulk");
        builder8.setmongoGridFS(false);
        com.mongodb.BasicDBObject basicDBObject13 = builder8.mongoCollectionFilter;
        boolean boolean14 = builder8.skipInitialImport;
        builder8.setstatisticsTypeName("drop_collection");
        int int17 = builder8.socketTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(basicDBObject13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean8 = builder0.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        boolean boolean15 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.mongoGridFS(true);
        builder9.setstatisticsTypeName("servers");
        java.lang.Object obj20 = docScoreSearchScript0.unwrap((java.lang.Object) "servers");
        org.apache.lucene.search.Scorer scorer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "servers" + "'", obj20, "servers");
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        java.lang.String str11 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(false);
        builder0.setconnectTimeout((int) (short) -1);
        java.lang.String str16 = builder0.statisticsTypeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = builder4.build();
        java.lang.String str6 = mongoDBRiverDefinition5.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.includeCollection;
        boolean boolean8 = mongoDBRiverDefinition5.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition5.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "concurrent_bulk_requests" + "'", str6, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "script_type" + "'", str9, "script_type");
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.typeName;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder2.mongoCollectionFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoUseSSL(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder7.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder25.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoUseSSL(true);
        java.lang.String[] strArray40 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        builder30.setparentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder22.parentTypes((java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.includeFields((java.util.Set<java.lang.String>) strSet41);
        java.lang.String str47 = builder46.getscript();
        java.lang.String str48 = builder46.gettypeName();
        int int49 = builder46.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.lang.String str15 = mongoDBRiverDefinition14.scriptType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoDb;
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str10 = mongoDBRiverDefinition2.getRiverIndexName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        builder0.mongoSSLVerifyCertificate = false;
        boolean boolean12 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.script("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder15.mongoOplogFilter = basicDBObject19;
        builder15.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList23 = builder15.mongoServers;
        java.lang.String[] strArray27 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        builder15.setparentTypes((java.util.Set<java.lang.String>) strSet28);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet28);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder0.scriptType("parent_types");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.importAllCollections(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(serverAddressList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder4.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str11 = builder10.typeName;
        com.mongodb.BasicDBObject basicDBObject12 = null;
        builder10.mongoCollectionFilter = basicDBObject12;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.mongoOplogFilter = basicDBObject14;
        builder10.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder10.mongoServers;
        java.lang.String[] strArray22 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        builder10.setparentTypes((java.util.Set<java.lang.String>) strSet23);
        builder7.parentTypes = strSet23;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder4.excludeFields((java.util.Set<java.lang.String>) strSet23);
        builder27.riverName = "script_type";
        builder27.dropCollection = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder32);
        java.util.Set<java.lang.String> strSet34 = builder32.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject36 = null;
        builder32.setmongoOplogFilter(basicDBObject36);
        boolean boolean38 = builder32.dropCollection;
        boolean boolean39 = builder32.dropCollection;
        boolean boolean40 = builder32.mongoSecondaryReadPreference;
        int int41 = builder32.throttleSize;
        java.lang.String str42 = builder32.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder43);
        java.util.Set<java.lang.String> strSet45 = builder43.includeFields;
        java.lang.String str46 = builder43.mongoAdminUser;
        builder43.setskipInitialImport(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder43.parentTypes = strSet60;
        builder32.setincludeFields((java.util.Set<java.lang.String>) strSet60);
        builder27.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        boolean boolean65 = builder27.skipInitialImport;
        builder27.setmongoLocalPassword("concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings11, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        builder3.setmongoOplogFilter(basicDBObject18);
        org.elasticsearch.river.RiverSettings riverSettings21 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = riverSettings21.settings();
        org.elasticsearch.script.ScriptService scriptService23 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("db", "socket_timeout", riverSettings21, scriptService23);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoOplogNamespace();
        java.lang.String str7 = mongoDBRiverDefinition2.riverName;
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition2.excludeFields;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null.null" + "'", str6, "null.null");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getBULK_FIELD();
        int int8 = mongoDBRiverDefinition1.getThrottleSize();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = mongoDBRiverDefinition1.getInitialTimestamp();
        boolean boolean10 = mongoDBRiverDefinition1.getdisableIndexRefresh();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk" + "'", str7, "bulk");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        builder0.dropCollection = false;
        boolean boolean14 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder0.storeStatistics(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("null.null");
        org.junit.Assert.assertNull(basicDBObject1);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("exclude_fields");
        org.bson.types.Binary binary9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.initialTimestamp(binary9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.skipInitialImport(false);
        builder0.skipInitialImport = true;
        boolean boolean9 = builder0.getimportAllCollections();
        builder0.setskipInitialImport(false);
        java.lang.String str12 = builder0.script;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.storeStatistics(false);
        java.lang.String str9 = builder0.getscript();
        builder0.setskipInitialImport(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSIZE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition2.mongoClientOptions;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "size" + "'", str5, "size");
        org.junit.Assert.assertNull(mongoClientOptions6);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder66.storeStatistics(true);
        builder66.settypeName("type");
        builder66.mongoLocalPassword = "localhost";
        boolean boolean73 = builder66.skipInitialImport;
        org.bson.types.BSONTimestamp bSONTimestamp74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder66.initialTimestamp(bSONTimestamp74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getScriptType();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        boolean boolean6 = mongoDBRiverDefinition2.isMongoUseSSL();
        java.lang.String str7 = mongoDBRiverDefinition2.getPARENT_TYPES_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "port" + "'", str3, "port");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "parent_types" + "'", str7, "parent_types");
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("drop_collection", "include_fields", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str4 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "actions" + "'", str4, "actions");
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition5.getDEFAULT_DB_HOST();
        int int8 = mongoDBRiverDefinition5.getDEFAULT_DB_PORT();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 27017 + "'", int8 == 27017);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(false);
        boolean boolean9 = builder8.getdropCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoAdminPassword("hi!");
        com.mongodb.BasicDBObject basicDBObject12 = builder8.getmongoOplogFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder8.advancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(basicDBObject12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(1);
        java.util.Set<java.lang.String> strSet10 = builder9.parentTypes;
        builder9.setskipInitialImport(true);
        java.lang.String str13 = builder9.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int7 = mongoDBRiverDefinition2.getDEFAULT_BULK_ACTIONS();
        org.elasticsearch.common.logging.ESLogger eSLogger8 = mongoDBRiverDefinition2.getlogger();
        boolean boolean9 = mongoDBRiverDefinition2.getskipInitialImport();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.parentTypes;
        boolean boolean11 = mongoDBRiverDefinition2.isDropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1000 + "'", int7 == 1000);
        org.junit.Assert.assertNotNull(eSLogger8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        java.lang.String str7 = mongoDBRiverDefinition1.getCONNECTION_TIMEOUT();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bulk" + "'", str5, "bulk");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        boolean boolean7 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null.null" + "'", str5, "null.null");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.settypeName("include_collection");
        boolean boolean8 = builder0.getimportAllCollections();
        builder0.setmongoLocalUser("store_statistics");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder12.mongoServers = serverAddressList20;
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        builder24.disableIndexRefresh = false;
        java.lang.String str31 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        builder24.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet48);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.includeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder0.socketTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder0.mongoGridFS(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        java.util.Set<java.lang.String> strSet16 = builder15.includeFields;
        java.util.Set<java.lang.String> strSet17 = builder15.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder15);
        java.lang.String str19 = mongoDBRiverDefinition18.getIncludeCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        java.lang.String str9 = mongoDBRiverDefinition8.getIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        boolean boolean9 = builder0.getstoreStatistics();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder23.setmongoOplogFilter(basicDBObject27);
        boolean boolean29 = builder23.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder23.socketTimeout((int) ' ');
        java.lang.String str32 = builder31.mongoCollection;
        int int33 = builder31.throttleSize;
        java.lang.Object obj34 = docScoreSearchScript0.unwrap((java.lang.Object) builder31);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(1);
        boolean boolean10 = builder9.getadvancedTransformation();
        java.lang.String str11 = builder9.statisticsIndexName;
        boolean boolean12 = builder9.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.includeCollection("secondary_read_preference");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoGridFS(true);
        java.lang.String str43 = builder42.gettypeName();
        builder42.setimportAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder42.script("store_statistics");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        java.util.Set<java.lang.String> strSet16 = builder15.includeFields;
        java.util.Set<java.lang.String> strSet17 = builder15.excludeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str19 = builder18.typeName;
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder18.mongoCollectionFilter = basicDBObject20;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder18.mongoOplogFilter = basicDBObject22;
        builder18.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder18.typeName("secondary_read_preference");
        builder18.mongoSSLVerifyCertificate = false;
        boolean boolean30 = builder18.getadvancedTransformation();
        builder18.setincludeCollection("collection");
        builder18.dropCollection = false;
        java.lang.String str35 = builder18.getindexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.mongoCollection;
        builder36.setmongoUseSSL(false);
        builder36.setconnectTimeout(0);
        boolean boolean42 = builder36.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder36.mongoAdminPassword("exclude_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str46 = builder45.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str48 = builder47.typeName;
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder47.mongoCollectionFilter = basicDBObject49;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder47.mongoUseSSL(true);
        java.lang.String[] strArray62 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        builder52.setparentTypes((java.util.Set<java.lang.String>) strSet63);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder67 = builder52.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str69 = builder68.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str71 = builder70.typeName;
        com.mongodb.BasicDBObject basicDBObject72 = null;
        builder70.mongoCollectionFilter = basicDBObject72;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder70.mongoUseSSL(true);
        java.lang.String[] strArray85 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        builder75.setparentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder89 = builder68.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder90 = builder67.parentTypes((java.util.Set<java.lang.String>) strSet86);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder91 = builder45.includeFields((java.util.Set<java.lang.String>) strSet86);
        builder44.includeFields = strSet86;
        builder18.includeFields = strSet86;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder15.excludeFields((java.util.Set<java.lang.String>) strSet86);
        boolean boolean95 = builder94.disableIndexRefresh;
        int int96 = builder94.getthrottleSize();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setriverName("");
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.riverName("socket_timeout");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str11 = builder0.script;
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str7 = mongoDBRiverDefinition1.getScript();
        java.lang.String str8 = mongoDBRiverDefinition1.riverIndexName;
        boolean boolean9 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        java.lang.String str10 = mongoDBRiverDefinition1.getCREDENTIALS_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "localhost" + "'", str6, "localhost");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "credentials" + "'", str10, "credentials");
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        boolean boolean9 = builder8.getmongoGridFS();
        boolean boolean10 = builder8.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        builder0.mongoCollection = "flush_interval";
        builder0.setadvancedTransformation(true);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList5 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str6 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getRiverName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serverAddressList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "skip_initial_import" + "'", str6, "skip_initial_import");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        int int6 = mongoDBRiverDefinition2.getThrottleSize();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition5.getBULK_TIMEOUT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition5.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getPORT_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition5.getMongoOplogNamespace();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_timeout" + "'", str7, "bulk_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exclude_fields" + "'", str8, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "null.null" + "'", str10, "null.null");
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        builder0.setconnectTimeout(100);
        java.lang.String str6 = builder0.getmongoDb();
        builder0.storeStatistics = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        boolean boolean7 = mongoDBRiverDefinition6.isMongoSecondaryReadPreference();
        java.lang.String str8 = mongoDBRiverDefinition6.getTypeName();
        java.lang.String str9 = mongoDBRiverDefinition6.getINCLUDE_COLLECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition6.getRiverName();
        java.lang.String str11 = mongoDBRiverDefinition6.getMongoLocalUser();
        boolean boolean12 = mongoDBRiverDefinition6.mongoUseSSL;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_collection" + "'", str9, "include_collection");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        java.lang.String[] strArray12 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        builder0.setparentTypes((java.util.Set<java.lang.String>) strSet13);
        builder0.setmongoAdminUser("socket_timeout");
        builder0.setscript("include_fields");
        builder0.advancedTransformation = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        builder0.setscriptType("index");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoSecondaryReadPreference(false);
        boolean boolean18 = builder0.importAllCollections;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder0.mongoSSLVerifyCertificate(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder0.statisticsTypeName("admin");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        builder15.setmongoAdminUser("local");
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder15.getmongoClientOptions();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mongoClientOptions18);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str4 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getRiverName();
        int int8 = mongoDBRiverDefinition2.socketTimeout;
        java.lang.String str9 = mongoDBRiverDefinition2.getPASSWORD_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_requests" + "'", str4, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "drop_collection" + "'", str5, "drop_collection");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "password" + "'", str9, "password");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script" + "'", str10, "script");
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setriverName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray13 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList14 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList14, serverAddressArray13);
        builder6.mongoServers = serverAddressList14;
        java.lang.String str17 = builder6.mongoAdminPassword;
        builder6.dropCollection = false;
        boolean boolean20 = builder6.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder6.indexName("skip_initial_import");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = builder23.statisticsTypeName;
        builder23.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.util.Set<java.lang.String> strSet31 = builder29.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.getmongoClientOptions();
        builder29.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str39 = builder38.typeName;
        com.mongodb.BasicDBObject basicDBObject40 = null;
        builder38.mongoCollectionFilter = basicDBObject40;
        java.lang.String str42 = builder38.mongoAdminUser;
        java.lang.String str43 = builder38.getriverName();
        builder38.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder38.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder38.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition51 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder50);
        int int52 = mongoDBRiverDefinition51.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str53 = mongoDBRiverDefinition51.scriptType;
        boolean boolean54 = mongoDBRiverDefinition51.importAllCollections;
        java.lang.String str55 = mongoDBRiverDefinition51.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList56 = mongoDBRiverDefinition51.mongoServers;
        builder49.setmongoServers(serverAddressList56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        java.util.Set<java.lang.String> strSet60 = builder58.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder58.getmongoClientOptions();
        builder58.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder58);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str66 = builder65.typeName;
        com.mongodb.BasicDBObject basicDBObject67 = null;
        builder65.mongoCollectionFilter = basicDBObject67;
        java.lang.String str69 = builder65.mongoAdminUser;
        builder65.disableIndexRefresh = false;
        java.lang.String str72 = builder65.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str74 = builder73.typeName;
        com.mongodb.BasicDBObject basicDBObject75 = null;
        builder73.mongoCollectionFilter = basicDBObject75;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder73.mongoUseSSL(true);
        java.lang.String[] strArray88 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        builder78.setparentTypes((java.util.Set<java.lang.String>) strSet89);
        builder65.parentTypes = strSet89;
        builder58.excludeFields = strSet89;
        builder49.setincludeFields((java.util.Set<java.lang.String>) strSet89);
        builder29.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder96 = builder23.parentTypes((java.util.Set<java.lang.String>) strSet89);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder97 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet89);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet89);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(serverAddressArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(mongoClientOptions32);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "collection" + "'", str55, "collection");
        org.junit.Assert.assertNotNull(serverAddressList56);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNull(mongoClientOptions61);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = builder0.statisticsTypeName;
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        builder6.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        java.lang.String str20 = builder15.getriverName();
        builder15.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder15.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder15.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        int int29 = mongoDBRiverDefinition28.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str30 = mongoDBRiverDefinition28.scriptType;
        boolean boolean31 = mongoDBRiverDefinition28.importAllCollections;
        java.lang.String str32 = mongoDBRiverDefinition28.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList33 = mongoDBRiverDefinition28.mongoServers;
        builder26.setmongoServers(serverAddressList33);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.getmongoClientOptions();
        builder35.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str43 = builder42.typeName;
        com.mongodb.BasicDBObject basicDBObject44 = null;
        builder42.mongoCollectionFilter = basicDBObject44;
        java.lang.String str46 = builder42.mongoAdminUser;
        builder42.disableIndexRefresh = false;
        java.lang.String str49 = builder42.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str51 = builder50.typeName;
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder50.mongoCollectionFilter = basicDBObject52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = builder50.mongoUseSSL(true);
        java.lang.String[] strArray65 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        builder55.setparentTypes((java.util.Set<java.lang.String>) strSet66);
        builder42.parentTypes = strSet66;
        builder35.excludeFields = strSet66;
        builder26.setincludeFields((java.util.Set<java.lang.String>) strSet66);
        builder6.setexcludeFields((java.util.Set<java.lang.String>) strSet66);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder73 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet66);
        com.mongodb.BasicDBObject basicDBObject74 = builder0.mongoCollectionFilter;
        builder0.setmongoAdminUser("initial_timestamp");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "collection" + "'", str32, "collection");
        org.junit.Assert.assertNotNull(serverAddressList33);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(basicDBObject74);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        java.lang.String str9 = builder0.gettypeName();
        builder0.mongoGridFS = false;
        java.lang.String str12 = builder0.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setconnectTimeout(100);
        java.lang.String str13 = builder0.includeCollection;
        java.lang.String str14 = builder0.typeName;
        java.lang.String str15 = builder0.getmongoLocalUser();
        builder0.mongoSSLVerifyCertificate = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.riverName("localhost");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet7 = mongoDBRiverDefinition6.getIncludeFields();
        java.lang.String str8 = mongoDBRiverDefinition6.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "skip_initial_import" + "'", str8, "skip_initial_import");
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.util.Set<java.lang.String> strSet7 = builder5.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder5.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder5.setmongoOplogFilter(basicDBObject9);
        boolean boolean11 = builder5.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        builder5.setmongoClientOptions(mongoClientOptions14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.util.Set<java.lang.String> strSet18 = builder16.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder16.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = builder20.build();
        java.util.List<com.mongodb.ServerAddress> serverAddressList22 = mongoDBRiverDefinition21.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder5.mongoServers(serverAddressList22);
        builder0.mongoServers = serverAddressList22;
        java.lang.String str25 = builder0.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition21);
        org.junit.Assert.assertNotNull(serverAddressList22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition2.initialTimestamp;
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str7 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str8 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        int int9 = mongoDBRiverDefinition2.throttleSize;
        java.lang.String str10 = mongoDBRiverDefinition2.getINDEX_OBJECT();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disable_index_refresh" + "'", str8, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index" + "'", str10, "index");
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.statisticsTypeName("");
        builder12.setthrottleSize((int) (short) -1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder0.getinitialTimestamp();
        boolean boolean23 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        java.lang.String str29 = builder24.getriverName();
        builder24.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder24.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet36 = builder24.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        int int39 = mongoDBRiverDefinition38.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition38.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder24.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoSSLVerifyCertificate(false);
        builder44.setdisableIndexRefresh(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder5.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        java.lang.String str8 = mongoDBRiverDefinition7.riverName;
        java.lang.String str9 = mongoDBRiverDefinition7.getMongoCollection();
        java.lang.String str10 = mongoDBRiverDefinition7.riverName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        builder0.setskipInitialImport(true);
        java.lang.String[] strArray16 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        builder0.parentTypes = strSet17;
        boolean boolean20 = builder0.mongoSecondaryReadPreference;
        int int21 = builder0.getconnectTimeout();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        builder0.setmongoClientOptions(mongoClientOptions22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = builder0.build();
        java.lang.String str25 = mongoDBRiverDefinition24.getStatisticsTypeName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("ssl", "concurrent_bulk_requests", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?concurrent_bulk_requests?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getScript();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bulk_size" + "'", str8, "bulk_size");
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        java.lang.String str9 = mongoDBRiverDefinition2.statisticsTypeName;
        java.lang.String str10 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = mongoDBRiverDefinition2.initialTimestamp;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.advancedTransformation(true);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder11.getinitialTimestamp();
        builder11.setriverName("null.null");
        builder11.setmongoAdminPassword("throttle_size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(wildcardTimestamp12);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getimportAllCollections();
        java.lang.String str9 = mongoDBRiverDefinition2.mongoLocalPassword;
        java.lang.String str10 = mongoDBRiverDefinition2.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "flush_interval" + "'", str10, "flush_interval");
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext7 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.excludeFields;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "user" + "'", str7, "user");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition43 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder42);
        java.util.Set<java.lang.String> strSet44 = builder42.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder42.getmongoClientOptions();
        builder42.setriverName("");
        boolean boolean48 = builder42.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        builder49.setsocketTimeout(0);
        boolean boolean53 = builder49.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition54 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.typeName;
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder55.mongoCollectionFilter = basicDBObject57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder55.mongoUseSSL(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder60.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder42.includeFields((java.util.Set<java.lang.String>) strSet71);
        builder40.parentTypes = strSet71;
        java.lang.String str77 = builder40.getindexName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        com.mongodb.BasicDBObject basicDBObject12 = builder8.mongoCollectionFilter;
        builder8.mongoUseSSL = true;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder4.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        builder4.mongoServers = serverAddressList12;
        java.lang.String str15 = builder4.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder16.mongoAdminUser;
        builder16.disableIndexRefresh = false;
        java.lang.String str23 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoUseSSL(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        builder16.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeCollection("type");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.util.Set<java.lang.String> strSet50 = builder48.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder48.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject52 = null;
        builder48.setmongoOplogFilter(basicDBObject52);
        boolean boolean54 = builder48.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray55 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList56 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList56, serverAddressArray55);
        builder48.mongoServers = serverAddressList56;
        builder48.typeName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder61 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        java.util.Set<java.lang.String> strSet63 = builder61.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder65 = builder61.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition66 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder61);
        java.util.List<com.mongodb.ServerAddress> serverAddressList67 = mongoDBRiverDefinition66.getMongoServers();
        builder48.mongoServers = serverAddressList67;
        builder4.setmongoServers(serverAddressList67);
        java.util.Set<java.lang.String> strSet70 = builder4.excludeFields;
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNull(mongoClientOptions51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serverAddressArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(serverAddressList67);
        org.junit.Assert.assertNull(strSet70);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        boolean boolean8 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp9 = mongoDBRiverDefinition1.initialTimestamp;
        java.lang.String str10 = mongoDBRiverDefinition1.typeName;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardTimestamp9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition10.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition10.getInitialTimestamp();
        boolean boolean14 = mongoDBRiverDefinition10.isMongoGridFS();
        boolean boolean15 = mongoDBRiverDefinition10.getdisableIndexRefresh();
        int int16 = mongoDBRiverDefinition10.socketTimeout;
        boolean boolean17 = mongoDBRiverDefinition10.disableIndexRefresh;
        java.lang.String str18 = mongoDBRiverDefinition10.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "secondary_read_preference" + "'", str18, "secondary_read_preference");
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.typeName;
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder17.mongoCollectionFilter = basicDBObject19;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder17.mongoAdminPassword("db");
        builder22.disableIndexRefresh = true;
        builder22.setconnectTimeout(1000);
        builder22.setriverIndexName("skip_initial_import");
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) builder22);
        org.bson.types.BSONTimestamp bSONTimestamp30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder22.initialTimestamp(bSONTimestamp30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getNAME_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getBULK_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.isMongoSSLVerifyCertificate();
        boolean boolean7 = mongoDBRiverDefinition1.importAllCollections;
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoAdminPassword();
        java.lang.String str9 = mongoDBRiverDefinition1.getStatisticsIndexName();
        java.lang.String str10 = mongoDBRiverDefinition1.getTHROTTLE_SIZE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition1.riverName;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "name" + "'", str4, "name");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bulk" + "'", str5, "bulk");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "throttle_size" + "'", str10, "throttle_size");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder5.storeStatistics(false);
        builder5.mongoDb = "bulk_size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.BasicDBObject basicDBObject11 = builder0.mongoOplogFilter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = basicDBObject11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(basicDBObject11);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        builder8.setstatisticsTypeName("credentials");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        int int6 = builder0.getsocketTimeout();
        boolean boolean7 = builder0.getmongoGridFS();
        builder0.setimportAllCollections(false);
        builder0.setdisableIndexRefresh(false);
        builder0.setriverIndexName("type");
        builder0.connectTimeout = 1000;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        builder0.setmongoUseSSL(false);
        builder0.setscript("local");
        builder0.settypeName("db");
        builder0.setadvancedTransformation(true);
        boolean boolean17 = builder0.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        java.util.Set<java.lang.String> strSet6 = builder5.getincludeFields();
        builder5.socketTimeout = 10;
        java.util.List<com.mongodb.ServerAddress> serverAddressList9 = builder5.mongoServers;
        builder5.setdisableIndexRefresh(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList9);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = builder0.importAllCollections;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("throttle_size", "include_fields", true);
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?include_fields?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.util.Set<java.lang.String> strSet6 = builder0.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder1);
        java.lang.String str4 = mongoDBRiverDefinition3.getPORT_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition3.getScriptType();
        boolean boolean6 = mongoDBRiverDefinition3.isDisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition3.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition3.getSSL_CONNECTION_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition3.getACTIONS_FIELD();
        int int10 = mongoDBRiverDefinition3.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition3.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = riverSettings12.settings();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "port" + "'", str4, "port");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondary_read_preference" + "'", str7, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition5.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition5.isStoreStatistics();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition5.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition5.getCONCURRENT_BULK_REQUESTS_FIELD();
        int int11 = mongoDBRiverDefinition5.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str12 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "concurrent_bulk_requests" + "'", str10, "concurrent_bulk_requests");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "script" + "'", str12, "script");
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.statisticsIndexName("port");
        boolean boolean9 = builder8.getmongoGridFS();
        java.util.Set<java.lang.String> strSet10 = builder8.getincludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder8.scriptType("script");
        java.util.Set<java.lang.String> strSet13 = builder12.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet13);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        int int10 = mongoDBRiverDefinition9.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList11 = mongoDBRiverDefinition9.mongoServers;
        boolean boolean12 = mongoDBRiverDefinition9.importAllCollections;
        java.lang.String str13 = mongoDBRiverDefinition9.getScriptType();
        java.lang.String str14 = mongoDBRiverDefinition9.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition9.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder5.mongoServers(serverAddressList15);
        java.util.Set<java.lang.String> strSet17 = builder5.getexcludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(serverAddressList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script" + "'", str14, "script");
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.lang.String str7 = mongoDBRiverDefinition2.getTypeName();
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.mongoCollectionFilter;
        java.lang.String str10 = mongoDBRiverDefinition2.getNAME_FIELD();
        boolean boolean11 = mongoDBRiverDefinition2.getmongoGridFS();
        int int12 = mongoDBRiverDefinition2.socketTimeout;
        java.lang.String str13 = mongoDBRiverDefinition2.getNAME_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "name" + "'", str10, "name");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "name" + "'", str13, "name");
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.mongoSecondaryReadPreference(false);
        java.lang.String str11 = builder0.getstatisticsTypeName();
        java.lang.String str12 = builder0.riverIndexName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.mongoLocalUser("exclude_fields");
        builder0.mongoGridFS = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        java.lang.String str12 = builder9.getstatisticsIndexName();
        builder9.setsocketTimeout(10);
        builder9.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder9.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = builder21.getmongoCollectionFilter();
        builder20.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.RiverSettings riverSettings29 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder9.mongoCollectionFilter(basicDBObject27);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp31 = builder9.getinitialTimestamp();
        boolean boolean32 = builder9.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str34 = builder33.typeName;
        com.mongodb.BasicDBObject basicDBObject35 = null;
        builder33.mongoCollectionFilter = basicDBObject35;
        java.lang.String str37 = builder33.mongoAdminUser;
        java.lang.String str38 = builder33.getriverName();
        builder33.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder33.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder33.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet45 = builder33.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder46);
        int int48 = mongoDBRiverDefinition47.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList49 = mongoDBRiverDefinition47.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder33.mongoServers(serverAddressList49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder51 = builder9.mongoServers(serverAddressList49);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder51.mongoSSLVerifyCertificate(false);
        int int54 = builder51.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        java.util.Set<java.lang.String> strSet57 = builder55.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder59 = builder55.statisticsTypeName("bulk_size");
        builder55.includeCollection = "port";
        builder55.setmongoGridFS(false);
        java.lang.String str64 = builder55.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder55.connectTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition67 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder55);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str69 = builder68.typeName;
        builder68.setsocketTimeout(0);
        boolean boolean72 = builder68.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition73 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder68);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str75 = builder74.typeName;
        com.mongodb.BasicDBObject basicDBObject76 = null;
        builder74.mongoCollectionFilter = basicDBObject76;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder79 = builder74.mongoUseSSL(true);
        java.lang.String[] strArray89 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        builder79.setparentTypes((java.util.Set<java.lang.String>) strSet90);
        builder68.setparentTypes((java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder94 = builder55.includeFields((java.util.Set<java.lang.String>) strSet90);
        builder51.setincludeFields((java.util.Set<java.lang.String>) strSet90);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet90);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(wildcardTimestamp31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(serverAddressList49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str8 = mongoDBRiverDefinition2.mongoLocalPassword;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue9 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        boolean boolean10 = mongoDBRiverDefinition2.skipInitialImport;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteSizeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(true);
        builder0.dropCollection = false;
        builder0.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoCollection("include_collection.include_collection");
        boolean boolean19 = builder18.disableIndexRefresh;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.setincludeCollection("script");
        builder0.setmongoDb("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.mongoAdminPassword("db");
        builder20.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        int int25 = mongoDBRiverDefinition24.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition24.mongoServers;
        boolean boolean27 = mongoDBRiverDefinition24.importAllCollections;
        java.lang.String str28 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str29 = mongoDBRiverDefinition24.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition24.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder20.mongoServers(serverAddressList30);
        builder0.mongoServers = serverAddressList30;
        boolean boolean33 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.mongoDb("flush_interval");
        builder0.mongoGridFS = true;
        java.lang.String str38 = builder0.mongoDb;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "script" + "'", str29, "script");
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "flush_interval" + "'", str38, "flush_interval");
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        int int5 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean6 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str7 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.isStoreStatistics();
        int int9 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "admin" + "'", str7, "admin");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder0.importAllCollections(true);
        builder12.mongoCollection = "concurrent_bulk_requests";
        org.bson.types.Binary binary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder12.initialTimestamp(binary15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.lang.String str12 = builder8.getmongoCollection();
        builder8.dropCollection = false;
        builder8.mongoLocalUser = "local";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        java.lang.String str24 = builder20.mongoAdminUser;
        builder20.disableIndexRefresh = false;
        java.lang.String str27 = builder20.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder20.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder29);
        java.util.Set<java.lang.String> strSet31 = builder29.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject33 = null;
        builder29.setmongoOplogFilter(basicDBObject33);
        boolean boolean35 = builder29.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray36 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList37 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList37, serverAddressArray36);
        builder29.mongoServers = serverAddressList37;
        java.lang.String str40 = builder29.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        java.lang.String str45 = builder41.mongoAdminUser;
        builder41.disableIndexRefresh = false;
        java.lang.String str48 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder49.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder49.mongoUseSSL(true);
        java.lang.String[] strArray64 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder54.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        builder41.parentTypes = strSet65;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder29.parentTypes((java.util.Set<java.lang.String>) strSet65);
        builder20.setexcludeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = builder17.includeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder72 = builder8.excludeFields((java.util.Set<java.lang.String>) strSet65);
        java.lang.String str73 = builder72.indexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(mongoClientOptions28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(serverAddressArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        builder5.skipInitialImport = true;
        builder5.scriptType = "bulk_size";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverIndexName();
        java.util.Set<java.lang.String> strSet5 = mongoDBRiverDefinition2.excludeFields;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setconnectTimeout(100);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder0.mongoClientOptions;
        java.util.List<com.mongodb.ServerAddress> serverAddressList14 = null;
        builder0.mongoServers = serverAddressList14;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(mongoClientOptions13);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        com.mongodb.BasicDBObject basicDBObject12 = builder6.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings5, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = riverSettings13.settings();
        org.elasticsearch.river.RiverSettings riverSettings15 = new org.elasticsearch.river.RiverSettings(settings4, strMap14);
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings3, strMap14);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings2, strMap14);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings1, strMap14);
        org.elasticsearch.river.RiverSettings riverSettings19 = new org.elasticsearch.river.RiverSettings(settings0, strMap14);
        org.elasticsearch.common.settings.Settings settings20 = riverSettings19.globalSettings();
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(basicDBObject12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(settings20);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = mongoDBRiverDefinition25.mongoAdminPassword;
        int int27 = mongoDBRiverDefinition25.connectTimeout;
        java.lang.String str28 = mongoDBRiverDefinition25.getScriptType();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition25);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.util.Set<java.lang.String> strSet36 = builder34.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder34.setmongoOplogFilter(basicDBObject38);
        com.mongodb.BasicDBObject basicDBObject40 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings41 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory30.newScript(strMap45);
        java.lang.Object obj47 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory30);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = docScoreSearchScript0.runAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(obj47);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminPassword;
        boolean boolean8 = mongoDBRiverDefinition1.isMongoUseSSL();
        java.lang.String str9 = mongoDBRiverDefinition1.mongoLocalUser;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        java.util.Set<java.lang.String> strSet8 = builder5.parentTypes;
        com.mongodb.BasicDBObject basicDBObject9 = builder5.mongoOplogFilter;
        builder5.riverName = "user";
        boolean boolean12 = builder5.importAllCollections;
        builder5.skipInitialImport = false;
        java.lang.String str15 = builder5.typeName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = mongoDBRiverDefinition25.mongoAdminPassword;
        int int27 = mongoDBRiverDefinition25.connectTimeout;
        java.lang.String str28 = mongoDBRiverDefinition25.getScriptType();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition25);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.util.Set<java.lang.String> strSet36 = builder34.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder34.setmongoOplogFilter(basicDBObject38);
        com.mongodb.BasicDBObject basicDBObject40 = builder34.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings41 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = null;
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory30.newScript(strMap45);
        java.lang.Object obj47 = docScoreSearchScript0.unwrap((java.lang.Object) docScoreNativeScriptFactory30);
        org.apache.lucene.search.Scorer scorer48 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNotNull(executableScript46);
        org.junit.Assert.assertNotNull(obj47);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder9.mongoDb("throttle_size");
        java.lang.String str12 = builder11.indexName;
        builder11.setmongoUseSSL(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.util.Set<java.lang.String> strSet12 = builder8.includeFields;
        java.lang.String str13 = builder8.scriptType;
        java.lang.String str14 = builder8.mongoCollection;
        boolean boolean15 = builder8.getmongoGridFS();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.mongoOplogFilter = basicDBObject15;
        builder11.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder11.mongoServers;
        java.lang.String[] strArray23 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder11.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        builder8.parentTypes = strSet24;
        builder0.excludeFields = strSet24;
        boolean boolean29 = builder0.getstoreStatistics();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder0.mongoClientOptions(mongoClientOptions30);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder31.storeStatistics(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("include_collection.include_collection", "local");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?local?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.mongoAdminPassword("concurrent_requests");
        boolean boolean11 = builder8.getskipInitialImport();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp12 = builder8.getinitialTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardTimestamp12);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str6 = mongoDBRiverDefinition2.getScriptType();
        int int7 = mongoDBRiverDefinition2.socketTimeout;
        java.lang.String str8 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "advanced_transformation" + "'", str8, "advanced_transformation");
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminUser("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.mongoOplogFilter = basicDBObject16;
        builder12.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList20 = builder12.mongoServers;
        boolean boolean21 = builder12.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        int int24 = mongoDBRiverDefinition23.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str25 = mongoDBRiverDefinition23.scriptType;
        boolean boolean26 = mongoDBRiverDefinition23.importAllCollections;
        java.lang.String str27 = mongoDBRiverDefinition23.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList28 = mongoDBRiverDefinition23.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder12.mongoServers(serverAddressList28);
        builder0.setmongoServers(serverAddressList28);
        builder0.setindexName("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject33 = builder0.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.riverIndexName("collection");
        builder0.scriptType = "local";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(serverAddressList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "collection" + "'", str27, "collection");
        org.junit.Assert.assertNotNull(serverAddressList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(basicDBObject33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.mongoCollection;
        int int7 = mongoDBRiverDefinition5.getSocketTimeout();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.disableIndexRefresh = true;
        builder5.setconnectTimeout(1000);
        builder5.setriverIndexName("skip_initial_import");
        builder5.includeCollection = "port";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = builder14.socketTimeout((int) ' ');
        java.lang.String str23 = builder22.mongoCollection;
        int int24 = builder22.throttleSize;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder25.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoUseSSL(true);
        builder25.connectTimeout = (byte) -1;
        builder25.setsocketTimeout((int) (short) 1);
        java.lang.String str35 = builder25.getstatisticsTypeName();
        builder25.setincludeCollection("script");
        builder25.setmongoDb("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str41 = builder40.typeName;
        com.mongodb.BasicDBObject basicDBObject42 = null;
        builder40.mongoCollectionFilter = basicDBObject42;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder40.mongoAdminPassword("db");
        builder45.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        int int50 = mongoDBRiverDefinition49.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList51 = mongoDBRiverDefinition49.mongoServers;
        boolean boolean52 = mongoDBRiverDefinition49.importAllCollections;
        java.lang.String str53 = mongoDBRiverDefinition49.getScriptType();
        java.lang.String str54 = mongoDBRiverDefinition49.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList55 = mongoDBRiverDefinition49.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder45.mongoServers(serverAddressList55);
        builder25.mongoServers = serverAddressList55;
        builder22.setmongoServers(serverAddressList55);
        builder5.setmongoServers(serverAddressList55);
        java.lang.String str60 = builder5.getmongoCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(serverAddressList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "script" + "'", str54, "script");
        org.junit.Assert.assertNotNull(serverAddressList55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition6.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition6.getLOCAL_DB_FIELD();
        boolean boolean9 = mongoDBRiverDefinition6.dropCollection;
        boolean boolean10 = mongoDBRiverDefinition6.getmongoGridFS();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "local" + "'", str8, "local");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        int int4 = mongoDBRiverDefinition1.socketTimeout;
        java.lang.String str5 = mongoDBRiverDefinition1.getCOLLECTION_FIELD();
        int int6 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        int int7 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "collection" + "'", str5, "collection");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27017 + "'", int6 == 27017);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript4 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript4.setNextScore((float) (byte) 1);
        java.lang.Object obj8 = docScoreSearchScript4.unwrap((java.lang.Object) (-1));
        java.lang.Object obj10 = docScoreSearchScript4.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory12 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        com.mongodb.BasicDBObject basicDBObject20 = builder14.getmongoCollectionFilter();
        builder13.mongoCollectionFilter = basicDBObject20;
        org.elasticsearch.script.ExecutableScript executableScript22 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject20);
        org.elasticsearch.common.settings.Settings settings23 = null;
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory25 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder27);
        java.util.Set<java.lang.String> strSet29 = builder27.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder27.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder27.setmongoOplogFilter(basicDBObject31);
        com.mongodb.BasicDBObject basicDBObject33 = builder27.getmongoCollectionFilter();
        builder26.mongoCollectionFilter = basicDBObject33;
        org.elasticsearch.script.ExecutableScript executableScript35 = docScoreNativeScriptFactory25.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings36 = new org.elasticsearch.river.RiverSettings(settings24, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.river.RiverSettings riverSettings37 = new org.elasticsearch.river.RiverSettings(settings23, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        org.elasticsearch.script.ExecutableScript executableScript38 = docScoreNativeScriptFactory12.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject33);
        docScoreSearchScript4.setNextVar("actions", (java.lang.Object) basicDBObject33);
        docScoreSearchScript0.setNextVar("port", (java.lang.Object) docScoreSearchScript4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str42 = builder41.typeName;
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder41.mongoCollectionFilter = basicDBObject43;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder41.mongoUseSSL(true);
        builder41.connectTimeout = (byte) -1;
        builder41.setsocketTimeout((int) (short) 1);
        java.lang.String str51 = builder41.getstatisticsTypeName();
        java.lang.String str52 = builder41.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder41);
        java.lang.Object obj54 = docScoreSearchScript0.unwrap((java.lang.Object) builder41);
        java.lang.String str55 = builder41.getstatisticsIndexName();
        builder41.mongoAdminUser = "bulk_timeout";
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-1) + "'", obj8, (-1));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "bulk" + "'", obj10, "bulk");
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(basicDBObject20);
        org.junit.Assert.assertNotNull(executableScript22);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(basicDBObject33);
        org.junit.Assert.assertNotNull(executableScript35);
        org.junit.Assert.assertNotNull(executableScript38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getTypeName();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp6 = mongoDBRiverDefinition1.getInitialTimestamp();
        java.lang.String str7 = mongoDBRiverDefinition1.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardTimestamp6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "include_collection" + "'", str8, "include_collection");
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        java.lang.String str10 = builder8.typeName;
        boolean boolean11 = builder8.getimportAllCollections();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getSCRIPT_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        int int6 = mongoDBRiverDefinition1.throttleSize;
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition1.getMongoOplogFilter();
        java.lang.String str8 = mongoDBRiverDefinition1.getMongoCollection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "script" + "'", str4, "script");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(basicDBObject7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        builder15.includeCollection = "filter";
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = builder15.mongoServers;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(serverAddressList18);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        builder0.setstatisticsTypeName("servers");
        boolean boolean11 = builder0.advancedTransformation;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.riverIndexName("advanced_transformation");
        boolean boolean10 = builder5.getdropCollection();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.lang.String str4 = mongoDBRiverDefinition2.riverName;
        java.lang.String str5 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getDISABLE_INDEX_REFRESH_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "advanced_transformation" + "'", str5, "advanced_transformation");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disable_index_refresh" + "'", str6, "disable_index_refresh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.mongoUseSSL = true;
        boolean boolean9 = builder0.mongoSecondaryReadPreference;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition5.getSTORE_STATISTICS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getStatisticsIndexName();
        java.lang.String str10 = mongoDBRiverDefinition5.mongoAdminPassword;
        boolean boolean11 = mongoDBRiverDefinition5.importAllCollections;
        boolean boolean12 = mongoDBRiverDefinition5.isDisableIndexRefresh();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder2);
        java.lang.String str5 = mongoDBRiverDefinition4.getPORT_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition4.getScriptType();
        boolean boolean7 = mongoDBRiverDefinition4.isDisableIndexRefresh();
        java.lang.String str8 = mongoDBRiverDefinition4.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition4.getSSL_CONNECTION_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition4.getACTIONS_FIELD();
        int int11 = mongoDBRiverDefinition4.getDEFAULT_DB_PORT();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition4.getMongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject12);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "port" + "'", str5, "port");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondary_read_preference" + "'", str8, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ssl" + "'", str9, "ssl");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "actions" + "'", str10, "actions");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27017 + "'", int11 == 27017);
        org.junit.Assert.assertNotNull(basicDBObject12);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str3 = builder2.typeName;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder2.mongoCollectionFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder2.mongoUseSSL(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        builder7.setparentTypes((java.util.Set<java.lang.String>) strSet18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet18);
        builder0.setdisableIndexRefresh(false);
        java.lang.String str24 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = builder0.advancedTransformation(true);
        java.lang.String str27 = builder26.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        java.lang.String str6 = builder0.getmongoLocalUser();
        java.lang.String str7 = builder0.getmongoCollection();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("concurrent_bulk_requests");
        org.bson.types.Binary binary10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.initialTimestamp(binary10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoAdminPassword("exclude_fields");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder8.mongoClientOptions;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        boolean boolean16 = builder10.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder10.mongoServers = serverAddressList18;
        java.lang.String str21 = builder10.mongoAdminPassword;
        java.lang.String str22 = builder10.getscriptType();
        java.lang.String str23 = builder10.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder10.connectTimeout((int) (short) 0);
        builder25.typeName = "credentials";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.typeName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.mongoCollectionFilter = basicDBObject30;
        java.lang.String str32 = builder28.mongoAdminUser;
        builder28.disableIndexRefresh = false;
        java.lang.String str35 = builder28.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder28.getmongoClientOptions();
        int int37 = builder28.connectTimeout;
        boolean boolean38 = builder28.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition40 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder39);
        java.util.Set<java.lang.String> strSet41 = builder39.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder39.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject43 = null;
        builder39.setmongoOplogFilter(basicDBObject43);
        boolean boolean45 = builder39.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder39.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet48 = builder47.excludeFields;
        builder47.setriverName("hi!");
        builder47.setmongoGridFS(true);
        builder47.setmongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder47.mongoAdminPassword("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder47.statisticsIndexName("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject59 = builder58.getmongoCollectionFilter();
        builder28.mongoOplogFilter = basicDBObject59;
        builder25.mongoOplogFilter = basicDBObject59;
        builder8.setmongoCollectionFilter(basicDBObject59);
        boolean boolean63 = builder8.getdisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNull(mongoClientOptions42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(basicDBObject59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.mongoOplogFilter = basicDBObject15;
        builder11.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder11.mongoServers;
        java.lang.String[] strArray23 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder11.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        builder8.parentTypes = strSet24;
        builder0.excludeFields = strSet24;
        builder0.statisticsIndexName = "drop_collection";
        builder0.setstatisticsIndexName("localhost");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminUser("hi!");
        builder11.throttleSize = (-1);
        builder11.connectTimeout = 1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        builder13.setthrottleSize((int) (byte) 1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        builder5.setparentTypes((java.util.Set<java.lang.String>) strSet16);
        builder5.setriverName("index");
        builder5.mongoCollection = "secondary_read_preference";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder5.mongoLocalUser("local");
        builder24.mongoUseSSL = true;
        builder24.connectTimeout = (byte) 0;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.setincludeCollection("script");
        builder0.setmongoDb("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.mongoAdminPassword("db");
        builder20.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        int int25 = mongoDBRiverDefinition24.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition24.mongoServers;
        boolean boolean27 = mongoDBRiverDefinition24.importAllCollections;
        java.lang.String str28 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str29 = mongoDBRiverDefinition24.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition24.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder20.mongoServers(serverAddressList30);
        builder0.mongoServers = serverAddressList30;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder0.script("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder0.storeStatistics(true);
        builder0.statisticsIndexName = "null.null";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "script" + "'", str29, "script");
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoGridFS();
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str11 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getRiverName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "options" + "'", str11, "options");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        int int12 = mongoDBRiverDefinition11.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList13 = mongoDBRiverDefinition11.mongoServers;
        boolean boolean14 = mongoDBRiverDefinition11.importAllCollections;
        java.util.List<com.mongodb.ServerAddress> serverAddressList15 = mongoDBRiverDefinition11.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder9.mongoServers(serverAddressList15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.typeName;
        com.mongodb.BasicDBObject basicDBObject19 = null;
        builder17.mongoCollectionFilter = basicDBObject19;
        java.lang.String str21 = builder17.mongoAdminUser;
        builder17.disableIndexRefresh = false;
        java.lang.String str24 = builder17.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder17.mongoClientOptions;
        builder17.importAllCollections = false;
        builder17.setmongoSecondaryReadPreference(false);
        builder17.setstatisticsTypeName("exclude_fields");
        com.mongodb.BasicDBObject basicDBObject32 = builder17.mongoOplogFilter;
        boolean boolean33 = builder17.getmongoGridFS();
        builder17.script = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        java.lang.String str41 = builder36.getriverName();
        builder36.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder45 = builder36.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = builder36.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        int int50 = mongoDBRiverDefinition49.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str51 = mongoDBRiverDefinition49.scriptType;
        boolean boolean52 = mongoDBRiverDefinition49.importAllCollections;
        java.lang.String str53 = mongoDBRiverDefinition49.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList54 = mongoDBRiverDefinition49.mongoServers;
        builder47.setmongoServers(serverAddressList54);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        java.util.Set<java.lang.String> strSet58 = builder56.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder56.getmongoClientOptions();
        builder56.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition62 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder56);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder63 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str64 = builder63.typeName;
        com.mongodb.BasicDBObject basicDBObject65 = null;
        builder63.mongoCollectionFilter = basicDBObject65;
        java.lang.String str67 = builder63.mongoAdminUser;
        builder63.disableIndexRefresh = false;
        java.lang.String str70 = builder63.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder71 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str72 = builder71.typeName;
        com.mongodb.BasicDBObject basicDBObject73 = null;
        builder71.mongoCollectionFilter = basicDBObject73;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder71.mongoUseSSL(true);
        java.lang.String[] strArray86 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet87 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet87, strArray86);
        builder76.setparentTypes((java.util.Set<java.lang.String>) strSet87);
        builder63.parentTypes = strSet87;
        builder56.excludeFields = strSet87;
        builder47.setincludeFields((java.util.Set<java.lang.String>) strSet87);
        builder17.setexcludeFields((java.util.Set<java.lang.String>) strSet87);
        builder9.parentTypes = strSet87;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(serverAddressList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serverAddressList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(mongoClientOptions25);
        org.junit.Assert.assertNull(basicDBObject32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "collection" + "'", str53, "collection");
        org.junit.Assert.assertNotNull(serverAddressList54);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNull(mongoClientOptions59);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        int int7 = mongoDBRiverDefinition2.connectTimeout;
        boolean boolean8 = mongoDBRiverDefinition2.dropCollection;
        java.lang.String str9 = mongoDBRiverDefinition2.getBULK_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk" + "'", str9, "bulk");
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder0.getmongoGridFS();
        java.lang.String str7 = builder0.statisticsIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.riverIndexName("index");
        boolean boolean10 = builder9.getmongoSSLVerifyCertificate();
        java.lang.String str11 = builder9.getmongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "db" + "'", str11, "db");
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        builder8.setincludeCollection("parent_types");
        builder8.setconnectTimeout((int) (short) -1);
        java.lang.String str16 = builder8.getmongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoGridFS();
        com.mongodb.MongoClientOptions mongoClientOptions6 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str7 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getMongoDb();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.mongoOplogFilter;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "options" + "'", str4, "options");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(mongoClientOptions6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "port" + "'", str7, "port");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(basicDBObject9);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str3 = mongoDBRiverDefinition1.getUSER_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getScriptType();
        java.lang.String str5 = mongoDBRiverDefinition1.getCONCURRENT_BULK_REQUESTS_FIELD();
        org.elasticsearch.common.logging.ESLogger eSLogger6 = mongoDBRiverDefinition1.getlogger();
        boolean boolean7 = mongoDBRiverDefinition1.getstoreStatistics();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "user" + "'", str3, "user");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "concurrent_bulk_requests" + "'", str5, "concurrent_bulk_requests");
        org.junit.Assert.assertNotNull(eSLogger6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getPASSWORD_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition10.indexName;
        java.lang.String str13 = mongoDBRiverDefinition10.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "password" + "'", str11, "password");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondary_read_preference" + "'", str13, "secondary_read_preference");
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder8.socketTimeout((int) (short) 0);
        builder8.setriverIndexName("connect_timeout");
        builder8.setincludeCollection("include_collection");
        builder8.setimportAllCollections(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        builder0.mongoSSLVerifyCertificate = false;
        boolean boolean12 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.script("flush_interval");
        builder0.mongoGridFS = false;
        builder0.setmongoAdminUser("servers");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.util.Set<java.lang.String> strSet19 = builder17.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder17.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject21 = null;
        builder17.setmongoOplogFilter(basicDBObject21);
        boolean boolean23 = builder17.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray24 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList25 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList25, serverAddressArray24);
        builder17.mongoServers = serverAddressList25;
        java.lang.String str28 = builder17.mongoAdminPassword;
        java.lang.String str29 = builder17.getscriptType();
        java.lang.String str30 = builder17.gettypeName();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder17);
        org.apache.lucene.index.AtomicReaderContext atomicReaderContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextReader(atomicReaderContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serverAddressArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory8 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        com.mongodb.BasicDBObject basicDBObject16 = builder10.getmongoCollectionFilter();
        builder9.mongoCollectionFilter = basicDBObject16;
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory21 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.util.Set<java.lang.String> strSet25 = builder23.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder23.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder23.setmongoOplogFilter(basicDBObject27);
        com.mongodb.BasicDBObject basicDBObject29 = builder23.getmongoCollectionFilter();
        builder22.mongoCollectionFilter = basicDBObject29;
        org.elasticsearch.script.ExecutableScript executableScript31 = docScoreNativeScriptFactory21.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.RiverSettings riverSettings32 = new org.elasticsearch.river.RiverSettings(settings20, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.river.RiverSettings riverSettings33 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        org.elasticsearch.script.ExecutableScript executableScript34 = docScoreNativeScriptFactory8.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject29);
        docScoreSearchScript0.setNextVar("actions", (java.lang.Object) basicDBObject29);
        org.apache.lucene.search.Scorer scorer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(basicDBObject29);
        org.junit.Assert.assertNotNull(executableScript31);
        org.junit.Assert.assertNotNull(executableScript34);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getMongoOplogNamespace();
        java.lang.String str12 = mongoDBRiverDefinition10.getRiverName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "null.null" + "'", str11, "null.null");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.util.Set<java.lang.String> strSet13 = builder11.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder11.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.setmongoOplogFilter(basicDBObject15);
        boolean boolean17 = builder11.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder11.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet20 = builder19.excludeFields;
        builder19.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = builder19.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject25 = builder19.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str27 = builder26.typeName;
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder26.mongoCollectionFilter = basicDBObject28;
        java.lang.String str30 = builder26.mongoAdminUser;
        builder26.disableIndexRefresh = false;
        java.lang.String str33 = builder26.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder26.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder35.setmongoOplogFilter(basicDBObject39);
        boolean boolean41 = builder35.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray42 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList43 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList43, serverAddressArray42);
        builder35.mongoServers = serverAddressList43;
        java.lang.String str46 = builder35.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str48 = builder47.typeName;
        com.mongodb.BasicDBObject basicDBObject49 = null;
        builder47.mongoCollectionFilter = basicDBObject49;
        java.lang.String str51 = builder47.mongoAdminUser;
        builder47.disableIndexRefresh = false;
        java.lang.String str54 = builder47.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.typeName;
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder55.mongoCollectionFilter = basicDBObject57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder55.mongoUseSSL(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder60.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        builder47.parentTypes = strSet71;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder35.parentTypes((java.util.Set<java.lang.String>) strSet71);
        builder26.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder77 = builder19.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = builder0.includeFields((java.util.Set<java.lang.String>) strSet71);
        builder78.setriverIndexName("user");
        boolean boolean81 = builder78.storeStatistics;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(mongoClientOptions14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(basicDBObject25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(mongoClientOptions34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serverAddressArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        boolean boolean12 = mongoDBRiverDefinition10.dropCollection;
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp13 = mongoDBRiverDefinition10.getInitialTimestamp();
        java.lang.String str14 = mongoDBRiverDefinition10.getStatisticsIndexName();
        com.mongodb.MongoClientOptions mongoClientOptions15 = mongoDBRiverDefinition10.getMongoClientOptions();
        java.lang.String str16 = mongoDBRiverDefinition10.getMongoOplogNamespace();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardTimestamp13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "null.null" + "'", str16, "null.null");
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean5 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getRiverIndexName();
        java.lang.String str8 = mongoDBRiverDefinition2.includeCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "port" + "'", str3, "port");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "secondary_read_preference" + "'", str6, "secondary_read_preference");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.riverIndexName("disable_index_refresh");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder6.connectTimeout((int) (byte) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getEXCLUDE_FIELDS_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        boolean boolean9 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.util.Set<java.lang.String> strSet10 = mongoDBRiverDefinition2.parentTypes;
        java.util.Set<java.lang.String> strSet11 = mongoDBRiverDefinition2.getExcludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = mongoDBRiverDefinition2.getMongoServers();
        boolean boolean13 = mongoDBRiverDefinition2.isImportAllCollections();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exclude_fields" + "'", str7, "exclude_fields");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.typeName;
        builder0.mongoAdminPassword = "";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.script("localhost");
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.riverName("concurrent_requests");
        builder0.setriverIndexName("socket_timeout");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getSIZE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue7 = mongoDBRiverDefinition5.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str8 = mongoDBRiverDefinition5.getSSL_CONNECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition5.getmongoUseSSL();
        boolean boolean10 = mongoDBRiverDefinition5.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "size" + "'", str6, "size");
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ssl" + "'", str8, "ssl");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean8 = mongoDBRiverDefinition2.getadvancedTransformation();
        java.lang.String str9 = mongoDBRiverDefinition2.script;
        boolean boolean10 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str11 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        boolean boolean12 = mongoDBRiverDefinition2.mongoSecondaryReadPreference;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ssl_verify_certificate" + "'", str11, "ssl_verify_certificate");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoDb;
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        java.lang.String str9 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "localhost" + "'", str9, "localhost");
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str7 = mongoDBRiverDefinition1.getScript();
        java.lang.String str8 = mongoDBRiverDefinition1.riverIndexName;
        java.lang.String str9 = mongoDBRiverDefinition1.getFLUSH_INTERVAL_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "localhost" + "'", str6, "localhost");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "flush_interval" + "'", str9, "flush_interval");
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        builder0.includeCollection = "port";
        builder0.setmongoGridFS(false);
        java.lang.String str9 = builder0.getriverIndexName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.connectTimeout(10);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet13 = mongoDBRiverDefinition12.getExcludeFields();
        java.lang.String str14 = mongoDBRiverDefinition12.getBULK_TIMEOUT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bulk_timeout" + "'", str14, "bulk_timeout");
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        builder5.mongoClientOptions = mongoClientOptions6;
        builder5.setmongoCollection("gridfs");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.advancedTransformation(true);
        java.util.List<com.mongodb.ServerAddress> serverAddressList12 = builder5.mongoServers;
        boolean boolean13 = builder5.getmongoSSLVerifyCertificate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serverAddressList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.script("actions");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = builder5.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        builder7.setscript("bulk_timeout");
        java.lang.Class<?> wildcardClass11 = builder7.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder5.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setmongoCollection("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder5.mongoCollection("import_all_collections");
        boolean boolean14 = builder13.advancedTransformation;
        builder13.socketTimeout = 'a';
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoOplogFilter(basicDBObject15);
        builder0.mongoGridFS = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.statisticsIndexName("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.typeName("throttle_size");
        java.lang.String str24 = builder23.getstatisticsTypeName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        boolean boolean6 = mongoDBRiverDefinition1.mongoSSLVerifyCertificate;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        int int6 = mongoDBRiverDefinition2.socketTimeout;
        java.lang.String str7 = mongoDBRiverDefinition2.getOPTIONS_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "options" + "'", str7, "options");
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        boolean boolean4 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getTypeName();
        com.mongodb.BasicDBObject basicDBObject7 = mongoDBRiverDefinition5.mongoCollectionFilter;
        java.lang.String str8 = mongoDBRiverDefinition5.script;
        java.lang.String str9 = mongoDBRiverDefinition5.getStatisticsIndexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        docScoreSearchScript0.setNextScore((float) '4');
        docScoreSearchScript0.setNextScore(1.0f);
        docScoreSearchScript0.setNextScore(1.0f);
        org.apache.lucene.search.Scorer scorer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition8.getParentTypes();
        java.lang.String str10 = mongoDBRiverDefinition8.getBULK_FIELD();
        boolean boolean11 = mongoDBRiverDefinition8.isMongoUseSSL();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bulk" + "'", str10, "bulk");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        int int9 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str11 = mongoDBRiverDefinition10.getFLUSH_INTERVAL_FIELD();
        com.mongodb.BasicDBObject basicDBObject12 = mongoDBRiverDefinition10.getMongoOplogFilter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "flush_interval" + "'", str11, "flush_interval");
        org.junit.Assert.assertNull(basicDBObject12);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        java.lang.String str13 = mongoDBRiverDefinition12.mongoAdminPassword;
        java.lang.String str14 = mongoDBRiverDefinition12.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition12.getMongoOplogNamespace();
        java.lang.String str16 = mongoDBRiverDefinition12.getDROP_COLLECTION_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "local" + "'", str13, "local");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "script_type" + "'", str14, "script_type");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "null.null" + "'", str15, "null.null");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "drop_collection" + "'", str16, "drop_collection");
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList7 = mongoDBRiverDefinition2.mongoServers;
        boolean boolean8 = mongoDBRiverDefinition2.isDropCollection();
        boolean boolean9 = mongoDBRiverDefinition2.getmongoGridFS();
        int int10 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str11 = mongoDBRiverDefinition2.getTHROTTLE_SIZE_FIELD();
        java.lang.String str12 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(serverAddressList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "throttle_size" + "'", str11, "throttle_size");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondary_read_preference" + "'", str12, "secondary_read_preference");
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str4 = mongoDBRiverDefinition2.getCONCURRENT_REQUESTS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDROP_COLLECTION_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getRiverName();
        int int8 = mongoDBRiverDefinition2.socketTimeout;
        boolean boolean9 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "concurrent_requests" + "'", str4, "concurrent_requests");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "drop_collection" + "'", str5, "drop_collection");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ssl" + "'", str6, "ssl");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.typeName("bulk_size");
        java.lang.String str12 = builder11.getmongoLocalUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder11);
        builder11.setstatisticsTypeName("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder11.includeCollection("db");
        builder11.setmongoCollection("concurrent_requests");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        boolean boolean7 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalPassword("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder10);
        java.util.Set<java.lang.String> strSet12 = builder10.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder10.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder10.setmongoOplogFilter(basicDBObject14);
        boolean boolean16 = builder10.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray17 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList18 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList18, serverAddressArray17);
        builder10.mongoServers = serverAddressList18;
        java.lang.String str21 = builder10.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.typeName;
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder22.mongoCollectionFilter = basicDBObject24;
        java.lang.String str26 = builder22.mongoAdminUser;
        builder22.disableIndexRefresh = false;
        java.lang.String str29 = builder22.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        com.mongodb.BasicDBObject basicDBObject32 = null;
        builder30.mongoCollectionFilter = basicDBObject32;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder30.mongoUseSSL(true);
        java.lang.String[] strArray45 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        builder35.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        builder22.parentTypes = strSet46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder50 = builder10.parentTypes((java.util.Set<java.lang.String>) strSet46);
        builder9.setparentTypes((java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = builder9.mongoAdminPassword("");
        builder9.setthrottleSize((int) (byte) 0);
        com.mongodb.BasicDBObject basicDBObject56 = builder9.mongoOplogFilter;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(mongoClientOptions13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serverAddressArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(basicDBObject56);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.getIndexName();
        java.lang.String str8 = mongoDBRiverDefinition2.getADMIN_DB_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition2.getTYPE_FIELD();
        com.mongodb.MongoClientOptions mongoClientOptions10 = mongoDBRiverDefinition2.getMongoClientOptions();
        java.lang.String str11 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "admin" + "'", str8, "admin");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "type" + "'", str9, "type");
        org.junit.Assert.assertNull(mongoClientOptions10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "socket_timeout" + "'", str11, "socket_timeout");
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        builder20.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition26 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str28 = builder27.typeName;
        com.mongodb.BasicDBObject basicDBObject29 = null;
        builder27.mongoCollectionFilter = basicDBObject29;
        java.lang.String str31 = builder27.mongoAdminUser;
        builder27.disableIndexRefresh = false;
        java.lang.String str34 = builder27.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str36 = builder35.typeName;
        com.mongodb.BasicDBObject basicDBObject37 = null;
        builder35.mongoCollectionFilter = basicDBObject37;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder35.mongoUseSSL(true);
        java.lang.String[] strArray50 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        builder40.setparentTypes((java.util.Set<java.lang.String>) strSet51);
        builder27.parentTypes = strSet51;
        builder20.excludeFields = strSet51;
        builder11.setincludeFields((java.util.Set<java.lang.String>) strSet51);
        builder11.setriverName("name");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder11.importAllCollections(true);
        int int61 = builder11.getsocketTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.getADMIN_DB_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.mongoDb;
        java.lang.String str5 = mongoDBRiverDefinition1.getSKIP_INITIAL_IMPORT_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "admin" + "'", str3, "admin");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "skip_initial_import" + "'", str5, "skip_initial_import");
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        com.mongodb.BasicDBObject basicDBObject6 = builder0.getmongoCollectionFilter();
        builder0.setskipInitialImport(false);
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.connectTimeout((int) ' ');
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder0.mongoLocalPassword("collection");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.connectTimeout(32);
        builder15.setimportAllCollections(true);
        boolean boolean18 = builder15.getmongoUseSSL();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.script("hi!");
        builder0.statisticsIndexName = "admin";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.storeStatistics(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder19.socketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str23 = builder22.typeName;
        builder22.setsocketTimeout(0);
        builder22.mongoAdminUser = "collection";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder22.mongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.util.List<com.mongodb.ServerAddress> serverAddressList31 = mongoDBRiverDefinition30.getMongoServers();
        builder21.setmongoServers(serverAddressList31);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(serverAddressList31);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder12.mongoServers = serverAddressList20;
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        builder24.disableIndexRefresh = false;
        java.lang.String str31 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        builder24.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet48);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.includeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = builder0.socketTimeout((int) ' ');
        builder0.scriptType = "import_all_collections";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        int int4 = mongoDBRiverDefinition2.getConnectTimeout();
        boolean boolean5 = mongoDBRiverDefinition2.getmongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        int int7 = mongoDBRiverDefinition2.connectTimeout;
        int int8 = mongoDBRiverDefinition2.connectTimeout;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "actions" + "'", str6, "actions");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getTYPE_FIELD();
        boolean boolean5 = mongoDBRiverDefinition1.isSkipInitialImport();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "type" + "'", str4, "type");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.skipInitialImport(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.mongoCollection;
        builder7.setmongoUseSSL(false);
        builder7.setconnectTimeout(0);
        boolean boolean13 = builder7.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder7);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = builder7.mongoClientOptions(mongoClientOptions15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str18 = builder17.typeName;
        builder17.setsocketTimeout(0);
        boolean boolean21 = builder17.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str24 = builder23.typeName;
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder23.mongoCollectionFilter = basicDBObject25;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder23.mongoUseSSL(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        builder28.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        builder17.setparentTypes((java.util.Set<java.lang.String>) strSet39);
        java.lang.String str43 = builder17.statisticsIndexName;
        builder17.advancedTransformation = false;
        java.lang.String str46 = builder17.mongoDb;
        java.util.List<com.mongodb.ServerAddress> serverAddressList47 = builder17.getmongoServers();
        java.lang.String str48 = builder17.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str50 = builder49.typeName;
        com.mongodb.BasicDBObject basicDBObject51 = null;
        builder49.mongoCollectionFilter = basicDBObject51;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder49.mongoUseSSL(true);
        java.lang.String[] strArray64 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        builder54.setparentTypes((java.util.Set<java.lang.String>) strSet65);
        builder17.includeFields = strSet65;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder16.includeFields((java.util.Set<java.lang.String>) strSet65);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder70 = builder6.excludeFields((java.util.Set<java.lang.String>) strSet65);
        java.lang.String str71 = builder70.getmongoLocalUser();
        builder70.setdropCollection(true);
        boolean boolean74 = builder70.disableIndexRefresh;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(serverAddressList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = builder0.build();
        builder0.setmongoSecondaryReadPreference(true);
        java.lang.String str9 = builder0.mongoLocalPassword;
        org.bson.types.Binary binary10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.initialTimestamp(binary10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getSOCKET_TIMEOUT();
        java.lang.String str6 = mongoDBRiverDefinition2.getSCRIPT_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.indexName;
        java.lang.String str8 = mongoDBRiverDefinition2.script;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "socket_timeout" + "'", str5, "socket_timeout");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script" + "'", str6, "script");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("secondary_read_preference", "index");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?index?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.typeName("secondary_read_preference");
        boolean boolean10 = builder9.skipInitialImport;
        java.lang.String str11 = builder9.getriverName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder9.mongoLocalUser("local");
        java.lang.String str14 = builder13.getmongoLocalPassword();
        java.lang.String str15 = builder13.getindexName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        int int12 = builder8.getthrottleSize();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        com.mongodb.BasicDBObject basicDBObject10 = builder4.getmongoCollectionFilter();
        builder4.setskipInitialImport(false);
        java.lang.String str13 = builder4.mongoLocalPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder4.connectTimeout((int) ' ');
        com.mongodb.BasicDBObject basicDBObject16 = builder15.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.river.RiverSettings riverSettings18 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject16);
        org.elasticsearch.script.ScriptService scriptService19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.parseSettings("disable_index_refresh", "bulk", riverSettings18, scriptService19);
        java.lang.String str21 = mongoDBRiverDefinition20.getHOST_FIELD();
        java.lang.String str22 = mongoDBRiverDefinition20.getSECONDARY_READ_PREFERENCE_FIELD();
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(basicDBObject16);
        org.junit.Assert.assertNotNull(mongoDBRiverDefinition20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "host" + "'", str21, "host");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "secondary_read_preference" + "'", str22, "secondary_read_preference");
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = mongoDBRiverDefinition10.storeStatistics;
        java.lang.String str12 = mongoDBRiverDefinition10.getEXCLUDE_FIELDS_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition10.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        java.lang.String str14 = mongoDBRiverDefinition10.getPASSWORD_FIELD();
        java.util.Set<java.lang.String> strSet15 = mongoDBRiverDefinition10.getParentTypes();
        java.lang.String str16 = mongoDBRiverDefinition10.getBULK_FIELD();
        int int17 = mongoDBRiverDefinition10.throttleSize;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "exclude_fields" + "'", str12, "exclude_fields");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "script" + "'", str13, "script");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "password" + "'", str14, "password");
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk" + "'", str16, "bulk");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.List<com.mongodb.ServerAddress> serverAddressList6 = mongoDBRiverDefinition5.getMongoServers();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean8 = mongoDBRiverDefinition5.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition5.getCONNECTION_TIMEOUT();
        java.lang.String str10 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_FIELD();
        boolean boolean11 = mongoDBRiverDefinition5.isSkipInitialImport();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition5.includeFields;
        java.lang.String str13 = mongoDBRiverDefinition5.getTYPE_FIELD();
        int int14 = mongoDBRiverDefinition5.getThrottleSize();
        java.lang.String str15 = mongoDBRiverDefinition5.getCONCURRENT_BULK_REQUESTS_FIELD();
        java.lang.String str16 = mongoDBRiverDefinition5.statisticsTypeName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(serverAddressList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "connect_timeout" + "'", str9, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "initial_timestamp" + "'", str10, "initial_timestamp");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "type" + "'", str13, "type");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "concurrent_bulk_requests" + "'", str15, "concurrent_bulk_requests");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bulk_size" + "'", str16, "bulk_size");
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int11 = builder0.connectTimeout;
        builder0.setscriptType("user");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        docScoreSearchScript0.setNextScore(100.0f);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder6);
        java.util.Set<java.lang.String> strSet8 = builder6.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder6.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder6.setmongoOplogFilter(basicDBObject10);
        boolean boolean12 = builder6.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder6.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet15 = builder14.excludeFields;
        builder14.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder14.mongoAdminUser("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder14.mongoDb("size");
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) builder14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        java.lang.String str26 = mongoDBRiverDefinition25.mongoAdminPassword;
        int int27 = mongoDBRiverDefinition25.connectTimeout;
        java.lang.String str28 = mongoDBRiverDefinition25.getScriptType();
        java.lang.Object obj29 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition25);
        // The following exception was thrown during execution in test generation
        try {
            float float30 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue6 = mongoDBRiverDefinition1.getDEFAULT_BULK_SIZE();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue6);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        builder8.setmongoGridFS(true);
        builder8.setmongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminPassword("admin");
        java.lang.String str18 = builder17.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder17.script("collection");
        java.lang.String str21 = builder20.getmongoAdminUser();
        org.bson.types.Binary binary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder20.initialTimestamp(binary22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getDEFAULT_DB_HOST();
        com.mongodb.BasicDBObject basicDBObject6 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        java.lang.String str7 = mongoDBRiverDefinition2.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "localhost" + "'", str5, "localhost");
        org.junit.Assert.assertNotNull(basicDBObject6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.apache.lucene.search.Scorer scorer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        int int6 = builder0.getsocketTimeout();
        builder0.socketTimeout = (short) 10;
        java.util.Set<java.lang.String> strSet9 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.indexName = "size";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        builder11.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.includeCollection("name");
        builder23.socketTimeout = 8;
        java.lang.String str26 = builder23.getmongoAdminUser();
        builder23.typeName = "parent_types";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder23.mongoDb("drop_collection");
        java.util.Set<java.lang.String> strSet31 = builder23.getincludeFields();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strSet31);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str9 = builder8.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str12 = builder11.typeName;
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder11.mongoCollectionFilter = basicDBObject13;
        com.mongodb.BasicDBObject basicDBObject15 = null;
        builder11.mongoOplogFilter = basicDBObject15;
        builder11.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = builder11.mongoServers;
        java.lang.String[] strArray23 = new java.lang.String[] { "connect_timeout", "credentials", "connect_timeout" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        builder11.setparentTypes((java.util.Set<java.lang.String>) strSet24);
        builder8.parentTypes = strSet24;
        builder0.excludeFields = strSet24;
        builder0.mongoUseSSL = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition31 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.connectTimeout = 10;
        builder0.skipInitialImport = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("include_collection", "bulk_size");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?bulk_size?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder3);
        java.lang.String str6 = mongoDBRiverDefinition5.getCONNECTION_TIMEOUT();
        int int7 = mongoDBRiverDefinition5.getConnectTimeout();
        java.lang.String str8 = mongoDBRiverDefinition5.getSTORE_STATISTICS_FIELD();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition5.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings10 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject9);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = riverSettings11.settings();
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings0, strMap12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "connect_timeout" + "'", str6, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertNotNull(basicDBObject9);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean9 = mongoDBRiverDefinition2.isAdvancedTransformation();
        java.lang.String str10 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getIncludeCollection();
        java.lang.String str12 = mongoDBRiverDefinition2.getADVANCED_TRANSFORMATION_FIELD();
        java.lang.String str13 = mongoDBRiverDefinition2.scriptType;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "advanced_transformation" + "'", str12, "advanced_transformation");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp5 = mongoDBRiverDefinition2.initialTimestamp;
        int int6 = mongoDBRiverDefinition2.getSocketTimeout();
        boolean boolean7 = mongoDBRiverDefinition2.isMongoSSLVerifyCertificate();
        java.lang.String str8 = mongoDBRiverDefinition2.indexName;
        org.elasticsearch.common.unit.TimeValue timeValue9 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(wildcardTimestamp5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        builder11.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder11.includeCollection("name");
        builder23.socketTimeout = 8;
        java.lang.String str26 = builder23.getmongoAdminUser();
        builder23.typeName = "parent_types";
        builder23.mongoLocalPassword = "user";
        java.lang.String str31 = builder23.getmongoAdminPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("include_collection", "password");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?password?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.mongoAdminUser;
        builder0.setskipInitialImport(true);
        boolean boolean6 = builder0.getimportAllCollections();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getSCRIPT_TYPE_FIELD();
        org.elasticsearch.common.unit.TimeValue timeValue6 = mongoDBRiverDefinition2.getDEFAULT_FLUSH_INTERVAL();
        java.lang.String str7 = mongoDBRiverDefinition2.getFILTER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.getimportAllCollections();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str10 = mongoDBRiverDefinition2.mongoCollection;
        com.mongodb.BasicDBObject basicDBObject11 = mongoDBRiverDefinition2.getMongoCollectionFilter();
        boolean boolean12 = mongoDBRiverDefinition2.isStoreStatistics();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script_type" + "'", str5, "script_type");
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "filter" + "'", str7, "filter");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(basicDBObject11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions8 = builder0.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        boolean boolean15 = builder9.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray16 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList17 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList17, serverAddressArray16);
        builder9.mongoServers = serverAddressList17;
        java.lang.String str20 = builder9.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str22 = builder21.typeName;
        com.mongodb.BasicDBObject basicDBObject23 = null;
        builder21.mongoCollectionFilter = basicDBObject23;
        java.lang.String str25 = builder21.mongoAdminUser;
        builder21.disableIndexRefresh = false;
        java.lang.String str28 = builder21.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str30 = builder29.typeName;
        com.mongodb.BasicDBObject basicDBObject31 = null;
        builder29.mongoCollectionFilter = basicDBObject31;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder29.mongoUseSSL(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        builder34.setparentTypes((java.util.Set<java.lang.String>) strSet45);
        builder21.parentTypes = strSet45;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder9.parentTypes((java.util.Set<java.lang.String>) strSet45);
        builder0.setexcludeFields((java.util.Set<java.lang.String>) strSet45);
        builder0.settypeName("bulk_size");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(serverAddressArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition1.getDB_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition1.getScript();
        boolean boolean7 = mongoDBRiverDefinition1.skipInitialImport;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "initial_timestamp" + "'", str4, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "db" + "'", str5, "db");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder4.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        builder4.mongoServers = serverAddressList12;
        java.lang.String str15 = builder4.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder16.mongoAdminUser;
        builder16.disableIndexRefresh = false;
        java.lang.String str23 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoUseSSL(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        builder16.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeCollection("type");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str51 = mongoDBRiverDefinition50.getCONNECTION_TIMEOUT();
        int int52 = mongoDBRiverDefinition50.getConnectTimeout();
        boolean boolean53 = mongoDBRiverDefinition50.getmongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition50.getACTIONS_FIELD();
        int int55 = mongoDBRiverDefinition50.connectTimeout;
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition50);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "connect_timeout" + "'", str51, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(obj56);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.util.Set<java.lang.String> strSet18 = builder16.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder16.setmongoOplogFilter(basicDBObject20);
        boolean boolean22 = builder16.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        builder16.mongoServers = serverAddressList24;
        java.lang.String str27 = builder16.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.typeName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.mongoCollectionFilter = basicDBObject30;
        java.lang.String str32 = builder28.mongoAdminUser;
        builder28.disableIndexRefresh = false;
        java.lang.String str35 = builder28.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder36.mongoUseSSL(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        builder28.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder16.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder16.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder16.riverName("");
        com.mongodb.BasicDBObject basicDBObject63 = builder62.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder15.mongoCollectionFilter(basicDBObject63);
        builder15.setmongoLocalUser("advanced_transformation");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder40.mongoGridFS(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoUseSSL(false);
        builder44.mongoSecondaryReadPreference = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder44);
        java.util.Set<java.lang.String> strSet48 = mongoDBRiverDefinition47.getExcludeFields();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strSet48);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder8.mongoCollection("drop_collection");
        java.lang.String str12 = builder8.getmongoCollection();
        builder8.dropCollection = false;
        builder8.setmongoCollection("name");
        java.util.Set<java.lang.String> strSet17 = builder8.includeFields;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "drop_collection" + "'", str12, "drop_collection");
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        java.lang.Object obj6 = docScoreSearchScript0.unwrap((java.lang.Object) "bulk");
        docScoreSearchScript0.setNextScore((float) 0L);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        boolean boolean15 = builder9.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder9.mongoGridFS(true);
        builder9.setstatisticsTypeName("servers");
        java.lang.Object obj20 = docScoreSearchScript0.unwrap((java.lang.Object) "servers");
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "bulk" + "'", obj6, "bulk");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "servers" + "'", obj20, "servers");
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        builder0.mongoCollection = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.importAllCollections(false);
        java.lang.String str12 = builder11.getstatisticsTypeName();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "size" + "'", str12, "size");
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getTypeName();
        java.lang.String str5 = mongoDBRiverDefinition2.getMongoLocalUser();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str6 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int7 = mongoDBRiverDefinition5.getDEFAULT_DB_PORT();
        java.lang.String str8 = mongoDBRiverDefinition5.getSTORE_STATISTICS_FIELD();
        java.lang.String str9 = mongoDBRiverDefinition5.getStatisticsIndexName();
        java.lang.String str10 = mongoDBRiverDefinition5.mongoAdminPassword;
        boolean boolean11 = mongoDBRiverDefinition5.importAllCollections;
        java.lang.String str12 = mongoDBRiverDefinition5.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27017 + "'", int7 == 27017);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "store_statistics" + "'", str8, "store_statistics");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ssl_verify_certificate" + "'", str12, "ssl_verify_certificate");
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        builder0.typeName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder13.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.List<com.mongodb.ServerAddress> serverAddressList19 = mongoDBRiverDefinition18.getMongoServers();
        builder0.mongoServers = serverAddressList19;
        builder0.typeName = "exclude_fields";
        java.util.Set<java.lang.String> strSet23 = builder0.includeFields;
        builder0.setskipInitialImport(false);
        builder0.importAllCollections = true;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(serverAddressList19);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str13 = builder12.typeName;
        com.mongodb.BasicDBObject basicDBObject14 = null;
        builder12.mongoCollectionFilter = basicDBObject14;
        java.lang.String str16 = builder12.mongoAdminUser;
        builder12.disableIndexRefresh = false;
        java.lang.String str19 = builder12.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str21 = builder20.typeName;
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder20.mongoCollectionFilter = basicDBObject22;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder20.mongoUseSSL(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        builder25.setparentTypes((java.util.Set<java.lang.String>) strSet36);
        builder12.parentTypes = strSet36;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder40 = builder0.parentTypes((java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder0.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder0.riverName("");
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder0.mongoClientOptions;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(mongoClientOptions47);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        com.mongodb.BasicDBObject basicDBObject8 = builder5.mongoOplogFilter;
        int int9 = builder5.connectTimeout;
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder5.mongoOplogFilter = basicDBObject10;
        java.lang.String str12 = builder5.getmongoLocalUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(basicDBObject8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str9 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "user" + "'", str7, "user");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "actions" + "'", str9, "actions");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str2 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str3 = mongoDBRiverDefinition1.mongoLocalPassword;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getMongoOplogNamespace();
        java.lang.String str6 = mongoDBRiverDefinition1.getLOCAL_DB_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition1.getSSL_CONNECTION_FIELD();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null.null" + "'", str5, "null.null");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "local" + "'", str6, "local");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getUSER_FIELD();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        java.lang.String str9 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str10 = mongoDBRiverDefinition2.mongoDb;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "user" + "'", str7, "user");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "include_fields" + "'", str9, "include_fields");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        builder0.setmongoUseSSL(false);
        builder0.setconnectTimeout(0);
        boolean boolean6 = builder0.getmongoUseSSL();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoClientOptions(mongoClientOptions8);
        builder0.setmongoSSLVerifyCertificate(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.advancedTransformation(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        builder8.setmongoGridFS(true);
        builder8.setmongoCollection("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder8.mongoAdminPassword("admin");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder8.statisticsIndexName("disable_index_refresh");
        builder19.mongoDb = "local";
        boolean boolean22 = builder19.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.scriptType;
        java.lang.String str4 = mongoDBRiverDefinition1.getStatisticsTypeName();
        java.lang.String str5 = mongoDBRiverDefinition1.statisticsIndexName;
        java.lang.String str6 = mongoDBRiverDefinition1.mongoLocalUser;
        java.lang.String str7 = mongoDBRiverDefinition1.getINCLUDE_COLLECTION_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "include_collection" + "'", str7, "include_collection");
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        builder8.setstatisticsIndexName("type");
        builder8.setmongoAdminPassword("ssl_verify_certificate");
        builder8.mongoSSLVerifyCertificate = true;
        builder8.setstatisticsTypeName("");
        builder8.script = "concurrent_bulk_requests";
        java.lang.String str25 = builder8.getmongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean20 = builder17.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str22 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) mongoDBRiverDefinition21);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str26 = builder25.typeName;
        com.mongodb.BasicDBObject basicDBObject27 = null;
        builder25.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder25.mongoUseSSL(true);
        builder25.connectTimeout = (byte) -1;
        builder25.setsocketTimeout((int) (short) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder25.mongoAdminUser("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str38 = builder37.typeName;
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder37.mongoCollectionFilter = basicDBObject39;
        com.mongodb.BasicDBObject basicDBObject41 = null;
        builder37.mongoOplogFilter = basicDBObject41;
        builder37.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList45 = builder37.mongoServers;
        boolean boolean46 = builder37.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder47 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder47);
        int int49 = mongoDBRiverDefinition48.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str50 = mongoDBRiverDefinition48.scriptType;
        boolean boolean51 = mongoDBRiverDefinition48.importAllCollections;
        java.lang.String str52 = mongoDBRiverDefinition48.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList53 = mongoDBRiverDefinition48.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder37.mongoServers(serverAddressList53);
        builder25.setmongoServers(serverAddressList53);
        builder25.setindexName("disable_index_refresh");
        com.mongodb.BasicDBObject basicDBObject58 = builder25.mongoCollectionFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder25.riverIndexName("collection");
        docScoreSearchScript0.setNextVar("bulk_timeout", (java.lang.Object) "collection");
        // The following exception was thrown during execution in test generation
        try {
            float float62 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(serverAddressList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "collection" + "'", str52, "collection");
        org.junit.Assert.assertNotNull(serverAddressList53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(basicDBObject58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoCollection();
        boolean boolean7 = mongoDBRiverDefinition2.getstoreStatistics();
        java.lang.String str8 = mongoDBRiverDefinition2.getCOLLECTION_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getimportAllCollections();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "collection" + "'", str8, "collection");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalUser;
        boolean boolean8 = mongoDBRiverDefinition2.mongoUseSSL;
        java.lang.String str9 = mongoDBRiverDefinition2.getPORT_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "port" + "'", str9, "port");
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet3 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str4 = mongoDBRiverDefinition2.getRiverName();
        java.lang.String str5 = mongoDBRiverDefinition2.mongoLocalPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.mongoSSLVerifyCertificate;
        java.lang.String str4 = mongoDBRiverDefinition2.getGRIDFS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.importAllCollections;
        java.lang.String str6 = mongoDBRiverDefinition2.getINCLUDE_FIELDS_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getScriptType();
        com.mongodb.MongoClientOptions mongoClientOptions8 = mongoDBRiverDefinition2.mongoClientOptions;
        java.lang.String str9 = mongoDBRiverDefinition2.typeName;
        int int10 = mongoDBRiverDefinition2.connectTimeout;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gridfs" + "'", str4, "gridfs");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "include_fields" + "'", str6, "include_fields");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(mongoClientOptions8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        boolean boolean3 = mongoDBRiverDefinition1.advancedTransformation;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition1.includeFields;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder14);
        java.util.Set<java.lang.String> strSet16 = builder14.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder14.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder14.setmongoOplogFilter(basicDBObject18);
        boolean boolean20 = builder14.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray21 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList22 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList22, serverAddressArray21);
        builder14.mongoServers = serverAddressList22;
        java.lang.String str25 = builder14.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder27 = builder14.importAllCollections(true);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder14.skipInitialImport(true);
        docScoreSearchScript0.setNextVar("credentials", (java.lang.Object) true);
        // The following exception was thrown during execution in test generation
        try {
            float float31 = docScoreSearchScript0.runAsFloat();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serverAddressArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder4.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        builder4.mongoServers = serverAddressList12;
        java.lang.String str15 = builder4.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder16.mongoAdminUser;
        builder16.disableIndexRefresh = false;
        java.lang.String str23 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoUseSSL(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        builder16.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeCollection("type");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str51 = mongoDBRiverDefinition50.getCONNECTION_TIMEOUT();
        int int52 = mongoDBRiverDefinition50.getConnectTimeout();
        boolean boolean53 = mongoDBRiverDefinition50.getmongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition50.getACTIONS_FIELD();
        int int55 = mongoDBRiverDefinition50.connectTimeout;
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition50);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder57 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition58 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition59 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder57);
        boolean boolean60 = builder57.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder57.storeStatistics(false);
        java.lang.Object obj63 = docScoreSearchScript0.unwrap((java.lang.Object) builder62);
        org.apache.lucene.search.Scorer scorer64 = null;
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setScorer(scorer64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "connect_timeout" + "'", str51, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(obj63);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addPrefix("connect_timeout", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        java.lang.String str5 = mongoDBRiverDefinition2.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet6 = mongoDBRiverDefinition2.getIncludeFields();
        java.lang.String str7 = mongoDBRiverDefinition2.mongoLocalUser;
        java.lang.String str8 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_FIELD();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "initial_timestamp" + "'", str8, "initial_timestamp");
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        java.lang.String str9 = builder0.getmongoAdminUser();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.mongoAdminPassword("local");
        java.lang.String str12 = builder0.mongoLocalUser;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str14 = mongoDBRiverDefinition13.getINITIAL_TIMESTAMP_FIELD();
        java.lang.String str15 = mongoDBRiverDefinition13.getIMPORT_ALL_COLLECTIONS_FIELD();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "initial_timestamp" + "'", str14, "initial_timestamp");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "import_all_collections" + "'", str15, "import_all_collections");
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder21.socketTimeout((int) (short) 100);
        builder23.riverName = "concurrent_requests";
        boolean boolean26 = builder23.getdropCollection();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("socket_timeout");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?socket_timeout?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        java.lang.String str13 = builder0.gettypeName();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.scriptType("throttle_size");
        builder15.setmongoAdminUser("local");
        boolean boolean18 = builder15.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.throttleSize((int) (short) 1);
        builder15.statisticsTypeName = "parent_types";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        boolean boolean4 = mongoDBRiverDefinition1.importAllCollections;
        boolean boolean5 = mongoDBRiverDefinition1.getmongoSSLVerifyCertificate();
        boolean boolean6 = mongoDBRiverDefinition1.getstoreStatistics();
        java.lang.String str7 = mongoDBRiverDefinition1.mongoAdminPassword;
        java.lang.String str8 = mongoDBRiverDefinition1.getRiverName();
        boolean boolean9 = mongoDBRiverDefinition1.mongoUseSSL;
        int int10 = mongoDBRiverDefinition1.getDEFAULT_DB_PORT();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27017 + "'", int10 == 27017);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        builder0.setmongoOplogFilter(basicDBObject15);
        builder0.mongoGridFS = true;
        java.lang.String str20 = builder0.getscriptType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        builder0.dropCollection = false;
        boolean boolean14 = builder0.getmongoUseSSL();
        builder0.mongoUseSSL = false;
        builder0.statisticsTypeName = "ssl";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet12 = builder0.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        int int15 = mongoDBRiverDefinition14.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList16 = mongoDBRiverDefinition14.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = builder0.mongoServers(serverAddressList16);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.script("script");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str21 = mongoDBRiverDefinition20.typeName;
        java.util.Set<java.lang.String> strSet22 = mongoDBRiverDefinition20.getExcludeFields();
        com.mongodb.MongoClientOptions mongoClientOptions23 = mongoDBRiverDefinition20.getMongoClientOptions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(serverAddressList16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "import_all_collections" + "'", str21, "import_all_collections");
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.advancedTransformation(true);
        builder9.mongoLocalPassword = "gridfs";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        builder9.setdropCollection(false);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.lang.String str9 = builder8.mongoCollection;
        builder8.connectTimeout = 0;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder8);
        java.lang.String str13 = builder8.getmongoLocalPassword();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.getStatisticsTypeName();
        java.lang.String str7 = mongoDBRiverDefinition5.getDEFAULT_DB_HOST();
        boolean boolean8 = mongoDBRiverDefinition5.isStoreStatistics();
        java.util.Set<java.lang.String> strSet9 = mongoDBRiverDefinition5.parentTypes;
        java.lang.String str10 = mongoDBRiverDefinition5.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        int int11 = mongoDBRiverDefinition5.connectTimeout;
        java.lang.String str12 = mongoDBRiverDefinition5.mongoCollection;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bulk_size" + "'", str6, "bulk_size");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "localhost" + "'", str7, "localhost");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "script_type" + "'", str10, "script_type");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        builder0.setstatisticsTypeName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition8 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str9 = builder0.getmongoAdminPassword();
        builder0.setriverIndexName("type");
        java.lang.Class<?> wildcardClass12 = builder0.getClass();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getPORT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition2.getScriptType();
        boolean boolean5 = mongoDBRiverDefinition2.isDisableIndexRefresh();
        java.lang.String str6 = mongoDBRiverDefinition2.getSECONDARY_READ_PREFERENCE_FIELD();
        java.lang.String str7 = mongoDBRiverDefinition2.getSSL_CONNECTION_FIELD();
        java.lang.String str8 = mongoDBRiverDefinition2.getACTIONS_FIELD();
        boolean boolean9 = mongoDBRiverDefinition2.getdropCollection();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "port" + "'", str3, "port");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "secondary_read_preference" + "'", str6, "secondary_read_preference");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ssl" + "'", str7, "ssl");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "actions" + "'", str8, "actions");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        builder0.setsocketTimeout(0);
        builder0.mongoAdminUser = "collection";
        builder0.setmongoGridFS(false);
        builder0.setmongoUseSSL(true);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        boolean boolean22 = builder21.getimportAllCollections();
        builder21.mongoLocalPassword = "user";
        builder21.disableIndexRefresh = false;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        int int8 = builder0.socketTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder10 = builder0.statisticsIndexName("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder10.statisticsTypeName("");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder12.statisticsTypeName("store_statistics");
        builder12.setdropCollection(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory2 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        com.mongodb.BasicDBObject basicDBObject10 = builder4.getmongoCollectionFilter();
        builder3.mongoCollectionFilter = basicDBObject10;
        org.elasticsearch.script.ExecutableScript executableScript12 = docScoreNativeScriptFactory2.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.RiverSettings riverSettings14 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.common.settings.Settings settings15 = riverSettings14.globalSettings();
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript12);
        org.junit.Assert.assertNull(settings15);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        java.lang.String str5 = builder0.getriverName();
        builder0.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.typeName("import_all_collections");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        int int14 = mongoDBRiverDefinition13.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str15 = mongoDBRiverDefinition13.scriptType;
        boolean boolean16 = mongoDBRiverDefinition13.importAllCollections;
        java.lang.String str17 = mongoDBRiverDefinition13.getCOLLECTION_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList18 = mongoDBRiverDefinition13.mongoServers;
        builder11.setmongoServers(serverAddressList18);
        builder11.statisticsIndexName = "name";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder22);
        java.lang.String str25 = mongoDBRiverDefinition24.getCONNECTION_TIMEOUT();
        java.lang.String str26 = mongoDBRiverDefinition24.getCREDENTIALS_FIELD();
        java.lang.String str27 = mongoDBRiverDefinition24.getStatisticsIndexName();
        java.util.Set<java.lang.String> strSet28 = mongoDBRiverDefinition24.getIncludeFields();
        java.util.List<com.mongodb.ServerAddress> serverAddressList29 = mongoDBRiverDefinition24.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = builder11.mongoServers(serverAddressList29);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = builder30.typeName("advanced_transformation");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = builder32.mongoLocalUser("script_type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = builder34.mongoAdminPassword("index");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "collection" + "'", str17, "collection");
        org.junit.Assert.assertNotNull(serverAddressList18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "connect_timeout" + "'", str25, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "credentials" + "'", str26, "credentials");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(serverAddressList29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        com.mongodb.BasicDBObject basicDBObject10 = null;
        builder0.mongoCollectionFilter = basicDBObject10;
        builder0.setdisableIndexRefresh(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoAdminPassword("port");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder16);
        java.util.Set<java.lang.String> strSet18 = builder16.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject20 = null;
        builder16.setmongoOplogFilter(basicDBObject20);
        boolean boolean22 = builder16.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray23 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList24 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList24, serverAddressArray23);
        builder16.mongoServers = serverAddressList24;
        java.lang.String str27 = builder16.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str29 = builder28.typeName;
        com.mongodb.BasicDBObject basicDBObject30 = null;
        builder28.mongoCollectionFilter = basicDBObject30;
        java.lang.String str32 = builder28.mongoAdminUser;
        builder28.disableIndexRefresh = false;
        java.lang.String str35 = builder28.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder36.mongoUseSSL(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        builder41.setparentTypes((java.util.Set<java.lang.String>) strSet52);
        builder28.parentTypes = strSet52;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder56 = builder16.parentTypes((java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder58 = builder16.includeCollection("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder16.indexName("concurrent_bulk_requests");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder62 = builder16.riverName("");
        com.mongodb.BasicDBObject basicDBObject63 = builder62.getmongoCollectionFilter();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder15.mongoCollectionFilter(basicDBObject63);
        builder64.scriptType = "port";
        builder64.setconnectTimeout((int) (short) -1);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serverAddressArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(basicDBObject63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.removePrefix("drop_collection", "port");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?port?^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        org.elasticsearch.common.logging.ESLogger eSLogger4 = mongoDBRiverDefinition2.getlogger();
        java.lang.String str5 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_FIELD();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(eSLogger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "script" + "'", str5, "script");
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.statisticsTypeName("bulk_size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.lang.String str6 = mongoDBRiverDefinition5.mongoCollection;
        int int7 = mongoDBRiverDefinition5.getThrottleSize();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.mongoAdminPassword;
        java.util.Set<java.lang.String> strSet4 = mongoDBRiverDefinition2.excludeFields;
        java.lang.String str5 = mongoDBRiverDefinition2.getFILTER_FIELD();
        java.lang.String str6 = mongoDBRiverDefinition2.getMongoLocalUser();
        java.lang.String str7 = mongoDBRiverDefinition2.getDB_FIELD();
        int int8 = mongoDBRiverDefinition2.getThrottleSize();
        boolean boolean9 = mongoDBRiverDefinition2.advancedTransformation;
        java.lang.String str10 = mongoDBRiverDefinition2.riverName;
        boolean boolean11 = mongoDBRiverDefinition2.getstoreStatistics();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "filter" + "'", str5, "filter");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "db" + "'", str7, "db");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.mongoOplogFilter = basicDBObject4;
        builder0.disableIndexRefresh = true;
        java.util.List<com.mongodb.ServerAddress> serverAddressList8 = builder0.mongoServers;
        boolean boolean9 = builder0.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean11 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder0.statisticsTypeName("flush_interval");
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = builder0.mongoClientOptions(mongoClientOptions14);
        builder0.setmongoGridFS(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(serverAddressList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.lang.String str3 = mongoDBRiverDefinition1.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoCollection();
        java.lang.String str5 = mongoDBRiverDefinition1.getBULK_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ssl_verify_certificate" + "'", str3, "ssl_verify_certificate");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bulk" + "'", str5, "bulk");
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        boolean boolean6 = builder5.storeStatistics;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder5);
        builder5.setmongoCollection("local");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder5.dropCollection(false);
        java.lang.String str12 = builder11.getincludeCollection();
        java.lang.String str13 = builder11.getmongoAdminUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript1 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript1.setNextScore((float) (byte) 1);
        java.lang.Object obj5 = docScoreSearchScript1.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder7 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str8 = builder7.typeName;
        com.mongodb.BasicDBObject basicDBObject9 = null;
        builder7.mongoCollectionFilter = basicDBObject9;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = builder7.mongoAdminPassword("db");
        docScoreSearchScript1.setNextVar("bulk_size", (java.lang.Object) builder7);
        java.lang.Object obj15 = null;
        docScoreSearchScript1.setNextVar("gridfs", obj15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder18);
        java.util.Set<java.lang.String> strSet20 = builder18.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject22 = null;
        builder18.setmongoOplogFilter(basicDBObject22);
        boolean boolean24 = builder18.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray25 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList26 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList26, serverAddressArray25);
        builder18.mongoServers = serverAddressList26;
        java.lang.String str29 = builder18.mongoAdminPassword;
        java.lang.String str30 = builder18.getscriptType();
        java.lang.String str31 = builder18.gettypeName();
        docScoreSearchScript1.setNextVar("advanced_transformation", (java.lang.Object) builder18);
        org.elasticsearch.common.settings.Settings settings33 = null;
        org.elasticsearch.common.settings.Settings settings34 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder35);
        java.util.Set<java.lang.String> strSet37 = builder35.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder35.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject39 = null;
        builder35.setmongoOplogFilter(basicDBObject39);
        boolean boolean41 = builder35.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder43 = builder35.socketTimeout((int) ' ');
        java.lang.String str44 = builder43.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder43.mongoCollection("drop_collection");
        com.mongodb.BasicDBObject basicDBObject47 = builder43.mongoCollectionFilter;
        org.elasticsearch.river.RiverSettings riverSettings48 = new org.elasticsearch.river.RiverSettings(settings34, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.elasticsearch.river.RiverSettings riverSettings49 = new org.elasticsearch.river.RiverSettings(settings33, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        builder18.mongoOplogFilter = basicDBObject47;
        org.elasticsearch.river.RiverSettings riverSettings51 = new org.elasticsearch.river.RiverSettings(settings0, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject47);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + (-1) + "'", obj5, (-1));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serverAddressArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(basicDBObject47);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        java.lang.String str22 = builder21.mongoLocalUser;
        builder21.setdisableIndexRefresh(true);
        builder21.setmongoUseSSL(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder28 = builder21.riverName("script_type");
        java.lang.String str29 = builder21.getscript();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder30 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str31 = builder30.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder37.advancedTransformation(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder53 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str54 = builder53.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str56 = builder55.typeName;
        com.mongodb.BasicDBObject basicDBObject57 = null;
        builder55.mongoCollectionFilter = basicDBObject57;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder60 = builder55.mongoUseSSL(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        builder60.setparentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder74 = builder53.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder75 = builder52.parentTypes((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder76 = builder30.includeFields((java.util.Set<java.lang.String>) strSet71);
        builder21.setexcludeFields((java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder78 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition79 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder78);
        java.util.Set<java.lang.String> strSet80 = builder78.includeFields;
        java.lang.String str81 = builder78.mongoAdminUser;
        builder78.setskipInitialImport(true);
        java.lang.String[] strArray94 = new java.lang.String[] { "local", "localhost", "collection", "store_statistics", "index", "local", "concurrent_bulk_requests", "socket_timeout", "localhost", "bulk_size" };
        java.util.LinkedHashSet<java.lang.String> strSet95 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet95, strArray94);
        builder78.parentTypes = strSet95;
        builder21.includeFields = strSet95;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition99 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        builder5.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder5.connectTimeout(1);
        java.util.Set<java.lang.String> strSet10 = builder9.parentTypes;
        builder9.setskipInitialImport(true);
        builder9.riverIndexName = "bulk";
        builder9.socketTimeout = 'a';
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        boolean boolean5 = builder4.dropCollection;
        com.mongodb.BasicDBObject basicDBObject6 = builder4.mongoOplogFilter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(basicDBObject6);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoUseSSL(true);
        builder0.connectTimeout = (byte) -1;
        builder0.setsocketTimeout((int) (short) 1);
        java.lang.String str10 = builder0.getstatisticsTypeName();
        builder0.setincludeCollection("script");
        builder0.setmongoDb("type");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = builder15.mongoAdminPassword("db");
        builder20.importAllCollections = false;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder23);
        int int25 = mongoDBRiverDefinition24.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList26 = mongoDBRiverDefinition24.mongoServers;
        boolean boolean27 = mongoDBRiverDefinition24.importAllCollections;
        java.lang.String str28 = mongoDBRiverDefinition24.getScriptType();
        java.lang.String str29 = mongoDBRiverDefinition24.getSCRIPT_FIELD();
        java.util.List<com.mongodb.ServerAddress> serverAddressList30 = mongoDBRiverDefinition24.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder31 = builder20.mongoServers(serverAddressList30);
        builder0.mongoServers = serverAddressList30;
        boolean boolean33 = builder0.disableIndexRefresh;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder0.mongoDb("flush_interval");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder35.mongoAdminPassword("include_fields");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder39 = builder37.skipInitialImport(false);
        org.bson.types.BSONTimestamp bSONTimestamp40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder39.initialTimestamp(bSONTimestamp40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ts must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(serverAddressList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "script" + "'", str29, "script");
        org.junit.Assert.assertNotNull(serverAddressList30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory0 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings1 = null;
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.common.settings.Settings settings3 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        com.mongodb.BasicDBObject basicDBObject10 = builder4.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings11 = new org.elasticsearch.river.RiverSettings(settings3, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.RiverSettings riverSettings12 = new org.elasticsearch.river.RiverSettings(settings2, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.river.RiverSettings riverSettings13 = new org.elasticsearch.river.RiverSettings(settings1, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        org.elasticsearch.script.ExecutableScript executableScript14 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject10);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = null;
        org.elasticsearch.script.ExecutableScript executableScript16 = docScoreNativeScriptFactory0.newScript(strMap15);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory17 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings18 = null;
        org.elasticsearch.common.settings.Settings settings19 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder20);
        java.util.Set<java.lang.String> strSet22 = builder20.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject24 = null;
        builder20.setmongoOplogFilter(basicDBObject24);
        com.mongodb.BasicDBObject basicDBObject26 = builder20.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings27 = new org.elasticsearch.river.RiverSettings(settings19, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.river.RiverSettings riverSettings28 = new org.elasticsearch.river.RiverSettings(settings18, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory17.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject26);
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory30 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.common.settings.Settings settings32 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder34 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition35 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder34);
        java.util.Set<java.lang.String> strSet36 = builder34.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder34.setmongoOplogFilter(basicDBObject38);
        com.mongodb.BasicDBObject basicDBObject40 = builder34.getmongoCollectionFilter();
        builder33.mongoCollectionFilter = basicDBObject40;
        org.elasticsearch.river.RiverSettings riverSettings42 = new org.elasticsearch.river.RiverSettings(settings32, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.river.RiverSettings riverSettings43 = new org.elasticsearch.river.RiverSettings(settings31, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript44 = docScoreNativeScriptFactory30.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript45 = docScoreNativeScriptFactory17.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.elasticsearch.script.ExecutableScript executableScript46 = docScoreNativeScriptFactory0.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject40);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(basicDBObject10);
        org.junit.Assert.assertNotNull(executableScript14);
        org.junit.Assert.assertNotNull(executableScript16);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(basicDBObject26);
        org.junit.Assert.assertNotNull(executableScript29);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(basicDBObject40);
        org.junit.Assert.assertNotNull(executableScript44);
        org.junit.Assert.assertNotNull(executableScript45);
        org.junit.Assert.assertNotNull(executableScript46);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = mongoDBRiverDefinition1.getExcludeFields();
        java.lang.String str3 = mongoDBRiverDefinition1.getRiverIndexName();
        java.lang.String str4 = mongoDBRiverDefinition1.getIndexName();
        int int5 = mongoDBRiverDefinition1.connectTimeout;
        boolean boolean6 = mongoDBRiverDefinition1.isDisableIndexRefresh();
        java.lang.String str7 = mongoDBRiverDefinition1.riverIndexName;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        boolean boolean3 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str4 = mongoDBRiverDefinition2.getMongoDb();
        java.lang.String str5 = mongoDBRiverDefinition2.getRiverIndexName();
        boolean boolean6 = mongoDBRiverDefinition2.mongoGridFS;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition2.skipInitialImport;
        boolean boolean9 = mongoDBRiverDefinition2.isImportAllCollections();
        int int10 = mongoDBRiverDefinition2.getConnectTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        builder0.mongoCollection = "flush_interval";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder0.importAllCollections(false);
        com.mongodb.MongoClientOptions mongoClientOptions12 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder11.mongoClientOptions(mongoClientOptions12);
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        boolean boolean5 = mongoDBRiverDefinition2.isMongoSecondaryReadPreference();
        java.lang.String str6 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        boolean boolean7 = mongoDBRiverDefinition2.disableIndexRefresh;
        java.lang.String str8 = mongoDBRiverDefinition2.getRiverName();
        boolean boolean9 = mongoDBRiverDefinition2.skipInitialImport;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "script_type" + "'", str6, "script_type");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.BasicDBObject basicDBObject1 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.convertToBasicDBObject("name");
            org.junit.Assert.fail("Expected exception of type com.mongodb.util.JSONParseException; message: ?name? ^");
        } catch (com.mongodb.util.JSONParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        java.lang.Object obj4 = docScoreSearchScript0.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str7 = builder6.typeName;
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder6.mongoCollectionFilter = basicDBObject8;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = builder6.mongoAdminPassword("db");
        docScoreSearchScript0.setNextVar("bulk_size", (java.lang.Object) builder6);
        java.lang.Object obj14 = null;
        docScoreSearchScript0.setNextVar("gridfs", obj14);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder17 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition18 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition19 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        boolean boolean20 = builder17.getmongoSecondaryReadPreference();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder17);
        java.lang.String str22 = mongoDBRiverDefinition21.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        docScoreSearchScript0.setNextVar("socket_timeout", (java.lang.Object) mongoDBRiverDefinition21);
        // The following exception was thrown during execution in test generation
        try {
            docScoreSearchScript0.setNextDocId(1000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (-1) + "'", obj4, (-1));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "script_type" + "'", str22, "script_type");
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        builder0.setstatisticsIndexName("localhost");
        builder0.mongoLocalPassword = "exclude_fields";
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder18 = builder0.mongoDb("bulk_size");
        java.lang.String str19 = builder18.mongoLocalPassword;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "exclude_fields" + "'", str19, "exclude_fields");
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        boolean boolean8 = mongoDBRiverDefinition2.isSkipInitialImport();
        int int9 = mongoDBRiverDefinition2.getSocketTimeout();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "connect_timeout" + "'", str7, "connect_timeout");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray7 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList8 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList8, serverAddressArray7);
        builder0.mongoServers = serverAddressList8;
        java.lang.String str11 = builder0.mongoAdminPassword;
        java.lang.String str12 = builder0.getscriptType();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition14 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder13);
        java.util.Set<java.lang.String> strSet15 = builder13.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder13.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder13.setmongoOplogFilter(basicDBObject17);
        com.mongodb.BasicDBObject basicDBObject19 = builder13.getmongoCollectionFilter();
        builder0.mongoCollectionFilter = basicDBObject19;
        boolean boolean21 = builder0.getmongoGridFS();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder23 = builder0.statisticsTypeName("credentials");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder25 = builder23.throttleSize((int) (short) 100);
        builder23.statisticsIndexName = "parent_types";
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serverAddressArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(basicDBObject19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition2 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str3 = mongoDBRiverDefinition2.getCONNECTION_TIMEOUT();
        java.lang.String str4 = mongoDBRiverDefinition2.getCREDENTIALS_FIELD();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = mongoDBRiverDefinition2.getDEFAULT_BULK_SIZE();
        java.lang.String str6 = mongoDBRiverDefinition2.indexName;
        java.lang.String str7 = mongoDBRiverDefinition2.getBULK_SIZE_FIELD();
        int int8 = mongoDBRiverDefinition2.getDEFAULT_CONCURRENT_REQUESTS();
        com.mongodb.BasicDBObject basicDBObject9 = mongoDBRiverDefinition2.getMongoOplogFilter();
        java.lang.String str10 = mongoDBRiverDefinition2.getSSL_VERIFY_CERT_FIELD();
        java.lang.String str11 = mongoDBRiverDefinition2.getINITIAL_TIMESTAMP_SCRIPT_TYPE_FIELD();
        java.util.Set<java.lang.String> strSet12 = mongoDBRiverDefinition2.getParentTypes();
        java.lang.String str13 = mongoDBRiverDefinition2.mongoCollection;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "connect_timeout" + "'", str3, "connect_timeout");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "credentials" + "'", str4, "credentials");
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bulk_size" + "'", str7, "bulk_size");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNull(basicDBObject9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ssl_verify_certificate" + "'", str10, "ssl_verify_certificate");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "script_type" + "'", str11, "script_type");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        java.lang.String str4 = builder0.mongoAdminUser;
        builder0.disableIndexRefresh = false;
        java.lang.String str7 = builder0.getincludeCollection();
        int int8 = builder0.connectTimeout;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str10 = builder9.typeName;
        com.mongodb.BasicDBObject basicDBObject11 = null;
        builder9.mongoCollectionFilter = basicDBObject11;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder14 = builder9.mongoUseSSL(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        builder14.mongoClientOptions = mongoClientOptions15;
        builder14.setmongoCollection("gridfs");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory19 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder20 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition22 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder21);
        java.util.Set<java.lang.String> strSet23 = builder21.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder21.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject25 = null;
        builder21.setmongoOplogFilter(basicDBObject25);
        com.mongodb.BasicDBObject basicDBObject27 = builder21.getmongoCollectionFilter();
        builder20.mongoCollectionFilter = basicDBObject27;
        org.elasticsearch.script.ExecutableScript executableScript29 = docScoreNativeScriptFactory19.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject27);
        builder14.setmongoCollectionFilter(basicDBObject27);
        builder0.setmongoOplogFilter(basicDBObject27);
        builder0.settypeName("user");
        builder0.skipInitialImport = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(basicDBObject27);
        org.junit.Assert.assertNotNull(executableScript29);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        builder0.setmongoDb("initial_timestamp");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = builder0.dropCollection(false);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder6 = builder0.skipInitialImport(false);
        com.mongodb.BasicDBObject basicDBObject7 = builder6.mongoCollectionFilter;
        builder6.setskipInitialImport(false);
        java.lang.String str10 = builder6.getscript();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(basicDBObject7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript0 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript0.setNextScore((float) (byte) 1);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder4 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition5 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder4);
        java.util.Set<java.lang.String> strSet6 = builder4.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder4.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject8 = null;
        builder4.setmongoOplogFilter(basicDBObject8);
        boolean boolean10 = builder4.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray11 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList12 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList12, serverAddressArray11);
        builder4.mongoServers = serverAddressList12;
        java.lang.String str15 = builder4.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder16 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str17 = builder16.typeName;
        com.mongodb.BasicDBObject basicDBObject18 = null;
        builder16.mongoCollectionFilter = basicDBObject18;
        java.lang.String str20 = builder16.mongoAdminUser;
        builder16.disableIndexRefresh = false;
        java.lang.String str23 = builder16.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder29 = builder24.mongoUseSSL(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        builder29.setparentTypes((java.util.Set<java.lang.String>) strSet40);
        builder16.parentTypes = strSet40;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder4.parentTypes((java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder46 = builder4.includeCollection("type");
        docScoreSearchScript0.setNextVar("", (java.lang.Object) builder4);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder48 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition49 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition50 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder48);
        java.lang.String str51 = mongoDBRiverDefinition50.getCONNECTION_TIMEOUT();
        int int52 = mongoDBRiverDefinition50.getConnectTimeout();
        boolean boolean53 = mongoDBRiverDefinition50.getmongoSecondaryReadPreference();
        java.lang.String str54 = mongoDBRiverDefinition50.getACTIONS_FIELD();
        int int55 = mongoDBRiverDefinition50.connectTimeout;
        java.lang.Object obj56 = docScoreSearchScript0.unwrap((java.lang.Object) mongoDBRiverDefinition50);
        org.elasticsearch.script.ScriptService.DocScoreSearchScript docScoreSearchScript58 = new org.elasticsearch.script.ScriptService.DocScoreSearchScript();
        docScoreSearchScript58.setNextScore((float) (byte) 1);
        java.lang.Object obj62 = docScoreSearchScript58.unwrap((java.lang.Object) (-1));
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str65 = builder64.typeName;
        com.mongodb.BasicDBObject basicDBObject66 = null;
        builder64.mongoCollectionFilter = basicDBObject66;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder69 = builder64.mongoAdminPassword("db");
        docScoreSearchScript58.setNextVar("bulk_size", (java.lang.Object) builder64);
        java.util.Set<java.lang.String> strSet71 = builder64.getincludeFields();
        docScoreSearchScript0.setNextVar("advanced_transformation", (java.lang.Object) strSet71);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = docScoreSearchScript0.runAsDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNull(mongoClientOptions7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serverAddressArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "connect_timeout" + "'", str51, "connect_timeout");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "actions" + "'", str54, "actions");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + (-1) + "'", obj62, (-1));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(strSet71);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.mongoGridFS(true);
        java.lang.String str9 = builder0.riverIndexName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        builder0.setconnectTimeout(100);
        java.lang.String str13 = builder0.includeCollection;
        java.lang.String str14 = builder0.typeName;
        java.lang.String str15 = builder0.getmongoLocalUser();
        builder0.mongoSSLVerifyCertificate = false;
        java.lang.String str18 = builder0.script;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        java.lang.String str3 = builder0.getstatisticsIndexName();
        builder0.setsocketTimeout(10);
        builder0.setstatisticsTypeName("size");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = builder0.mongoGridFS(true);
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder11 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        com.mongodb.BasicDBObject basicDBObject18 = builder12.getmongoCollectionFilter();
        builder11.mongoCollectionFilter = basicDBObject18;
        org.elasticsearch.river.RiverSettings riverSettings20 = new org.elasticsearch.river.RiverSettings(settings10, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject18);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder21 = builder0.mongoCollectionFilter(basicDBObject18);
        org.elasticsearch.river.mongodb.Timestamp<?> wildcardTimestamp22 = builder0.getinitialTimestamp();
        boolean boolean23 = builder0.getadvancedTransformation();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        java.lang.String str29 = builder24.getriverName();
        builder24.storeStatistics = true;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder33 = builder24.mongoLocalUser("options");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder35 = builder24.typeName("import_all_collections");
        java.util.Set<java.lang.String> strSet36 = builder24.getexcludeFields();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition38 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder37);
        int int39 = mongoDBRiverDefinition38.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList40 = mongoDBRiverDefinition38.mongoServers;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder41 = builder24.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder42 = builder0.mongoServers(serverAddressList40);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = builder42.mongoSSLVerifyCertificate(false);
        int int45 = builder42.connectTimeout;
        builder42.setriverName("include_collection.include_collection");
        builder42.connectTimeout = (short) 10;
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(basicDBObject18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(wildcardTimestamp22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(serverAddressList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions3 = builder0.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject4 = null;
        builder0.setmongoOplogFilter(basicDBObject4);
        boolean boolean6 = builder0.dropCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder8 = builder0.socketTimeout((int) ' ');
        java.util.Set<java.lang.String> strSet9 = builder8.excludeFields;
        builder8.setriverName("hi!");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder13 = builder8.mongoAdminUser("concurrent_bulk_requests");
        com.mongodb.BasicDBObject basicDBObject14 = builder8.mongoOplogFilter;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder15 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str16 = builder15.typeName;
        com.mongodb.BasicDBObject basicDBObject17 = null;
        builder15.mongoCollectionFilter = basicDBObject17;
        java.lang.String str19 = builder15.mongoAdminUser;
        builder15.disableIndexRefresh = false;
        java.lang.String str22 = builder15.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder15.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition25 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder24);
        java.util.Set<java.lang.String> strSet26 = builder24.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder24.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject28 = null;
        builder24.setmongoOplogFilter(basicDBObject28);
        boolean boolean30 = builder24.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray31 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList32 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList32, serverAddressArray31);
        builder24.mongoServers = serverAddressList32;
        java.lang.String str35 = builder24.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder36 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str37 = builder36.typeName;
        com.mongodb.BasicDBObject basicDBObject38 = null;
        builder36.mongoCollectionFilter = basicDBObject38;
        java.lang.String str40 = builder36.mongoAdminUser;
        builder36.disableIndexRefresh = false;
        java.lang.String str43 = builder36.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder44 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str45 = builder44.typeName;
        com.mongodb.BasicDBObject basicDBObject46 = null;
        builder44.mongoCollectionFilter = basicDBObject46;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder49 = builder44.mongoUseSSL(true);
        java.lang.String[] strArray59 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        builder49.setparentTypes((java.util.Set<java.lang.String>) strSet60);
        builder36.parentTypes = strSet60;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder64 = builder24.parentTypes((java.util.Set<java.lang.String>) strSet60);
        builder15.setexcludeFields((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder66 = builder8.parentTypes((java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder68 = builder8.indexName("db");
        builder8.setindexName("hi!");
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(mongoClientOptions3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(basicDBObject14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(mongoClientOptions23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(mongoClientOptions27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(serverAddressArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        java.lang.String str3 = org.elasticsearch.river.mongodb.MongoDBRiverDefinition.addRemovePrefix("parent_types", "", true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.mongoCollection;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = builder0.connectTimeout((int) (byte) 0);
        boolean boolean4 = builder0.getmongoUseSSL();
        builder0.settypeName("local");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str1 = builder0.typeName;
        com.mongodb.BasicDBObject basicDBObject2 = null;
        builder0.mongoCollectionFilter = basicDBObject2;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder5 = builder0.mongoAdminPassword("db");
        org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory docScoreNativeScriptFactory6 = new org.elasticsearch.script.ScriptService.DocScoreNativeScriptFactory();
        org.elasticsearch.common.settings.Settings settings7 = null;
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder9 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition10 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder9);
        java.util.Set<java.lang.String> strSet11 = builder9.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder9.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject13 = null;
        builder9.setmongoOplogFilter(basicDBObject13);
        com.mongodb.BasicDBObject basicDBObject15 = builder9.getmongoCollectionFilter();
        org.elasticsearch.river.RiverSettings riverSettings16 = new org.elasticsearch.river.RiverSettings(settings8, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.RiverSettings riverSettings17 = new org.elasticsearch.river.RiverSettings(settings7, (java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.script.ExecutableScript executableScript18 = docScoreNativeScriptFactory6.newScript((java.util.Map<java.lang.String, java.lang.Object>) basicDBObject15);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder19 = builder0.mongoOplogFilter(basicDBObject15);
        java.lang.String str20 = builder0.typeName;
        com.mongodb.MongoClientOptions mongoClientOptions21 = null;
        builder0.mongoClientOptions = mongoClientOptions21;
        int int23 = builder0.connectTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(basicDBObject15);
        org.junit.Assert.assertNotNull(executableScript18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        int int2 = mongoDBRiverDefinition1.getDEFAULT_CONCURRENT_REQUESTS();
        java.util.List<com.mongodb.ServerAddress> serverAddressList3 = mongoDBRiverDefinition1.mongoServers;
        java.lang.String str4 = mongoDBRiverDefinition1.getMongoLocalUser();
        int int5 = mongoDBRiverDefinition1.throttleSize;
        java.lang.String str6 = mongoDBRiverDefinition1.getDEFAULT_DB_HOST();
        java.lang.String str7 = mongoDBRiverDefinition1.getScript();
        java.util.Set<java.lang.String> strSet8 = mongoDBRiverDefinition1.getIncludeFields();
        java.lang.String str9 = mongoDBRiverDefinition1.getBULK_SIZE_FIELD();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(serverAddressList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "localhost" + "'", str6, "localhost");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bulk_size" + "'", str9, "bulk_size");
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder0 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition1 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.util.Set<java.lang.String> strSet2 = builder0.includeFields;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder3 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str4 = builder3.typeName;
        com.mongodb.BasicDBObject basicDBObject5 = null;
        builder3.mongoCollectionFilter = basicDBObject5;
        java.lang.String str7 = builder3.mongoAdminUser;
        builder3.disableIndexRefresh = false;
        java.lang.String str10 = builder3.getincludeCollection();
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder3.getmongoClientOptions();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder12 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition13 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder12);
        java.util.Set<java.lang.String> strSet14 = builder12.includeFields;
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder12.getmongoClientOptions();
        com.mongodb.BasicDBObject basicDBObject16 = null;
        builder12.setmongoOplogFilter(basicDBObject16);
        boolean boolean18 = builder12.dropCollection;
        com.mongodb.ServerAddress[] serverAddressArray19 = new com.mongodb.ServerAddress[] {};
        java.util.ArrayList<com.mongodb.ServerAddress> serverAddressList20 = new java.util.ArrayList<com.mongodb.ServerAddress>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.mongodb.ServerAddress>) serverAddressList20, serverAddressArray19);
        builder12.mongoServers = serverAddressList20;
        java.lang.String str23 = builder12.mongoAdminPassword;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder24 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str25 = builder24.typeName;
        com.mongodb.BasicDBObject basicDBObject26 = null;
        builder24.mongoCollectionFilter = basicDBObject26;
        java.lang.String str28 = builder24.mongoAdminUser;
        builder24.disableIndexRefresh = false;
        java.lang.String str31 = builder24.typeName;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder32 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder();
        java.lang.String str33 = builder32.typeName;
        com.mongodb.BasicDBObject basicDBObject34 = null;
        builder32.mongoCollectionFilter = basicDBObject34;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder37 = builder32.mongoUseSSL(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "connect_timeout", "hi!", "port", "connect_timeout", "port", "bulk_size", "concurrent_bulk_requests", "", "options" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        builder37.setparentTypes((java.util.Set<java.lang.String>) strSet48);
        builder24.parentTypes = strSet48;
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder52 = builder12.parentTypes((java.util.Set<java.lang.String>) strSet48);
        builder3.setexcludeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition.Builder builder54 = builder0.includeFields((java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.river.mongodb.MongoDBRiverDefinition mongoDBRiverDefinition55 = new org.elasticsearch.river.mongodb.MongoDBRiverDefinition(builder0);
        java.lang.String str56 = mongoDBRiverDefinition55.typeName;
        java.lang.String str57 = mongoDBRiverDefinition55.getSCRIPT_TYPE_FIELD();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(mongoClientOptions11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serverAddressArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "script_type" + "'", str57, "script_type");
    }
}

